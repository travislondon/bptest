========================================================================

File:      $RCSfile: i845-2.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:22:27 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Package-level CM - Milestone 2

Abstract
--------
This note describes the changes for delivering the second milestone for the
multi-file model repository implementation.

History
-------

Document References
-------------------
[1] document:/internal/technical/Persistence/i845.ant
[2] document:/internal/technical/Persistence/i845-1.dnt
[3] document:/internal/technical/Architecture/unique_id.dnt

Background
----------

The work described in [1] is divided into several deliverables for managing the 
work.  This note describes the design for the sections of the analysis 
designated for the second group work.

Analysis
--------

The following functionality is implemented in the design:

- One file per component
- Proxies and lazy loading
- Simple model upgrade tool
- Multi-file specific tests

When complete this milestone will work exactly as previous milestones, except
that there will be multiple files for each domain.  Additionally, the system
information is now stored in a file as well.  Functionality that will be 
implemented in later milestones includes:

- Nested packages
- Compare support
- Dangling reference detection and display

Independent of this design, work for assuring that model element ids are 
unique is being done by [3].

Design
------

1. Proxies

1.1  Proxy implementation

In the current implementation, there is a class named DomainProxy, which acts
as a placeholder for a Domain_c class instance when the Domain hasn't been 
loaded yet.  The fact that the DomainProxy and Domain_c are two different 
classes causes special case code testing for instanceof DomainProxy to be 
written throughtout the code.  This design must remove the need for a separate
proxy class, otherwise the special case code will be everywhere.

1.1.1  Single class implements all functionality

The external interface provided by a class is the same whether the internals of
the class are a proxy, or the actual class.  The class itself can then do the
correct thing, and no other class should need to know what the internals are.

1.1.2  Changes to class interface

The classes generated by MC-Java have the following changes:

- static createProxy(..[all parameters].., String filePath) method that returns 
   an instance.

- static resolveInstance(..[all parameters]..) method that returns an instance. 
   The method searches the instance database for a matching identifier.  If the 
   proxy is found, then the proxy is converted to a 'real' instance, and that 
   instance is returned.  If no match is found, a new instance is created and 
   returned.
   
- void convertToProxy() changes the internals to be a proxy.  If the internals
are already a proxy, nothing happens.  This routine is only needed for the case
of a component being unloaded (see 2.3).

- void convertToRealInstance(..[all parameters]..) changes the internals to be a
real instance. This method facilitates conversion of a proxy to a real instance.
All attributes are passed as parameters so that the real data from the persisted 
file can be copied over cached data of the proxy.

1.1.3  Changes to class internals

1.1.3.1  Proxy changes

The public methods (described in 1.1.2) are implemented.  A private data member
named 'm_contentPath' of type String is added.  This value is initialized to 
null, and set to the value passed into createProxy().  The instance is 
considered a proxy if m_contentPath != null.  A protected method isProxy() is 
added to encapsulate this.

1.1.3.2  Add lazy loading support

Lazy loading requires that a component is not imported until it is needed.
The need is determined by a select (either related by or from instances of)
operation attempting to resolve an instance in a component.

Three methods will be introduced in PersistenceManager class.

 - PersistenceManager.ensureAvailable(ModelRoot modelRoot, 
                                                         Class modelElementType)
 - PersistenceManager.ensureAvailable(NonRootModelElement requestor, 
                                        String relation, Class modelElementType)
 
   This method is called by the getMany*, <class>Instance and <class>Instances 
   methods. This method is also called by getOne* methods when RTO->RGO 
   navigation is done.

 - PersistenceManager.ensureAvailable(Class modelElementType, 
                         NonRootModelElement cachedReference, Object[] uniqueId)
   This method is called by getOne* methods when RGO->RTO navigation is done.
   
These methods will provide a single place for implementing how a model element
with a given available information set (see set of parameters in above methods)
can be located and loaded if required. This will facilitate later improvements 
for lazy loading. 


1.1.4  Remove DomainProxy code

The DomainProxy class is deleted, and all special case code that checks for
instanceof DomainProxy is changed to work correctly without the special case
code.

1.1.5 Constraints of proxy implementation

There are two cases when proxies are written to component files:

- containment relationship:  When the cross component relationship is the
containment relationship between a parent and child (e.g., R28 between System
Model and Domain), there is no proxy data in the child component to the parent
component file.  Instead, proxy data for the child component is written to the 
parent component file. 

Parent to child relationship is established on the basis of availability of 
component containing the child. If a component does not exist or does not 
contain the required model element, it is assumed that it was never there. Any 
alternate paths to that model element shall be handled by dangling reference 
code. If it is available, it will be related with the parent. It is up to code 
(including graphics) that it handles the case where relevant data is not 
available.

- cross-component relationship: For any other case of a cross-component 
relationship, the proxy data is stored in the component containing the referring
class.  

In the rare case when the component containing the referred to (RTO)
class is loaded, and the component containing the referring class (RGO) is not 
loaded, and we attempt to navigate from the RTO instance to the RGO instance, 
all components that could contain an RGO instance are loaded.  For example, 
if a function package is loaded, then the search for related datatypes would
cause all datatype packages to be loaded.

1.2  Import changes

1.2.1  Import of proxy data

In the method ImportModelComponent.processStatement(), a test for a table
name of "${table.Key_Lett}_PROXY" is generated, in addition to the test for
"${table.Key_Lett}".  The PROXY case invokes the static member createProxy() 
that takes the attributes plus path argument (exported as described in 1.3.1.2).   
The createProxy() operation will 

   if the instance is already loaded
      return that instance
   else
      return a proxy (newly created) version of the instance

The instance returned by createProxy() will be added to the unlinkedInstances 
list for post processing.

1.2.2  Import of actual data

In the method ImportModelComponent.processStatement(), when a non-proxy insert
statement is parsed, the resultant code is changed to invoke resolveInstance(),
instead of the constructor directly.

The instance returned by resolveInstance() will be added to the 
unlinkedInstances list for post processing.

1.2.3  Conversion of proxy into real instance.

The function convertToRealInstance() does the following

- Unrelate all relations with this proxy.
- Copy all newly read data into this proxy
- Mark the proxy as a real instance by setting m_contentPath to null.

1.2.4  Post processing

Each element in the unlinkedInstances list has batchRelate() invoked on it as 
before.  If the underlying instance is a proxy, then nothing is done by
batchRelate().

1.3  Export changes

1.3.1  Export of proxy data

When a component is exported, the proxy data for instances related to the 
component across component boundaries must be exported as well.  

1.3.1.1  Add proxy export method 

A method is generated for each model class named write_${class_name}_proxy_sql.
The method is similar to write_${class_name}_sql, with the following changes:

- The insert statement becomes "INSERT INTO ${table.Key_Lett}_PROXY\n\tVALUES ("
- After all data for the instance is written, the result of the component
getFullPath() is written as the last column in the table.

It is left as an implementation detail to implement the two functions so that
there is no duplicated code.

The MC-Java schema is changed to add the _PROXY table definitions. The
Model Compilers schemas will have to have the definitions added as well,
but they can just ignore the instances, as the real component information
will be available as well.

1.3.1.2  Export proxy data

The export_${component_name} method is changed to add a search for instances 
referred to across component boundaries.  For each of those instances, the
write_${class_name}_proxy_sql method is invoked.  If there is a containment
association, then the child proxy data is written in the parent component.

2. One file per component

The work from [2] implemented the import and export of data from component
level files.  The following additional work needs to be done to use these files
instead of the current single-file model data.  While there are multiple files
per domain, there is still only one model root per domain.   Alternatively, 
we could have one model root per component, but the work to implement cross-
model-root relationship navigation was seen as more difficult than changing the
model root clearDatabase() method to respect component boundaries.

2.1  Clear database

There are two scenarios of clear database. One where model elements related to 
the whole domain are removed from the associated model root. And one where model 
elements of a given component are removed from the associated model root. A 
method clearDatabase() is added in PersistableModelComponent, which allows us 
to remove only the relevant model elements from the model root.  Only the 
model elements for the component are deleted.

2.2  External link evaluator

In order to determine external links of a given model component, 
create_external_link_evaluator.arc is created. It creates a class 
ExternalRelationEvaluator. This class will be required when a component is 
unloaded, it will be used to determine the model elements that are part of 
this component and have link(s) with external model elements.   This set of 
model elements will not be removed from the model root but turned into proxies.

The following class is introduced that will describe an external link.

class ExternalRelation {
   public int getAssociationNumber();
   Returns the association number of this relation.
   
   public NonRootModelElement getLocalParticipant();
   Returns the model element which is local to the component
   
   public NonRootModelElement getExternalParticipant();
   Return a model element which is external to the component
   
   public boolean isLocalParticipantRGO();
   Return true if local participant is serving as "Referring Class in 
   Association". This method shall be used to filter RTO or RGO external links.
}

ExternalRelationEvaluator will have following utility method

 - public static List findExternalRelations(PersistableModelComponent)
   Returns a list of external links for the given model component.

 - public static List findExternalRelations(NonRootModelElement modelElement)
   Returns a list of external links for the given model element.

The following interface is introduced

ExternalRelationEvaluator.IMEExternalRelationEvaluator {
 - public void findExternalRelations(NonRootModelElement modelElement, 
                                                             List externalMEs);
   Inserts the external relations of given model element into the given list.
}

2.3  Modify listeners

The listeners are changed to work with individual components.

The class ComponentStructureSynchronizer is created to replace the classes
ResourceChangeListener and ResourceUpdaterModelChangeListener. Previous classes
were designed to handle single file per domain and were in bp.core package. The
new class brings all code that is related to keeping the directory structure in 
sync with the model structure in one place. It implements both 
ITransactionListener and IResourceChangeListener. Moreover it is created in 
common package as all general persistence related classes are already in common 
package.

Note: The use of ITransactionListener intead of IModelChangeListener provides 
more control over when to respond to model changes and when not. This 
facilitates avoiding re-entrant notifications caused by the same class, for 
example: model changes made by the resource listener part of the 
ComponentStructureSynchronizer class causes a re-entry.

When a component is unloaded, the cross component references are changed 
to proxies in the referring component by calling convertToProxy() on the
referred to instances.  One exception to this is that the containment
association across components is only instantiated in the parent to child
direction.  For example, when unloading a Subsystem, the related Model Class
instances will not have a proxy to the Subsystem instance.

The deletion of a component resource causes only the model elements contained
in that component to be deleted.

2.4  Placeholder files

The location of placeholder files is changed to be the directory where the
component containing the description or activity is located.  This change is
made in PlaceHolderEntry.getPlaceHolderLocation().  In the case of being unable
to find that location (i.e., during unit tests), the project directory is used
for the placeholder file directory.

2.5  Persist via transaction manager

The method EclipseOoaofooa.persist() is deleted.  The nested class 
PersistableModelComponent.AutoComponentPersister (implements 
ITransactionListener) is created. The transactionEnded method collects all
components that have changed in the transaction, and persists each component
individually.  Nothing needs to be done for components that are deleted, as
the resource change model listener will delete the resource associated with
the deleted component.

3. Simple model upgrade tool

3.1  Add context menu to invoke conversion tool

The following extension point is added to io.mdl/plugin.xml.  The popup menu
is added to the context menu for a project.

   <extension
         point="org.eclipse.ui.popupMenus">
      <objectContribution
            objectClass="org.eclipse.core.resources.IProject"
            id="com.mentor.nucleus.bp.io.mdl.contribution1">
         <action
               enablesFor="1"
               label="Convert to multi-file model storage"
               class="com.mentor.nucleus.bp.io.mdl.ConvertToMultifileAction"
               menubarPath="additions"
               id="com.mentor.nucleus.bp.io.mdl.convertAction"/>
      </objectContribution>
   </extension>

3.2  Implement context menu action

The class ConvertToMultifileAction is added to the io.mdl project.  The class
implements IObjectActionDelegate.  The run() method of the class does the 
following:

  - Ask the user if they really want to do this
  - Find all .xtuml files in the models folder of the project, and import them
  - Export all domains in the new format
    
4. Test changes

4.1 There are new tests for multi-file domains described in the unit test 
section.

4.2 Existing models for existing tests are converted to the multi-file format.
The files testing imports of data from previous versions of BridgePoint (V6.x 
and V7.x) will remain unchanged.

4.3 Existing unit tests with converted model files are modified to work with the
new model file format.

Design Comments
---------------

- The following associations are legacy containment associations, and are 
treated as containment associations during export:  R1, R8, R14, and R23.

Work Required
-------------

1. Proxies

1.1  Proxy implementation

1.1.1  Single class implements all functionality

1.1.2  Changes to class interface

The changes are made to java.arc as described in the design.

1.1.3  Changes to class internals

1.1.3.1  Proxy changes

The public methods (described in 1.1.2) are implemented in NonRootModelElement.
A private data member named 'm_contentPath' of type String is added to 
NonRootModelElement.  This value is initialized to 
null, and set to the value passed into createProxy().  The instance is 
considered a proxy if m_contentPath != null.  A protected method isProxy() is 
added to encapsulate this.

1.1.3.2  Add lazy loading support

The changes are made to PersistableModelComponent.java as described in the
design.  Invocations of ensureAvailable() are added to java.arc and
referred_to.inc.

1.1.4  Remove DomainProxy code

All work described in the design.

1.1.5 Constraints of proxy implementation

These guildelines are used for the import and export changes.

1.2  Import changes

1.2.1  Import of proxy data

The design changes are made to gen_import_java.inc.

1.2.2  Import of actual data

The design changes are made to gen_import_java.inc.

1.2.3  Conversion of proxy into real instance.

The function is generated by java.arc.  The method batchUnrelate() is generated
to handle unrelating all relationships for each class.

1.2.4  Post processing

No changes needed.

1.3  Export changes

1.3.1  Export of proxy data

1.3.1.1  Add proxy export method 

The design changes are made to gen_export_java.inc.
The MC-Java schema is changed as described in the design.

1.3.1.2  Export proxy data

The design changes are made to gen_export_java.inc.

2. One file per component

2.1  Clear database

The changes are made to PersistableModelComponent.java as described in the
design.

2.2  External link evaluator

The changes are made as described in the design.

2.3  Modify listeners

The changes are made as described in the design.

2.4  Placeholder files

The changes are made as described in the design.

2.5  Persist via transaction manager

The changes are made as described in the design.

3. Simple model upgrade tool

The changes are made as described in the design.

4. Test changes

The changes are made as described in the design.

Unit Test
---------

Note that existing unit tests may cause a dangling reference to occur.
If that is the case, then that test failure will not hinder to promotion
of this design.  The failure will be addressed when dangling references are
addressed.

Renaming tests

_- Rename a loaded domain
_R The name of directory and the containing model file are renamed to new name 
   of domain

_- Rename the directory
_R The name of the containing model file and model element are renamed to 
   new name.
   
_- Rename the file
_R The name of the container directory and model element are renamed to new 
   name.

Repeat above tests (if applicable) when associated component is not loaded.
Repeat above tests for each component type: 

. System Model
. Domain
. Data Type Package
. Function Package
. External Entity Package
. Subsystem
. Model Class

The Instance State Machine and Class State Machine components cannot be 
renamed:

_- Rename the directory of instance state chart or class state chart
_R The directory is renamed backed to previous name.

_- Rename the model file of instance state chart or class state chart
_R The file is renamed backed to previous name.

Reload tests

_- Load a model with all component types.
_- load all components and save the state of model as initial state.
_- Starting from the leaf components, for each component in the component tree 
   unload and load component
_- compare the current state of model with the initial state.
_R The two states are equal.

Tests regarding containment relationships.

_- Load a domain
_- Create a new subsystem in it.
_R Domain is saved
_R New directory and component file are created for the new subsystem
_- Restore the domain file with the previous version
_R New subsystem does not appear in model explorer.
_R But its file exist in the component tree structure.
_- Restore the domain file with a version containing the proxy for new 
   subsystem.
_R New subsystem appears in model explorer.
_R New subsystem appears in Domain diagram.

Repeat above test for all containment relationships.

End
---

$Log: i845-2.dnt,v $
Revision 1.1  2009/09/03 18:22:27  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.15  2009/01/01 23:13:09  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.14.30.1  2008/12/31 16:10:12  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.14  2005/09/27 23:11:15  greg
Job: 845
Minor typos

Revision 1.13  2005/09/27 15:40:54  babar
Job:845
Updated work required number ordering.

Revision 1.12  2005/09/27 15:33:58  babar
Job:845
Updated reference.

Revision 1.11  2005/09/27 15:27:09  babar
Job:845
Added some unit tests.

Revision 1.10  2005/09/27 07:00:34  greg
Job: 845
Changed back to putting proxies in component parents.
Fixed typos and obsevations

Revision 1.8  2005/09/23 17:55:47  greg
Job: 845
Integrated alternative approach...Almost ready for review

Revision 1.7  2005/09/23 11:35:47  babar
Job:845
checkin in an alternate design approach

Revision 1.6  2005/09/22 22:54:59  greg
Job: 845
Rework for one-way proxies

Revision 1.5  2005/09/22 13:22:51  sidrees
Job:845
incremental + discussion/arguments

Revision 1.4  2005/09/20 21:45:15  greg
Job: 845
Add proxy special case for containment relationships

Revision 1.3  2005/09/20 14:49:48  greg
Job: 845
Update tests

Revision 1.2  2005/09/19 12:33:40  babar
Job:845
Filled the blanks

Revision 1.1  2005/09/16 21:39:33  greg
Job: 845
First, very rough, draft
