-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	"8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	"8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("ed367dd1-37c6-52e8-c994-976e95c9cd60",
	112,
	"e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("85340fa1-0686-5880-ee3e-ec29daa45d78",
	"ed367dd1-37c6-52e8-c994-976e95c9cd60",
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("85340fa1-0686-5880-ee3e-ec29daa45d78");
INSERT INTO GD_NCS
	VALUES ("85340fa1-0686-5880-ee3e-ec29daa45d78");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"85340fa1-0686-5880-ee3e-ec29daa45d78");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"85340fa1-0686-5880-ee3e-ec29daa45d78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85340fa1-0686-5880-ee3e-ec29daa45d78",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("ca96d243-69c7-6d51-80e6-0711a4f0c3a1",
	"ed367dd1-37c6-52e8-c994-976e95c9cd60",
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("ca96d243-69c7-6d51-80e6-0711a4f0c3a1");
INSERT INTO GD_NCS
	VALUES ("ca96d243-69c7-6d51-80e6-0711a4f0c3a1");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"ca96d243-69c7-6d51-80e6-0711a4f0c3a1");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"ca96d243-69c7-6d51-80e6-0711a4f0c3a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ca96d243-69c7-6d51-80e6-0711a4f0c3a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("9e287996-e30c-6b3e-7ceb-31a2e416a005",
	"ed367dd1-37c6-52e8-c994-976e95c9cd60",
	"f134585e-4a14-3d50-c9b5-39967e3f04f4",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("9e287996-e30c-6b3e-7ceb-31a2e416a005");
INSERT INTO GD_NCS
	VALUES ("9e287996-e30c-6b3e-7ceb-31a2e416a005");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"9e287996-e30c-6b3e-7ceb-31a2e416a005");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"9e287996-e30c-6b3e-7ceb-31a2e416a005",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e287996-e30c-6b3e-7ceb-31a2e416a005",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("ed367dd1-37c6-52e8-c994-976e95c9cd60",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("96737f3d-962b-efda-68a8-edf9a798aed5",
	1,
	"e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	"8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	112,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("c9b06448-16ea-41c3-40fd-8b48d81a405e",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("c9b06448-16ea-41c3-40fd-8b48d81a405e");
INSERT INTO GD_NCS
	VALUES ("c9b06448-16ea-41c3-40fd-8b48d81a405e");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"c9b06448-16ea-41c3-40fd-8b48d81a405e");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"c9b06448-16ea-41c3-40fd-8b48d81a405e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c9b06448-16ea-41c3-40fd-8b48d81a405e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("1ce6e1a6-f58d-f520-17a2-4a97a0d24499",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO GD_NCS
	VALUES ("1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1ce6e1a6-f58d-f520-17a2-4a97a0d24499",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4424b476-a05a-d5cf-a25d-7a73d8dde984",
	1760.000000,
	1856.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_CON
	VALUES ("eb4e2e6f-fa2e-5f4a-65fe-c07988cde516",
	1888.000000,
	1440.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_CON
	VALUES ("32e381dc-ff59-c9e7-c194-419cad200af1",
	1888.000000,
	1584.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_CON
	VALUES ("73d31695-67bc-b6ce-0ae3-fa918d243c5f",
	1888.000000,
	1728.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_CON
	VALUES ("ee872621-33c6-a9f8-28c3-cfb671f55bb9",
	1888.000000,
	1472.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO DIM_CON
	VALUES ("a0fd34c5-f963-a911-e26b-5fbed622eecc",
	1856.000000,
	1856.000000,
	"1ce6e1a6-f58d-f520-17a2-4a97a0d24499");
INSERT INTO GD_GE
	VALUES ("65d0cb93-4131-f2f5-7c4a-86003f010e34",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("65d0cb93-4131-f2f5-7c4a-86003f010e34");
INSERT INTO GD_NCS
	VALUES ("65d0cb93-4131-f2f5-7c4a-86003f010e34");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"65d0cb93-4131-f2f5-7c4a-86003f010e34");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"65d0cb93-4131-f2f5-7c4a-86003f010e34",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("65d0cb93-4131-f2f5-7c4a-86003f010e34",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ea4a03f9-5911-ae1f-18ad-9a33ebd7164e",
	2112.000000,
	1440.000000,
	"65d0cb93-4131-f2f5-7c4a-86003f010e34");
INSERT INTO DIM_CON
	VALUES ("f3f8aed8-66a9-a619-73a3-334d5f84e2b8",
	2112.000000,
	1472.000000,
	"65d0cb93-4131-f2f5-7c4a-86003f010e34");
INSERT INTO GD_GE
	VALUES ("33dec430-e5f2-fb64-0de3-7cb9ffab1fa7",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"2b094710-d59a-bac2-fb53-72d5fc38e311",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("33dec430-e5f2-fb64-0de3-7cb9ffab1fa7");
INSERT INTO GD_NCS
	VALUES ("33dec430-e5f2-fb64-0de3-7cb9ffab1fa7");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"33dec430-e5f2-fb64-0de3-7cb9ffab1fa7");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"33dec430-e5f2-fb64-0de3-7cb9ffab1fa7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("33dec430-e5f2-fb64-0de3-7cb9ffab1fa7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7745050c-39ab-4aa5-b110-76150913c51d",
	2112.000000,
	1584.000000,
	"33dec430-e5f2-fb64-0de3-7cb9ffab1fa7");
INSERT INTO GD_GE
	VALUES ("fbef25a9-1658-8fc5-6844-e5bbdd7d570f",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"35a498e1-65ea-eff6-8877-a190e6f608ef",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("fbef25a9-1658-8fc5-6844-e5bbdd7d570f");
INSERT INTO GD_NCS
	VALUES ("fbef25a9-1658-8fc5-6844-e5bbdd7d570f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"fbef25a9-1658-8fc5-6844-e5bbdd7d570f");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"fbef25a9-1658-8fc5-6844-e5bbdd7d570f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fbef25a9-1658-8fc5-6844-e5bbdd7d570f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c7997d11-0938-a5e9-cc72-4bb5a7c6c420",
	2112.000000,
	1728.000000,
	"fbef25a9-1658-8fc5-6844-e5bbdd7d570f");
INSERT INTO GD_GE
	VALUES ("cabec59d-976c-caa0-aed8-77196d343aa8",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("cabec59d-976c-caa0-aed8-77196d343aa8");
INSERT INTO GD_NCS
	VALUES ("cabec59d-976c-caa0-aed8-77196d343aa8");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"cabec59d-976c-caa0-aed8-77196d343aa8");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"cabec59d-976c-caa0-aed8-77196d343aa8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cabec59d-976c-caa0-aed8-77196d343aa8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"b9576516-defd-6566-d57f-11c030375935",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO GD_NCS
	VALUES ("2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("cb4429d6-aace-f9f1-dc01-576da7b3c51a",
	1760.000000,
	1952.000000,
	"2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO DIM_CON
	VALUES ("af3ffaf4-79cd-a098-55ee-896ab90c2fb1",
	1712.000000,
	2320.000000,
	"2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO DIM_CON
	VALUES ("e44488b0-697e-2860-0035-418faba16989",
	1856.000000,
	1952.000000,
	"2f77b4c0-dfe5-0efa-b6a5-8399f5b0fe24");
INSERT INTO GD_GE
	VALUES ("f9305d7a-c330-9650-4b1f-cfe2d3b51502",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("f9305d7a-c330-9650-4b1f-cfe2d3b51502");
INSERT INTO GD_NCS
	VALUES ("f9305d7a-c330-9650-4b1f-cfe2d3b51502");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"f9305d7a-c330-9650-4b1f-cfe2d3b51502");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"f9305d7a-c330-9650-4b1f-cfe2d3b51502",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9305d7a-c330-9650-4b1f-cfe2d3b51502",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("022a933b-ef20-5c6f-11bd-597f15fe3506",
	1712.000000,
	2432.000000,
	"f9305d7a-c330-9650-4b1f-cfe2d3b51502");
INSERT INTO GD_GE
	VALUES ("c20629a9-7216-0821-961e-805594b351f7",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("c20629a9-7216-0821-961e-805594b351f7");
INSERT INTO GD_NCS
	VALUES ("c20629a9-7216-0821-961e-805594b351f7");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"c20629a9-7216-0821-961e-805594b351f7");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"c20629a9-7216-0821-961e-805594b351f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c20629a9-7216-0821-961e-805594b351f7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("48520d72-7fbc-1acd-8722-2abfe86a3fbe",
	1392.000000,
	1696.000000,
	"c20629a9-7216-0821-961e-805594b351f7");
INSERT INTO DIM_CON
	VALUES ("3c6c9a27-9013-3f18-77cc-a594bd545f2b",
	1552.000000,
	1696.000000,
	"c20629a9-7216-0821-961e-805594b351f7");
INSERT INTO GD_GE
	VALUES ("b3e80793-e798-dd2e-c922-140d01f0d3a1",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO GD_NCS
	VALUES ("b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"b3e80793-e798-dd2e-c922-140d01f0d3a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b3e80793-e798-dd2e-c922-140d01f0d3a1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a48bfbc2-77ec-f414-5418-d2167c8f4105",
	1392.000000,
	1856.000000,
	"b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO DIM_CON
	VALUES ("4f2add2b-5f19-a88c-2b91-0b6f44ebedcf",
	1552.000000,
	1856.000000,
	"b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO DIM_CON
	VALUES ("241e6192-1dbd-0bc0-d87e-60ae765fda6a",
	1456.000000,
	2048.000000,
	"b3e80793-e798-dd2e-c922-140d01f0d3a1");
INSERT INTO GD_GE
	VALUES ("004a2022-36cc-1e3c-c907-01dcd928debe",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("004a2022-36cc-1e3c-c907-01dcd928debe");
INSERT INTO GD_NCS
	VALUES ("004a2022-36cc-1e3c-c907-01dcd928debe");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"004a2022-36cc-1e3c-c907-01dcd928debe");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"004a2022-36cc-1e3c-c907-01dcd928debe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("004a2022-36cc-1e3c-c907-01dcd928debe",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fc1746cf-b127-d5ce-3301-7512319fad09",
	1456.000000,
	2160.000000,
	"004a2022-36cc-1e3c-c907-01dcd928debe");
INSERT INTO GD_GE
	VALUES ("4a5c6f06-7241-3e56-4f8d-bd732514e7c6",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("4a5c6f06-7241-3e56-4f8d-bd732514e7c6");
INSERT INTO GD_NCS
	VALUES ("4a5c6f06-7241-3e56-4f8d-bd732514e7c6");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"4a5c6f06-7241-3e56-4f8d-bd732514e7c6");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"4a5c6f06-7241-3e56-4f8d-bd732514e7c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4a5c6f06-7241-3e56-4f8d-bd732514e7c6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("06f3609b-083c-f097-c538-fc5226d433aa",
	1024.000000,
	1696.000000,
	"4a5c6f06-7241-3e56-4f8d-bd732514e7c6");
INSERT INTO DIM_CON
	VALUES ("00819c6e-e971-29c0-2d95-a64a9547302f",
	1200.000000,
	1696.000000,
	"4a5c6f06-7241-3e56-4f8d-bd732514e7c6");
INSERT INTO GD_GE
	VALUES ("56de6ae5-1f9c-047f-e88e-bf09e86fc583",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO GD_NCS
	VALUES ("56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"56de6ae5-1f9c-047f-e88e-bf09e86fc583",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56de6ae5-1f9c-047f-e88e-bf09e86fc583",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("43cc9afb-2698-2706-9b5d-e2e484e110fc",
	1024.000000,
	1856.000000,
	"56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO DIM_CON
	VALUES ("5c065f12-380c-02e2-67c5-4e08efd1c363",
	1200.000000,
	1856.000000,
	"56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO DIM_CON
	VALUES ("4ff1b4f9-6160-127a-1f0c-d2e3bedee7dd",
	1104.000000,
	2064.000000,
	"56de6ae5-1f9c-047f-e88e-bf09e86fc583");
INSERT INTO GD_GE
	VALUES ("9be7ae18-7f33-240b-0f1a-f7e492a219a2",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"7511b651-e130-959e-d060-a554185901ee",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("9be7ae18-7f33-240b-0f1a-f7e492a219a2");
INSERT INTO GD_NCS
	VALUES ("9be7ae18-7f33-240b-0f1a-f7e492a219a2");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"9be7ae18-7f33-240b-0f1a-f7e492a219a2");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"9be7ae18-7f33-240b-0f1a-f7e492a219a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9be7ae18-7f33-240b-0f1a-f7e492a219a2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b37f62b1-3ba1-ac86-2c21-3af0702bf46a",
	1104.000000,
	2160.000000,
	"9be7ae18-7f33-240b-0f1a-f7e492a219a2");
INSERT INTO GD_GE
	VALUES ("ee378f05-9ca0-a45a-d2a0-0418fa01ed11",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("ee378f05-9ca0-a45a-d2a0-0418fa01ed11");
INSERT INTO GD_NCS
	VALUES ("ee378f05-9ca0-a45a-d2a0-0418fa01ed11");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"ee378f05-9ca0-a45a-d2a0-0418fa01ed11");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"ee378f05-9ca0-a45a-d2a0-0418fa01ed11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee378f05-9ca0-a45a-d2a0-0418fa01ed11",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bd83a5c8-20fe-c3ce-2424-0f9feb648b65",
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bd83a5c8-20fe-c3ce-2424-0f9feb648b65");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bd83a5c8-20fe-c3ce-2424-0f9feb648b65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bd83a5c8-20fe-c3ce-2424-0f9feb648b65",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("aa0c14c2-8401-af21-59eb-1f4a73119932",
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"aa0c14c2-8401-af21-59eb-1f4a73119932");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"aa0c14c2-8401-af21-59eb-1f4a73119932",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aa0c14c2-8401-af21-59eb-1f4a73119932",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f4edf88-3579-0727-6a56-20800ae4f854",
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f4edf88-3579-0727-6a56-20800ae4f854");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f4edf88-3579-0727-6a56-20800ae4f854",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f4edf88-3579-0727-6a56-20800ae4f854",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4ba2a163-d33f-434b-4500-0d3896485a89",
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"00000000-0000-0000-0000-000000000000",
	"fa50972d-d6de-85d8-0d0b-b4c6a1dddf85",
	"48672a61-d929-8cb6-8672-b901a4ffe9e3");
INSERT INTO DIM_WAY
	VALUES ("fa50972d-d6de-85d8-0d0b-b4c6a1dddf85",
	1760.000000,
	1952.000000,
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("48672a61-d929-8cb6-8672-b901a4ffe9e3",
	1760.000000,
	1856.000000,
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"00000000-0000-0000-0000-000000000000",
	"fa50972d-d6de-85d8-0d0b-b4c6a1dddf85");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a04cd292-26cb-6946-ebb1-ad7ea735897e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a04cd292-26cb-6946-ebb1-ad7ea735897e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("cb4429d6-aace-f9f1-dc01-576da7b3c51a",
	"4424b476-a05a-d5cf-a25d-7a73d8dde984",
	"a04cd292-26cb-6946-ebb1-ad7ea735897e");
INSERT INTO GD_GE
	VALUES ("a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("38000bce-3980-5c42-6dee-6a907317b251",
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"38000bce-3980-5c42-6dee-6a907317b251");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"38000bce-3980-5c42-6dee-6a907317b251",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("38000bce-3980-5c42-6dee-6a907317b251",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f39b5bce-3f8a-6068-af45-dff27028bc18",
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f39b5bce-3f8a-6068-af45-dff27028bc18");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"f39b5bce-3f8a-6068-af45-dff27028bc18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f39b5bce-3f8a-6068-af45-dff27028bc18",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3e5b749b-f313-aed6-76ad-ac4428cbbe79",
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3e5b749b-f313-aed6-76ad-ac4428cbbe79");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e5b749b-f313-aed6-76ad-ac4428cbbe79",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e5b749b-f313-aed6-76ad-ac4428cbbe79",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b3c586a6-bf47-7036-5ae0-844e611a5bfa",
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"00000000-0000-0000-0000-000000000000",
	"4fc414f6-0d3f-0d67-1549-f06dd2b661b2",
	"b1136ff0-6891-ba5b-7e6e-5e82a33122bf");
INSERT INTO DIM_WAY
	VALUES ("4fc414f6-0d3f-0d67-1549-f06dd2b661b2",
	1888.000000,
	1440.000000,
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b1136ff0-6891-ba5b-7e6e-5e82a33122bf",
	2112.000000,
	1440.000000,
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"00000000-0000-0000-0000-000000000000",
	"4fc414f6-0d3f-0d67-1549-f06dd2b661b2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("eb4e2e6f-fa2e-5f4a-65fe-c07988cde516",
	"ea4a03f9-5911-ae1f-18ad-9a33ebd7164e",
	"a5244cdf-7ad6-1ca1-522d-2f3ae9f309bb");
INSERT INTO GD_GE
	VALUES ("f10e78b2-50de-8cb3-eff8-d991619eb454",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("f10e78b2-50de-8cb3-eff8-d991619eb454",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4a301f9e-48fd-9e2f-59eb-07356969b21a",
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4a301f9e-48fd-9e2f-59eb-07356969b21a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4a301f9e-48fd-9e2f-59eb-07356969b21a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4a301f9e-48fd-9e2f-59eb-07356969b21a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2d01bd8e-6a75-4d01-0767-38d4f7fa7ead",
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"2d01bd8e-6a75-4d01-0767-38d4f7fa7ead");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"2d01bd8e-6a75-4d01-0767-38d4f7fa7ead",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2d01bd8e-6a75-4d01-0767-38d4f7fa7ead",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("abf38d5d-54bd-52be-bec3-8d0129eb98de",
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"abf38d5d-54bd-52be-bec3-8d0129eb98de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"abf38d5d-54bd-52be-bec3-8d0129eb98de",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("abf38d5d-54bd-52be-bec3-8d0129eb98de",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c7633f6d-e1ca-aed3-0b54-b45937142407",
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	"00000000-0000-0000-0000-000000000000",
	"dbe38056-d663-4bf0-2877-b4388678370e",
	"4d93c15e-5d82-5d03-5f33-032ae5420089");
INSERT INTO DIM_WAY
	VALUES ("dbe38056-d663-4bf0-2877-b4388678370e",
	1888.000000,
	1584.000000,
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4d93c15e-5d82-5d03-5f33-032ae5420089",
	2112.000000,
	1584.000000,
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	"00000000-0000-0000-0000-000000000000",
	"dbe38056-d663-4bf0-2877-b4388678370e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f10e78b2-50de-8cb3-eff8-d991619eb454",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f10e78b2-50de-8cb3-eff8-d991619eb454",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("32e381dc-ff59-c9e7-c194-419cad200af1",
	"7745050c-39ab-4aa5-b110-76150913c51d",
	"f10e78b2-50de-8cb3-eff8-d991619eb454");
INSERT INTO GD_GE
	VALUES ("86bc9b00-eb98-badf-7309-735ac17212fc",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("86bc9b00-eb98-badf-7309-735ac17212fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8b189d06-c8a1-f552-5f36-c38976e9a9c0",
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8b189d06-c8a1-f552-5f36-c38976e9a9c0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8b189d06-c8a1-f552-5f36-c38976e9a9c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b189d06-c8a1-f552-5f36-c38976e9a9c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bb75bd55-cead-9e09-a5b8-e0b8c3a0c692",
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"bb75bd55-cead-9e09-a5b8-e0b8c3a0c692");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"bb75bd55-cead-9e09-a5b8-e0b8c3a0c692",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb75bd55-cead-9e09-a5b8-e0b8c3a0c692",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9ddb8cfe-184c-4766-c893-c18745e435c8",
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9ddb8cfe-184c-4766-c893-c18745e435c8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9ddb8cfe-184c-4766-c893-c18745e435c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9ddb8cfe-184c-4766-c893-c18745e435c8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9f62945c-e2c5-dd0f-10b1-3d676bf0f1c2",
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	"00000000-0000-0000-0000-000000000000",
	"2f66b2bb-f1c2-b973-0454-279f38354e8a",
	"1e68e113-eccd-aac7-cbb7-e33ef436146d");
INSERT INTO DIM_WAY
	VALUES ("2f66b2bb-f1c2-b973-0454-279f38354e8a",
	1888.000000,
	1728.000000,
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1e68e113-eccd-aac7-cbb7-e33ef436146d",
	2112.000000,
	1728.000000,
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	"00000000-0000-0000-0000-000000000000",
	"2f66b2bb-f1c2-b973-0454-279f38354e8a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"86bc9b00-eb98-badf-7309-735ac17212fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86bc9b00-eb98-badf-7309-735ac17212fc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("73d31695-67bc-b6ce-0ae3-fa918d243c5f",
	"c7997d11-0938-a5e9-cc72-4bb5a7c6c420",
	"86bc9b00-eb98-badf-7309-735ac17212fc");
INSERT INTO GD_GE
	VALUES ("07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("872c96cb-8415-690a-295e-9306794ce096",
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"872c96cb-8415-690a-295e-9306794ce096");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"872c96cb-8415-690a-295e-9306794ce096",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("872c96cb-8415-690a-295e-9306794ce096",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("429658e2-a8f7-d767-a247-4a2f6359316a",
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"429658e2-a8f7-d767-a247-4a2f6359316a");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"429658e2-a8f7-d767-a247-4a2f6359316a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("429658e2-a8f7-d767-a247-4a2f6359316a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ff07ecc0-1a16-6f0d-ad31-0bba5c29d1b3",
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ff07ecc0-1a16-6f0d-ad31-0bba5c29d1b3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ff07ecc0-1a16-6f0d-ad31-0bba5c29d1b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ff07ecc0-1a16-6f0d-ad31-0bba5c29d1b3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("19b75412-2f2f-80ba-43c3-d1260eb2d47a",
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"00000000-0000-0000-0000-000000000000",
	"ba9d86e6-4eef-ead2-c9b4-f03fb4da2ad6",
	"1472231c-ce67-b570-5931-cfc540ddde38");
INSERT INTO DIM_WAY
	VALUES ("ba9d86e6-4eef-ead2-c9b4-f03fb4da2ad6",
	1888.000000,
	1472.000000,
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1472231c-ce67-b570-5931-cfc540ddde38",
	2112.000000,
	1472.000000,
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"00000000-0000-0000-0000-000000000000",
	"ba9d86e6-4eef-ead2-c9b4-f03fb4da2ad6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"07f2c19a-881b-2a7c-5433-52eb52a0bece",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("07f2c19a-881b-2a7c-5433-52eb52a0bece",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ee872621-33c6-a9f8-28c3-cfb671f55bb9",
	"f3f8aed8-66a9-a619-73a3-334d5f84e2b8",
	"07f2c19a-881b-2a7c-5433-52eb52a0bece");
INSERT INTO GD_GE
	VALUES ("13381126-7e8c-ab04-031e-f561da0187b9",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("13381126-7e8c-ab04-031e-f561da0187b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dfc32201-0260-fd77-ff9c-2d4f2ff5b77f",
	"13381126-7e8c-ab04-031e-f561da0187b9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dfc32201-0260-fd77-ff9c-2d4f2ff5b77f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dfc32201-0260-fd77-ff9c-2d4f2ff5b77f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dfc32201-0260-fd77-ff9c-2d4f2ff5b77f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9b609bea-7d93-5a0b-094f-839f6f79cde8",
	"13381126-7e8c-ab04-031e-f561da0187b9",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"9b609bea-7d93-5a0b-094f-839f6f79cde8");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"9b609bea-7d93-5a0b-094f-839f6f79cde8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b609bea-7d93-5a0b-094f-839f6f79cde8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("32e8ccd5-7b5f-9d51-dba6-153e832f9d66",
	"13381126-7e8c-ab04-031e-f561da0187b9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"32e8ccd5-7b5f-9d51-dba6-153e832f9d66");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"32e8ccd5-7b5f-9d51-dba6-153e832f9d66",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("32e8ccd5-7b5f-9d51-dba6-153e832f9d66",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3db89a61-9726-827e-c2d4-0c996cdac1d7",
	"13381126-7e8c-ab04-031e-f561da0187b9",
	"00000000-0000-0000-0000-000000000000",
	"0010ddb8-4eca-ef25-4e15-133cc3409ca9",
	"a2086e0a-60e3-d0ac-8020-0050e9265101");
INSERT INTO DIM_WAY
	VALUES ("0010ddb8-4eca-ef25-4e15-133cc3409ca9",
	1712.000000,
	2320.000000,
	"13381126-7e8c-ab04-031e-f561da0187b9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a2086e0a-60e3-d0ac-8020-0050e9265101",
	1712.000000,
	2432.000000,
	"13381126-7e8c-ab04-031e-f561da0187b9",
	"00000000-0000-0000-0000-000000000000",
	"0010ddb8-4eca-ef25-4e15-133cc3409ca9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"13381126-7e8c-ab04-031e-f561da0187b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13381126-7e8c-ab04-031e-f561da0187b9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("af3ffaf4-79cd-a098-55ee-896ab90c2fb1",
	"022a933b-ef20-5c6f-11bd-597f15fe3506",
	"13381126-7e8c-ab04-031e-f561da0187b9");
INSERT INTO GD_GE
	VALUES ("eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("32c2f9b9-4a3a-d9c5-9247-6d8014ace46e",
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"32c2f9b9-4a3a-d9c5-9247-6d8014ace46e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"32c2f9b9-4a3a-d9c5-9247-6d8014ace46e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("32c2f9b9-4a3a-d9c5-9247-6d8014ace46e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fbeab734-fff1-e693-f737-a989992bb99c",
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"fbeab734-fff1-e693-f737-a989992bb99c");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"fbeab734-fff1-e693-f737-a989992bb99c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fbeab734-fff1-e693-f737-a989992bb99c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a0e0f6f0-d98c-2b35-4ee1-c2efd83bb082",
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a0e0f6f0-d98c-2b35-4ee1-c2efd83bb082");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a0e0f6f0-d98c-2b35-4ee1-c2efd83bb082",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0e0f6f0-d98c-2b35-4ee1-c2efd83bb082",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("16644317-0088-d5c5-b711-4e63257d4f3d",
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"00000000-0000-0000-0000-000000000000",
	"04758aaf-9296-3949-58f3-5f21432d0f76",
	"438311fe-fffa-f437-e05a-287703e8e320");
INSERT INTO DIM_WAY
	VALUES ("04758aaf-9296-3949-58f3-5f21432d0f76",
	1856.000000,
	1856.000000,
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("438311fe-fffa-f437-e05a-287703e8e320",
	1856.000000,
	1952.000000,
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"00000000-0000-0000-0000-000000000000",
	"04758aaf-9296-3949-58f3-5f21432d0f76");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eaf53501-c73b-c332-13d1-8b3e6a2e5dc8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a0fd34c5-f963-a911-e26b-5fbed622eecc",
	"e44488b0-697e-2860-0035-418faba16989",
	"eaf53501-c73b-c332-13d1-8b3e6a2e5dc8");
INSERT INTO GD_GE
	VALUES ("820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6c9c2b48-765b-6779-f232-f16cb70611f6",
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6c9c2b48-765b-6779-f232-f16cb70611f6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6c9c2b48-765b-6779-f232-f16cb70611f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c9c2b48-765b-6779-f232-f16cb70611f6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dcbc0dae-d1e1-4df1-52d3-3f97b30ef0c1",
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"dcbc0dae-d1e1-4df1-52d3-3f97b30ef0c1");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"dcbc0dae-d1e1-4df1-52d3-3f97b30ef0c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dcbc0dae-d1e1-4df1-52d3-3f97b30ef0c1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6ae4d5ce-cee8-66db-9ead-1debf021a958",
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6ae4d5ce-cee8-66db-9ead-1debf021a958");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ae4d5ce-cee8-66db-9ead-1debf021a958",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ae4d5ce-cee8-66db-9ead-1debf021a958",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("49787128-2c53-8187-1e16-274f37f3630a",
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"00000000-0000-0000-0000-000000000000",
	"229a25be-06e3-7451-3670-5817dab8bc3e",
	"665077fb-5679-94bf-d3a6-940623cff266");
INSERT INTO DIM_WAY
	VALUES ("229a25be-06e3-7451-3670-5817dab8bc3e",
	1392.000000,
	1696.000000,
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("665077fb-5679-94bf-d3a6-940623cff266",
	1392.000000,
	1856.000000,
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"00000000-0000-0000-0000-000000000000",
	"229a25be-06e3-7451-3670-5817dab8bc3e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("820726e0-94a8-8a4a-4651-9b7a9ad71f73",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("48520d72-7fbc-1acd-8722-2abfe86a3fbe",
	"a48bfbc2-77ec-f414-5418-d2167c8f4105",
	"820726e0-94a8-8a4a-4651-9b7a9ad71f73");
INSERT INTO GD_GE
	VALUES ("8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("652955f7-f01f-3a39-e5c1-645c6a586271",
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"652955f7-f01f-3a39-e5c1-645c6a586271");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"652955f7-f01f-3a39-e5c1-645c6a586271",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("652955f7-f01f-3a39-e5c1-645c6a586271",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f55edca0-b855-e944-6467-019538ce084e",
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f55edca0-b855-e944-6467-019538ce084e");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"f55edca0-b855-e944-6467-019538ce084e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f55edca0-b855-e944-6467-019538ce084e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("34f5e1b8-db1a-6356-9d87-ab53a45aa3ab",
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"34f5e1b8-db1a-6356-9d87-ab53a45aa3ab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"34f5e1b8-db1a-6356-9d87-ab53a45aa3ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("34f5e1b8-db1a-6356-9d87-ab53a45aa3ab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a46ab1b1-02b4-654f-19f8-28347e6559ed",
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"00000000-0000-0000-0000-000000000000",
	"dcbeb902-d78c-613e-330b-8ffb7f4055f8",
	"2e645b5b-dfbe-df94-0061-d72edf83eecb");
INSERT INTO DIM_WAY
	VALUES ("dcbeb902-d78c-613e-330b-8ffb7f4055f8",
	1552.000000,
	1696.000000,
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2e645b5b-dfbe-df94-0061-d72edf83eecb",
	1552.000000,
	1856.000000,
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"00000000-0000-0000-0000-000000000000",
	"dcbeb902-d78c-613e-330b-8ffb7f4055f8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8a583095-ab78-1b3a-f3ac-43e09e6515cc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3c6c9a27-9013-3f18-77cc-a594bd545f2b",
	"4f2add2b-5f19-a88c-2b91-0b6f44ebedcf",
	"8a583095-ab78-1b3a-f3ac-43e09e6515cc");
INSERT INTO GD_GE
	VALUES ("5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("70a19978-01d5-7d0c-8dfb-321dcb20c978",
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"70a19978-01d5-7d0c-8dfb-321dcb20c978");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"70a19978-01d5-7d0c-8dfb-321dcb20c978",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70a19978-01d5-7d0c-8dfb-321dcb20c978",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7d6fab3b-9039-a386-4eb0-1c7631fb4baa",
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7d6fab3b-9039-a386-4eb0-1c7631fb4baa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7d6fab3b-9039-a386-4eb0-1c7631fb4baa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7d6fab3b-9039-a386-4eb0-1c7631fb4baa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d5eb2027-8307-eb57-c732-cce4f9b2c7e6",
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d5eb2027-8307-eb57-c732-cce4f9b2c7e6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d5eb2027-8307-eb57-c732-cce4f9b2c7e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d5eb2027-8307-eb57-c732-cce4f9b2c7e6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("893ca9ec-228d-4b53-0ded-85c48ae7813d",
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"00000000-0000-0000-0000-000000000000",
	"d17a8cef-d451-883c-4ddf-d5e8f1223bf8",
	"b8a03df9-8b33-29e8-4c56-ce86e3cca533");
INSERT INTO DIM_WAY
	VALUES ("d17a8cef-d451-883c-4ddf-d5e8f1223bf8",
	1456.000000,
	2048.000000,
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b8a03df9-8b33-29e8-4c56-ce86e3cca533",
	1456.000000,
	2160.000000,
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"00000000-0000-0000-0000-000000000000",
	"d17a8cef-d451-883c-4ddf-d5e8f1223bf8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5a271b99-2c3d-72b8-26ac-b6dbf4a08a72",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("241e6192-1dbd-0bc0-d87e-60ae765fda6a",
	"fc1746cf-b127-d5ce-3301-7512319fad09",
	"5a271b99-2c3d-72b8-26ac-b6dbf4a08a72");
INSERT INTO GD_GE
	VALUES ("0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1c6fbacd-3367-3ac2-304e-6f62edfca94c",
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1c6fbacd-3367-3ac2-304e-6f62edfca94c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c6fbacd-3367-3ac2-304e-6f62edfca94c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c6fbacd-3367-3ac2-304e-6f62edfca94c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("593c4010-98f3-36f5-12cc-b58659b0059e",
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"593c4010-98f3-36f5-12cc-b58659b0059e");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"593c4010-98f3-36f5-12cc-b58659b0059e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("593c4010-98f3-36f5-12cc-b58659b0059e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9633b213-c61b-2075-f5b2-56ed8237e20d",
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9633b213-c61b-2075-f5b2-56ed8237e20d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9633b213-c61b-2075-f5b2-56ed8237e20d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9633b213-c61b-2075-f5b2-56ed8237e20d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e0623b6b-62ed-3fef-0ebe-c9d2f83b4270",
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"00000000-0000-0000-0000-000000000000",
	"a250ac42-45ca-337d-9153-bd3df069e134",
	"7858af39-5857-cf27-dd7d-87590097bac9");
INSERT INTO DIM_WAY
	VALUES ("a250ac42-45ca-337d-9153-bd3df069e134",
	1024.000000,
	1696.000000,
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7858af39-5857-cf27-dd7d-87590097bac9",
	1024.000000,
	1856.000000,
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"00000000-0000-0000-0000-000000000000",
	"a250ac42-45ca-337d-9153-bd3df069e134");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0cb2e2b0-af4a-17ce-484e-aa76667bc564",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("06f3609b-083c-f097-c538-fc5226d433aa",
	"43cc9afb-2698-2706-9b5d-e2e484e110fc",
	"0cb2e2b0-af4a-17ce-484e-aa76667bc564");
INSERT INTO GD_GE
	VALUES ("3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("854d50e0-39b4-8bf4-439a-ec83b3f34650",
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"854d50e0-39b4-8bf4-439a-ec83b3f34650");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"854d50e0-39b4-8bf4-439a-ec83b3f34650",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("854d50e0-39b4-8bf4-439a-ec83b3f34650",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a2ad1f89-41a4-b6a4-37a0-19836a6df068",
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a2ad1f89-41a4-b6a4-37a0-19836a6df068");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"a2ad1f89-41a4-b6a4-37a0-19836a6df068",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2ad1f89-41a4-b6a4-37a0-19836a6df068",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a48bdc71-a58b-bfcd-0980-f1c450cf8282",
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a48bdc71-a58b-bfcd-0980-f1c450cf8282");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a48bdc71-a58b-bfcd-0980-f1c450cf8282",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a48bdc71-a58b-bfcd-0980-f1c450cf8282",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("44bf90dc-76a9-3936-66f1-50f07b598a81",
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"00000000-0000-0000-0000-000000000000",
	"89bae2b7-470e-a289-c15b-9cf74c3f86b9",
	"de620c87-1e39-b224-6703-2329dcd26510");
INSERT INTO DIM_WAY
	VALUES ("89bae2b7-470e-a289-c15b-9cf74c3f86b9",
	1200.000000,
	1696.000000,
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("de620c87-1e39-b224-6703-2329dcd26510",
	1200.000000,
	1856.000000,
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"00000000-0000-0000-0000-000000000000",
	"89bae2b7-470e-a289-c15b-9cf74c3f86b9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("00819c6e-e971-29c0-2d95-a64a9547302f",
	"5c065f12-380c-02e2-67c5-4e08efd1c363",
	"3a8a2042-2e59-2283-0dd9-3f6ad0f7dcc8");
INSERT INTO GD_GE
	VALUES ("279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5708cb6d-39ba-71a2-8f63-72aea80033f7",
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5708cb6d-39ba-71a2-8f63-72aea80033f7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5708cb6d-39ba-71a2-8f63-72aea80033f7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5708cb6d-39ba-71a2-8f63-72aea80033f7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fe99d4e8-a595-be66-3770-740568c8401f",
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"fe99d4e8-a595-be66-3770-740568c8401f");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"fe99d4e8-a595-be66-3770-740568c8401f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fe99d4e8-a595-be66-3770-740568c8401f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6883f9b3-5103-dde7-e9aa-640ce1870059",
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6883f9b3-5103-dde7-e9aa-640ce1870059");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6883f9b3-5103-dde7-e9aa-640ce1870059",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6883f9b3-5103-dde7-e9aa-640ce1870059",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("7ee1fe66-8af5-f2d9-0805-cbd9c0b9747d",
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"00000000-0000-0000-0000-000000000000",
	"b944ad02-3e99-1eba-8e1f-bc95924458ae",
	"50c56fc6-06c4-200a-9f37-b7feba55fdb3");
INSERT INTO DIM_WAY
	VALUES ("b944ad02-3e99-1eba-8e1f-bc95924458ae",
	1104.000000,
	2064.000000,
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("50c56fc6-06c4-200a-9f37-b7feba55fdb3",
	1104.000000,
	2160.000000,
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"00000000-0000-0000-0000-000000000000",
	"b944ad02-3e99-1eba-8e1f-bc95924458ae");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("279eae43-b85a-e0ad-8ba7-ff1b6439f57d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4ff1b4f9-6160-127a-1f0c-d2e3bedee7dd",
	"b37f62b1-3ba1-ac86-2c21-3af0702bf46a",
	"279eae43-b85a-e0ad-8ba7-ff1b6439f57d");
INSERT INTO DIM_DIA
	VALUES ("0c9323c3-caf7-71bf-fc1a-3cea20ff4653",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("dfe9c92d-ab2c-041a-dede-428b980b797e",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("dfe9c92d-ab2c-041a-dede-428b980b797e",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("c9848a35-0f62-3193-83cf-0bcb26c9b7e5",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("dc4867d2-ed93-0d15-56c6-2da57a12274b",
	"c9848a35-0f62-3193-83cf-0bcb26c9b7e5",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("1911600d-c7f2-2341-3af3-dc3e97c7ea59",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("1911600d-c7f2-2341-3af3-dc3e97c7ea59",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("1911600d-c7f2-2341-3af3-dc3e97c7ea59",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("27961d04-505f-06e7-0708-d40e534673df",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("27961d04-505f-06e7-0708-d40e534673df",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("27961d04-505f-06e7-0708-d40e534673df",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"1911600d-c7f2-2341-3af3-dc3e97c7ea59",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3fee38bc-60bd-a168-9a5e-18f94ce02970",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("3fee38bc-60bd-a168-9a5e-18f94ce02970",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("3fee38bc-60bd-a168-9a5e-18f94ce02970",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"27961d04-505f-06e7-0708-d40e534673df",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5599ba77-18eb-2bd3-5185-62779a9d6900",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("5599ba77-18eb-2bd3-5185-62779a9d6900",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("5599ba77-18eb-2bd3-5185-62779a9d6900",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"3fee38bc-60bd-a168-9a5e-18f94ce02970",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("60adf8b4-a1b7-b142-2cbb-2bcf3ecf1a68",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("60adf8b4-a1b7-b142-2cbb-2bcf3ecf1a68",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("60adf8b4-a1b7-b142-2cbb-2bcf3ecf1a68",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"5599ba77-18eb-2bd3-5185-62779a9d6900",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("188b1597-c734-b054-a1ff-4bbbb2665156",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_BATTR
	VALUES ("188b1597-c734-b054-a1ff-4bbbb2665156",
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ATTR
	VALUES ("188b1597-c734-b054-a1ff-4bbbb2665156",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	"60adf8b4-a1b7-b142-2cbb-2bcf3ecf1a68",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_OIDA
	VALUES ("1911600d-c7f2-2341-3af3-dc3e97c7ea59",
	"dfe9c92d-ab2c-041a-dede-428b980b797e",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO O_ID
	VALUES (2,
	"dfe9c92d-ab2c-041a-dede-428b980b797e");
INSERT INTO PE_PE
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_BATTR
	VALUES ("7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_ATTR
	VALUES ("7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("77dfc8e0-9b1f-4bcc-00c4-1449c3ff503a",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_BATTR
	VALUES ("77dfc8e0-9b1f-4bcc-00c4-1449c3ff503a",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_ATTR
	VALUES ("77dfc8e0-9b1f-4bcc-00c4-1449c3ff503a",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b43971c1-1079-dbe9-2ad4-9437c621f342",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_BATTR
	VALUES ("b43971c1-1079-dbe9-2ad4-9437c621f342",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_ATTR
	VALUES ("b43971c1-1079-dbe9-2ad4-9437c621f342",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"77dfc8e0-9b1f-4bcc-00c4-1449c3ff503a",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	"a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"b5d18d57-e37e-136f-fd61-cc95aa64ac91",
	"5879845f-b8c7-8d16-4795-565fc826064c",
	"e4029031-bdc2-6f08-d3e7-b7aaea5d446c",
	"8309a84f-3aad-361c-534d-70191d89b2c5",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("e4029031-bdc2-6f08-d3e7-b7aaea5d446c",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("e4029031-bdc2-6f08-d3e7-b7aaea5d446c",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"b43971c1-1079-dbe9-2ad4-9437c621f342",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	"fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"b5d18d57-e37e-136f-fd61-cc95aa64ac91",
	"5879845f-b8c7-8d16-4795-565fc826064c",
	"31d4530e-b079-b9b4-48f0-fc47892b6cdb",
	"fe0390c2-8d56-259a-c5b2-90d882092351",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("31d4530e-b079-b9b4-48f0-fc47892b6cdb",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("31d4530e-b079-b9b4-48f0-fc47892b6cdb",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"e4029031-bdc2-6f08-d3e7-b7aaea5d446c",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5199c798-fa57-9419-a877-f4e715dc26d1",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_BATTR
	VALUES ("5199c798-fa57-9419-a877-f4e715dc26d1",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_ATTR
	VALUES ("5199c798-fa57-9419-a877-f4e715dc26d1",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"31d4530e-b079-b9b4-48f0-fc47892b6cdb",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_OIDA
	VALUES ("7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO O_ID
	VALUES (2,
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO SM_ISM
	VALUES ("d7b27663-976e-b13c-07df-d2711805e178",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec");
INSERT INTO SM_SM
	VALUES ("d7b27663-976e-b13c-07df-d2711805e178",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_EVTDI
	VALUES ("a8bfb74a-bdae-ba97-82d8-9ae9fb94b2d8",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f16bd3f6-348c-6c1e-fb9d-b4d7be8d3df2",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"a8bfb74a-bdae-ba97-82d8-9ae9fb94b2d8");
INSERT INTO SM_EVTDI
	VALUES ("f84438fe-d344-087a-c8e7-b80ccf2e49f3",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ec1b46dc-f1b1-cbad-7daf-7bf8de54f54a",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("98c225a2-6357-410f-6d5a-7bb3027ef2b7",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b5dbe5bb-42b1-2947-bc92-6608ec30120c",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"f84438fe-d344-087a-c8e7-b80ccf2e49f3");
INSERT INTO SM_EVTDI
	VALUES ("e64d877f-ef63-fe9d-910f-6da43d7a6256",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"ec1b46dc-f1b1-cbad-7daf-7bf8de54f54a");
INSERT INTO SM_EVTDI
	VALUES ("525a2303-de15-112a-a210-cfd626d727c0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"98c225a2-6357-410f-6d5a-7bb3027ef2b7");
INSERT INTO SM_LEVT
	VALUES ("3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("217f0568-f70d-f7fe-beb8-3de566e5683e",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("1af62d6d-39ab-6626-fd9e-45b23897310b",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"217f0568-f70d-f7fe-beb8-3de566e5683e");
INSERT INTO SM_AH
	VALUES ("1af62d6d-39ab-6626-fd9e-45b23897310b",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("1af62d6d-39ab-6626-fd9e-45b23897310b",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("668c9318-7749-1d2a-7443-8df3d09b0db0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"29b4b64f-8cf3-d360-f692-d37bfb1d55a7");
INSERT INTO SM_AH
	VALUES ("668c9318-7749-1d2a-7443-8df3d09b0db0",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("668c9318-7749-1d2a-7443-8df3d09b0db0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8dcea2a2-0ca8-b9de-827e-3b9bba3c293c",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"a978c629-1fbe-0789-21a6-4222fb05ccb9");
INSERT INTO SM_AH
	VALUES ("8dcea2a2-0ca8-b9de-827e-3b9bba3c293c",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("8dcea2a2-0ca8-b9de-827e-3b9bba3c293c",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bcb964ab-4743-31da-4192-72094315d4e1",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"05bd48ba-ccb8-2f82-7833-e9621dd2a89b");
INSERT INTO SM_AH
	VALUES ("bcb964ab-4743-31da-4192-72094315d4e1",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("bcb964ab-4743-31da-4192-72094315d4e1",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4be3e116-b6b6-b946-ed31-309947614e33",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ddf3c0f7-0e99-00da-416f-32fd2748358e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"4be3e116-b6b6-b946-ed31-309947614e33");
INSERT INTO SM_AH
	VALUES ("ddf3c0f7-0e99-00da-416f-32fd2748358e",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("ddf3c0f7-0e99-00da-416f-32fd2748358e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ee2d218b-d0d4-116c-748f-26ccc74009f0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"91142c56-3c61-fea3-a8f2-1e3eb5d08c22");
INSERT INTO SM_AH
	VALUES ("ee2d218b-d0d4-116c-748f-26ccc74009f0",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("ee2d218b-d0d4-116c-748f-26ccc74009f0",
	"d7b27663-976e-b13c-07df-d2711805e178",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("8fde2e9a-e035-a6f5-e086-122956079314",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"217f0568-f70d-f7fe-beb8-3de566e5683e",
	"3352dfb0-330b-a271-9b0e-8d804dea4533",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ebc37d06-4827-b47d-3e17-b6371121dfb1",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"8fde2e9a-e035-a6f5-e086-122956079314");
INSERT INTO SM_AH
	VALUES ("ebc37d06-4827-b47d-3e17-b6371121dfb1",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("ebc37d06-4827-b47d-3e17-b6371121dfb1",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("8fde2e9a-e035-a6f5-e086-122956079314",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"217f0568-f70d-f7fe-beb8-3de566e5683e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("08a9a320-ea54-2374-eada-2532bf46e0df",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"48e18c3f-b980-1c7c-e113-5b927e1a75b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("bdb37e78-4231-a47a-e19d-9e5433793ada",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"08a9a320-ea54-2374-eada-2532bf46e0df");
INSERT INTO SM_AH
	VALUES ("bdb37e78-4231-a47a-e19d-9e5433793ada",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("bdb37e78-4231-a47a-e19d-9e5433793ada",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("08a9a320-ea54-2374-eada-2532bf46e0df",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d0b38225-88ce-5af6-6e31-c94e7203571e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"4be3e116-b6b6-b946-ed31-309947614e33",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e5435c57-929b-43d0-583e-e341ebe03dbb",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"d0b38225-88ce-5af6-6e31-c94e7203571e");
INSERT INTO SM_AH
	VALUES ("e5435c57-929b-43d0-583e-e341ebe03dbb",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("e5435c57-929b-43d0-583e-e341ebe03dbb",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("d0b38225-88ce-5af6-6e31-c94e7203571e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("71150650-0cdb-abed-29cb-7459146b4d9e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"217f0568-f70d-f7fe-beb8-3de566e5683e",
	"bee50375-c217-9417-d60c-03a845df4b0d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("764a9adc-b9b7-cb9a-53cd-b25d84946ea9",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"71150650-0cdb-abed-29cb-7459146b4d9e");
INSERT INTO SM_AH
	VALUES ("764a9adc-b9b7-cb9a-53cd-b25d84946ea9",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("764a9adc-b9b7-cb9a-53cd-b25d84946ea9",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("71150650-0cdb-abed-29cb-7459146b4d9e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"4be3e116-b6b6-b946-ed31-309947614e33",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("91c1cda2-1332-cf73-183b-9a17cb87de72",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("caf0bc7e-b17c-8994-baf0-4fa5ed12e59e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"91c1cda2-1332-cf73-183b-9a17cb87de72");
INSERT INTO SM_AH
	VALUES ("caf0bc7e-b17c-8994-baf0-4fa5ed12e59e",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("caf0bc7e-b17c-8994-baf0-4fa5ed12e59e",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("91c1cda2-1332-cf73-183b-9a17cb87de72",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4b193ecb-b2ed-80b4-5b11-2e07bc1a87e7",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"a978c629-1fbe-0789-21a6-4222fb05ccb9",
	"dfc7be1f-de30-dd93-a165-8aa9999df7f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f6d71999-a58b-6e6b-d8f7-95743d2c8f13",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"4b193ecb-b2ed-80b4-5b11-2e07bc1a87e7");
INSERT INTO SM_AH
	VALUES ("f6d71999-a58b-6e6b-d8f7-95743d2c8f13",
	"d7b27663-976e-b13c-07df-d2711805e178");
INSERT INTO SM_ACT
	VALUES ("f6d71999-a58b-6e6b-d8f7-95743d2c8f13",
	"d7b27663-976e-b13c-07df-d2711805e178",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4b193ecb-b2ed-80b4-5b11-2e07bc1a87e7",
	"d7b27663-976e-b13c-07df-d2711805e178",
	"91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("786bdcf9-ec4c-c691-1e62-0664501060e8",
	8,
	"d7b27663-976e-b13c-07df-d2711805e178",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("a290f1a4-9b37-1599-e971-81a74175adef",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"217f0568-f70d-f7fe-beb8-3de566e5683e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO GD_NCS
	VALUES ("a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"a290f1a4-9b37-1599-e971-81a74175adef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a290f1a4-9b37-1599-e971-81a74175adef",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2ed4312d-d9eb-a77a-a228-c84cb188d744",
	2064.000000,
	1312.000000,
	"a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO DIM_CON
	VALUES ("13c3d89e-dc89-97fb-1e20-4805f69cb81c",
	1968.000000,
	1280.000000,
	"a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO DIM_CON
	VALUES ("b3b6b02b-0566-bd2d-7a7d-b5b97be19892",
	1968.000000,
	1376.000000,
	"a290f1a4-9b37-1599-e971-81a74175adef");
INSERT INTO GD_GE
	VALUES ("9f906ac4-79dd-47dd-6042-cd96af0f1325",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"29b4b64f-8cf3-d360-f692-d37bfb1d55a7",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("9f906ac4-79dd-47dd-6042-cd96af0f1325");
INSERT INTO GD_NCS
	VALUES ("9f906ac4-79dd-47dd-6042-cd96af0f1325");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"9f906ac4-79dd-47dd-6042-cd96af0f1325");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"9f906ac4-79dd-47dd-6042-cd96af0f1325",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9f906ac4-79dd-47dd-6042-cd96af0f1325",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("91870445-4cdc-ba9b-52fd-fdb4bcc30f7e",
	2064.000000,
	1712.000000,
	"9f906ac4-79dd-47dd-6042-cd96af0f1325");
INSERT INTO DIM_CON
	VALUES ("bd3cd9e6-1fac-3316-4f49-17c5cbfc7f5c",
	1968.000000,
	1680.000000,
	"9f906ac4-79dd-47dd-6042-cd96af0f1325");
INSERT INTO GD_GE
	VALUES ("a2c6c74b-35c8-6208-6744-ae179a1ffb0f",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"a978c629-1fbe-0789-21a6-4222fb05ccb9",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("a2c6c74b-35c8-6208-6744-ae179a1ffb0f");
INSERT INTO GD_NCS
	VALUES ("a2c6c74b-35c8-6208-6744-ae179a1ffb0f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"a2c6c74b-35c8-6208-6744-ae179a1ffb0f");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"a2c6c74b-35c8-6208-6744-ae179a1ffb0f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a2c6c74b-35c8-6208-6744-ae179a1ffb0f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("93ad2b57-e94a-732b-992b-b754d7036639",
	2320.000000,
	1280.000000,
	"a2c6c74b-35c8-6208-6744-ae179a1ffb0f");
INSERT INTO DIM_CON
	VALUES ("bf75d4aa-6854-54af-b6f2-7198ca957228",
	2320.000000,
	1376.000000,
	"a2c6c74b-35c8-6208-6744-ae179a1ffb0f");
INSERT INTO GD_GE
	VALUES ("9959334e-8d2c-14d5-b5b3-9296d448a0be",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"05bd48ba-ccb8-2f82-7833-e9621dd2a89b",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("9959334e-8d2c-14d5-b5b3-9296d448a0be");
INSERT INTO GD_NCS
	VALUES ("9959334e-8d2c-14d5-b5b3-9296d448a0be");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"9959334e-8d2c-14d5-b5b3-9296d448a0be");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"9959334e-8d2c-14d5-b5b3-9296d448a0be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9959334e-8d2c-14d5-b5b3-9296d448a0be",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("64774d33-afed-179a-6eba-1d40dd0ab7c1",
	2320.000000,
	1680.000000,
	"9959334e-8d2c-14d5-b5b3-9296d448a0be");
INSERT INTO GD_GE
	VALUES ("df1bd73b-f6c7-49e5-6dc2-645e0a4ca562",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"4be3e116-b6b6-b946-ed31-309947614e33",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("df1bd73b-f6c7-49e5-6dc2-645e0a4ca562");
INSERT INTO GD_NCS
	VALUES ("df1bd73b-f6c7-49e5-6dc2-645e0a4ca562");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"df1bd73b-f6c7-49e5-6dc2-645e0a4ca562");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"df1bd73b-f6c7-49e5-6dc2-645e0a4ca562",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df1bd73b-f6c7-49e5-6dc2-645e0a4ca562",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("31e73ab4-6541-5bb4-0e3a-e8c611e9cc24",
	1968.000000,
	1472.000000,
	"df1bd73b-f6c7-49e5-6dc2-645e0a4ca562");
INSERT INTO DIM_CON
	VALUES ("80f5170a-c826-eb8a-7cf7-4990581dd1d4",
	1968.000000,
	1568.000000,
	"df1bd73b-f6c7-49e5-6dc2-645e0a4ca562");
INSERT INTO GD_GE
	VALUES ("684012a1-5550-b7f2-5b1f-24166fdafa1f",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"91142c56-3c61-fea3-a8f2-1e3eb5d08c22",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("684012a1-5550-b7f2-5b1f-24166fdafa1f");
INSERT INTO GD_NCS
	VALUES ("684012a1-5550-b7f2-5b1f-24166fdafa1f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"684012a1-5550-b7f2-5b1f-24166fdafa1f");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"684012a1-5550-b7f2-5b1f-24166fdafa1f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("684012a1-5550-b7f2-5b1f-24166fdafa1f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b2606a86-0914-8642-c23a-7b8866dd632b",
	2320.000000,
	1472.000000,
	"684012a1-5550-b7f2-5b1f-24166fdafa1f");
INSERT INTO DIM_CON
	VALUES ("f9c48c31-7da4-d68a-ed7f-841e1ac17952",
	2320.000000,
	1568.000000,
	"684012a1-5550-b7f2-5b1f-24166fdafa1f");
INSERT INTO GD_GE
	VALUES ("13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"8fde2e9a-e035-a6f5-e086-122956079314",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ae20a1d1-8f34-8c9b-e426-8e886da0335d",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ae20a1d1-8f34-8c9b-e426-8e886da0335d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ae20a1d1-8f34-8c9b-e426-8e886da0335d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ae20a1d1-8f34-8c9b-e426-8e886da0335d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f9473919-009a-15af-7b8e-1461ae597b30",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"f9473919-009a-15af-7b8e-1461ae597b30");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"f9473919-009a-15af-7b8e-1461ae597b30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9473919-009a-15af-7b8e-1461ae597b30",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ed43c931-9881-7efb-68b5-7fe64bb22989",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ed43c931-9881-7efb-68b5-7fe64bb22989");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed43c931-9881-7efb-68b5-7fe64bb22989",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed43c931-9881-7efb-68b5-7fe64bb22989",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0817abac-db7a-a2d4-af4a-c531cfe24164",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"b6ea9b59-f85e-418e-5cbb-c4afce46b8ba",
	"06ab8b89-3d41-2224-1264-7c635f1f79c3");
INSERT INTO GD_LS
	VALUES ("1d2a803a-3e0a-8b83-9df2-beaefcf0d3f8",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"0817abac-db7a-a2d4-af4a-c531cfe24164",
	"06ab8b89-3d41-2224-1264-7c635f1f79c3",
	"6f4b99ad-6975-878a-9f9c-d91f4f176a61");
INSERT INTO GD_LS
	VALUES ("c478b091-0592-ad03-d689-945618ff0214",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"1d2a803a-3e0a-8b83-9df2-beaefcf0d3f8",
	"6f4b99ad-6975-878a-9f9c-d91f4f176a61",
	"822e276d-570d-3631-5af4-c3c1226750e5");
INSERT INTO GD_LS
	VALUES ("c73d30f8-aadf-fdb5-1232-46d0712edd51",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"c478b091-0592-ad03-d689-945618ff0214",
	"822e276d-570d-3631-5af4-c3c1226750e5",
	"4e5b7c4c-b7fe-22bb-1ce2-33cf7ac7450e");
INSERT INTO DIM_WAY
	VALUES ("b6ea9b59-f85e-418e-5cbb-c4afce46b8ba",
	2064.000000,
	1312.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("06ab8b89-3d41-2224-1264-7c635f1f79c3",
	2128.000000,
	1312.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"b6ea9b59-f85e-418e-5cbb-c4afce46b8ba");
INSERT INTO DIM_WAY
	VALUES ("6f4b99ad-6975-878a-9f9c-d91f4f176a61",
	2128.000000,
	1216.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"06ab8b89-3d41-2224-1264-7c635f1f79c3");
INSERT INTO DIM_WAY
	VALUES ("822e276d-570d-3631-5af4-c3c1226750e5",
	1968.000000,
	1216.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"6f4b99ad-6975-878a-9f9c-d91f4f176a61");
INSERT INTO DIM_WAY
	VALUES ("4e5b7c4c-b7fe-22bb-1ce2-33cf7ac7450e",
	1968.000000,
	1280.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000",
	"822e276d-570d-3631-5af4-c3c1226750e5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("13d4d978-7172-8e33-6dc0-e4f6210d55ff",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2ed4312d-d9eb-a77a-a228-c84cb188d744",
	"13c3d89e-dc89-97fb-1e20-4805f69cb81c",
	"13d4d978-7172-8e33-6dc0-e4f6210d55ff");
INSERT INTO GD_GE
	VALUES ("5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"08a9a320-ea54-2374-eada-2532bf46e0df",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a012e2d3-3ecc-0af3-4a2b-49903a0d1dee",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a012e2d3-3ecc-0af3-4a2b-49903a0d1dee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a012e2d3-3ecc-0af3-4a2b-49903a0d1dee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a012e2d3-3ecc-0af3-4a2b-49903a0d1dee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("069ecd61-fe8c-ec0c-5ad6-2e9f9d21e1b1",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"069ecd61-fe8c-ec0c-5ad6-2e9f9d21e1b1");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"069ecd61-fe8c-ec0c-5ad6-2e9f9d21e1b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("069ecd61-fe8c-ec0c-5ad6-2e9f9d21e1b1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("57c1cb27-e133-1ad1-8611-3b192ea9feb2",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"57c1cb27-e133-1ad1-8611-3b192ea9feb2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"57c1cb27-e133-1ad1-8611-3b192ea9feb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("57c1cb27-e133-1ad1-8611-3b192ea9feb2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c585aff9-a754-5960-aec4-256bf142e53c",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"6d3b5750-b5f1-2393-e5ae-8db85a3e1c84",
	"a9c81879-a397-5ac8-7219-bd2b9fdbe34f");
INSERT INTO GD_LS
	VALUES ("9319637f-0db6-82be-4076-69d431cfadf1",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"c585aff9-a754-5960-aec4-256bf142e53c",
	"a9c81879-a397-5ac8-7219-bd2b9fdbe34f",
	"8477f157-2175-0c92-7e81-97535e57cf82");
INSERT INTO GD_LS
	VALUES ("8d4572d1-11ec-1ac7-792d-5e6074945527",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"9319637f-0db6-82be-4076-69d431cfadf1",
	"8477f157-2175-0c92-7e81-97535e57cf82",
	"45bd56c5-f4bc-39cd-2a9a-30158999f585");
INSERT INTO GD_LS
	VALUES ("543acfd3-1a2a-9d62-35b2-ad3ccd9eb7af",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"8d4572d1-11ec-1ac7-792d-5e6074945527",
	"45bd56c5-f4bc-39cd-2a9a-30158999f585",
	"fc3a179c-b58a-b8ea-b085-10e8b6467b92");
INSERT INTO DIM_WAY
	VALUES ("6d3b5750-b5f1-2393-e5ae-8db85a3e1c84",
	2064.000000,
	1712.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a9c81879-a397-5ac8-7219-bd2b9fdbe34f",
	2192.000000,
	1712.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"6d3b5750-b5f1-2393-e5ae-8db85a3e1c84");
INSERT INTO DIM_WAY
	VALUES ("8477f157-2175-0c92-7e81-97535e57cf82",
	2192.000000,
	1232.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"a9c81879-a397-5ac8-7219-bd2b9fdbe34f");
INSERT INTO DIM_WAY
	VALUES ("45bd56c5-f4bc-39cd-2a9a-30158999f585",
	2320.000000,
	1232.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"8477f157-2175-0c92-7e81-97535e57cf82");
INSERT INTO DIM_WAY
	VALUES ("fc3a179c-b58a-b8ea-b085-10e8b6467b92",
	2320.000000,
	1280.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000",
	"45bd56c5-f4bc-39cd-2a9a-30158999f585");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5532be8f-3de3-4756-6b8f-91a9c33c9e0b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("91870445-4cdc-ba9b-52fd-fdb4bcc30f7e",
	"93ad2b57-e94a-732b-992b-b754d7036639",
	"5532be8f-3de3-4756-6b8f-91a9c33c9e0b");
INSERT INTO GD_GE
	VALUES ("04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"71150650-0cdb-abed-29cb-7459146b4d9e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4ab1ce3e-75dc-0115-7051-a3ef988b4527",
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4ab1ce3e-75dc-0115-7051-a3ef988b4527");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4ab1ce3e-75dc-0115-7051-a3ef988b4527",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ab1ce3e-75dc-0115-7051-a3ef988b4527",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("459caf3b-7891-da1a-cd4f-7a54b5241289",
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"459caf3b-7891-da1a-cd4f-7a54b5241289");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"459caf3b-7891-da1a-cd4f-7a54b5241289",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("459caf3b-7891-da1a-cd4f-7a54b5241289",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("31255edf-261d-eaf0-a539-c54e448917df",
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"31255edf-261d-eaf0-a539-c54e448917df");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"31255edf-261d-eaf0-a539-c54e448917df",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31255edf-261d-eaf0-a539-c54e448917df",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("804020a0-1b72-c394-b678-f3dfc106a850",
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"00000000-0000-0000-0000-000000000000",
	"7b0bbbd1-9f69-77e2-2a95-7312e73c0ec4",
	"d59a8b4e-48c1-afc4-ba39-b4173e77314d");
INSERT INTO DIM_WAY
	VALUES ("7b0bbbd1-9f69-77e2-2a95-7312e73c0ec4",
	1968.000000,
	1376.000000,
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d59a8b4e-48c1-afc4-ba39-b4173e77314d",
	1968.000000,
	1472.000000,
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"00000000-0000-0000-0000-000000000000",
	"7b0bbbd1-9f69-77e2-2a95-7312e73c0ec4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"04762900-575c-eb30-2ad6-8ca6928cd8d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("04762900-575c-eb30-2ad6-8ca6928cd8d6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b3b6b02b-0566-bd2d-7a7d-b5b97be19892",
	"31e73ab4-6541-5bb4-0e3a-e8c611e9cc24",
	"04762900-575c-eb30-2ad6-8ca6928cd8d6");
INSERT INTO GD_GE
	VALUES ("8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"d0b38225-88ce-5af6-6e31-c94e7203571e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("057512ff-3252-603c-bba2-e3294b7adb95",
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"057512ff-3252-603c-bba2-e3294b7adb95");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"057512ff-3252-603c-bba2-e3294b7adb95",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("057512ff-3252-603c-bba2-e3294b7adb95",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("95c9fed4-7100-a679-c91a-e52e80956d7e",
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"95c9fed4-7100-a679-c91a-e52e80956d7e");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"95c9fed4-7100-a679-c91a-e52e80956d7e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95c9fed4-7100-a679-c91a-e52e80956d7e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f30f7fb5-0946-7bd0-07ae-722a6750490d",
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f30f7fb5-0946-7bd0-07ae-722a6750490d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f30f7fb5-0946-7bd0-07ae-722a6750490d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f30f7fb5-0946-7bd0-07ae-722a6750490d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b43ad768-78b7-18bf-9bf8-36a2ce5da4ae",
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"00000000-0000-0000-0000-000000000000",
	"c510a908-f63a-ed33-2e87-370b2cc315f0",
	"856b84f9-445d-21f0-75cd-ab9d54f5de8a");
INSERT INTO DIM_WAY
	VALUES ("c510a908-f63a-ed33-2e87-370b2cc315f0",
	1968.000000,
	1568.000000,
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("856b84f9-445d-21f0-75cd-ab9d54f5de8a",
	1968.000000,
	1680.000000,
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"00000000-0000-0000-0000-000000000000",
	"c510a908-f63a-ed33-2e87-370b2cc315f0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8ee0e586-ccaa-b2da-0b89-0ce286c7849d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("80f5170a-c826-eb8a-7cf7-4990581dd1d4",
	"bd3cd9e6-1fac-3316-4f49-17c5cbfc7f5c",
	"8ee0e586-ccaa-b2da-0b89-0ce286c7849d");
INSERT INTO GD_GE
	VALUES ("863640e7-2400-5362-6f62-623a86be1277",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"4b193ecb-b2ed-80b4-5b11-2e07bc1a87e7",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("863640e7-2400-5362-6f62-623a86be1277",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("810ab7a4-2ac9-8127-d119-7ae082259a2a",
	"863640e7-2400-5362-6f62-623a86be1277",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"810ab7a4-2ac9-8127-d119-7ae082259a2a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"810ab7a4-2ac9-8127-d119-7ae082259a2a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("810ab7a4-2ac9-8127-d119-7ae082259a2a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("de8b490c-bafe-fd81-c3c3-bdde9f0cd391",
	"863640e7-2400-5362-6f62-623a86be1277",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"de8b490c-bafe-fd81-c3c3-bdde9f0cd391");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"de8b490c-bafe-fd81-c3c3-bdde9f0cd391",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("de8b490c-bafe-fd81-c3c3-bdde9f0cd391",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c884b194-d6f1-b5f8-4115-bbc4bb44ca1a",
	"863640e7-2400-5362-6f62-623a86be1277",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c884b194-d6f1-b5f8-4115-bbc4bb44ca1a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c884b194-d6f1-b5f8-4115-bbc4bb44ca1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c884b194-d6f1-b5f8-4115-bbc4bb44ca1a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3101c540-f7b4-1541-1c7e-58cdc53d7fcc",
	"863640e7-2400-5362-6f62-623a86be1277",
	"00000000-0000-0000-0000-000000000000",
	"f03a9423-fa31-b03a-b886-eee1def8d191",
	"b3d669ec-938c-64d0-a6fb-4252fbb11082");
INSERT INTO DIM_WAY
	VALUES ("f03a9423-fa31-b03a-b886-eee1def8d191",
	2320.000000,
	1376.000000,
	"863640e7-2400-5362-6f62-623a86be1277",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b3d669ec-938c-64d0-a6fb-4252fbb11082",
	2320.000000,
	1472.000000,
	"863640e7-2400-5362-6f62-623a86be1277",
	"00000000-0000-0000-0000-000000000000",
	"f03a9423-fa31-b03a-b886-eee1def8d191");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"863640e7-2400-5362-6f62-623a86be1277",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("863640e7-2400-5362-6f62-623a86be1277",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bf75d4aa-6854-54af-b6f2-7198ca957228",
	"b2606a86-0914-8642-c23a-7b8866dd632b",
	"863640e7-2400-5362-6f62-623a86be1277");
INSERT INTO GD_GE
	VALUES ("3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"786bdcf9-ec4c-c691-1e62-0664501060e8",
	"91c1cda2-1332-cf73-183b-9a17cb87de72",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("669372eb-086e-4fc3-bde9-8df1b025ae96",
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"669372eb-086e-4fc3-bde9-8df1b025ae96");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"669372eb-086e-4fc3-bde9-8df1b025ae96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("669372eb-086e-4fc3-bde9-8df1b025ae96",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e0e9e8e7-b856-f9f5-ac04-9c05d97cc8d6",
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"e0e9e8e7-b856-f9f5-ac04-9c05d97cc8d6");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"e0e9e8e7-b856-f9f5-ac04-9c05d97cc8d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e0e9e8e7-b856-f9f5-ac04-9c05d97cc8d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("91aebd94-bf68-bbb8-1c1c-f73f166450c0",
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"91aebd94-bf68-bbb8-1c1c-f73f166450c0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"91aebd94-bf68-bbb8-1c1c-f73f166450c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91aebd94-bf68-bbb8-1c1c-f73f166450c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("43be092a-6370-5b54-9325-6ea202220d5e",
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"00000000-0000-0000-0000-000000000000",
	"40f15f29-0da1-25a2-49a1-278ae72fed3e",
	"1972414a-98c0-3ab5-37c5-991690536e7b");
INSERT INTO DIM_WAY
	VALUES ("40f15f29-0da1-25a2-49a1-278ae72fed3e",
	2320.000000,
	1568.000000,
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1972414a-98c0-3ab5-37c5-991690536e7b",
	2320.000000,
	1680.000000,
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"00000000-0000-0000-0000-000000000000",
	"40f15f29-0da1-25a2-49a1-278ae72fed3e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a071e0f-aae0-eb72-2d42-5a1d984b4a37",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f9c48c31-7da4-d68a-ed7f-841e1ac17952",
	"64774d33-afed-179a-6eba-1d40dd0ab7c1",
	"3a071e0f-aae0-eb72-2d42-5a1d984b4a37");
INSERT INTO DIM_DIA
	VALUES ("786bdcf9-ec4c-c691-1e62-0664501060e8",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("cfb850ea-dd59-a889-b34c-8d2759299d8c",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_BATTR
	VALUES ("cfb850ea-dd59-a889-b34c-8d2759299d8c",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_ATTR
	VALUES ("cfb850ea-dd59-a889-b34c-8d2759299d8c",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3c78d6c1-8a74-ff38-095c-605646f65802",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_BATTR
	VALUES ("3c78d6c1-8a74-ff38-095c-605646f65802",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_ATTR
	VALUES ("3c78d6c1-8a74-ff38-095c-605646f65802",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	"cfb850ea-dd59-a889-b34c-8d2759299d8c",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3b097978-c901-237d-88ca-b851ce82b6f7",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_BATTR
	VALUES ("3b097978-c901-237d-88ca-b851ce82b6f7",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_ATTR
	VALUES ("3b097978-c901-237d-88ca-b851ce82b6f7",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	"3c78d6c1-8a74-ff38-095c-605646f65802",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_OIDA
	VALUES ("cfb850ea-dd59-a889-b34c-8d2759299d8c",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO O_ID
	VALUES (2,
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO SM_ISM
	VALUES ("f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"e99576a2-7b4d-7105-1ba8-c6af9bd18fa6");
INSERT INTO SM_SM
	VALUES ("f3c7d60c-1955-4d10-d738-0fba72b46e44",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_EVTDI
	VALUES ("6e459d62-7630-2e40-2890-e7d5a2ac88da",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"faac4428-a469-5154-9c52-cf9ffbf3010a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("faac4428-a469-5154-9c52-cf9ffbf3010a",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("faac4428-a469-5154-9c52-cf9ffbf3010a",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("faac4428-a469-5154-9c52-cf9ffbf3010a",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("cd033373-d53b-6b85-a758-e9d5ef26783c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("cd033373-d53b-6b85-a758-e9d5ef26783c",
	"faac4428-a469-5154-9c52-cf9ffbf3010a",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cd033373-d53b-6b85-a758-e9d5ef26783c",
	"49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("1cac08ab-5752-fed4-0fbf-068214309e75",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"cd033373-d53b-6b85-a758-e9d5ef26783c");
INSERT INTO SM_AH
	VALUES ("1cac08ab-5752-fed4-0fbf-068214309e75",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("1cac08ab-5752-fed4-0fbf-068214309e75",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	1,
	'',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"faac4428-a469-5154-9c52-cf9ffbf3010a",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("49b6a9cf-85a4-e7f3-4e61-a33020538f0f",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54");
INSERT INTO SM_AH
	VALUES ("49b6a9cf-85a4-e7f3-4e61-a33020538f0f",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("49b6a9cf-85a4-e7f3-4e61-a33020538f0f",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("21d21e34-1119-b67c-dc50-b3397f805271",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"cd033373-d53b-6b85-a758-e9d5ef26783c",
	"faac4428-a469-5154-9c52-cf9ffbf3010a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d145d481-4d2b-3ba8-a967-5ad18f32e2e9",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"21d21e34-1119-b67c-dc50-b3397f805271");
INSERT INTO SM_AH
	VALUES ("d145d481-4d2b-3ba8-a967-5ad18f32e2e9",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("d145d481-4d2b-3ba8-a967-5ad18f32e2e9",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("21d21e34-1119-b67c-dc50-b3397f805271",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"cd033373-d53b-6b85-a758-e9d5ef26783c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("52d46cf7-800c-a5f9-0813-2e2301474711",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2d33e041-92e1-6a5d-82fd-620d8932f4a6",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"52d46cf7-800c-a5f9-0813-2e2301474711");
INSERT INTO SM_AH
	VALUES ("2d33e041-92e1-6a5d-82fd-620d8932f4a6",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("2d33e041-92e1-6a5d-82fd-620d8932f4a6",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("52d46cf7-800c-a5f9-0813-2e2301474711",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("66db3fcf-31d0-46c7-83d9-279a4eb5eb97",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"faac4428-a469-5154-9c52-cf9ffbf3010a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6306b65e-c4f1-9caa-ac19-ae96781b5180",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"66db3fcf-31d0-46c7-83d9-279a4eb5eb97");
INSERT INTO SM_AH
	VALUES ("6306b65e-c4f1-9caa-ac19-ae96781b5180",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("6306b65e-c4f1-9caa-ac19-ae96781b5180",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("66db3fcf-31d0-46c7-83d9-279a4eb5eb97",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"cd033373-d53b-6b85-a758-e9d5ef26783c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("181075f3-c105-38db-a4d1-945afff11263",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"cd033373-d53b-6b85-a758-e9d5ef26783c",
	"49f9f8b0-e4f4-e5fa-f44f-e607bc71b12c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("da0719d2-dd53-a5fe-3e19-5f21b334bfa1",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"181075f3-c105-38db-a4d1-945afff11263");
INSERT INTO SM_AH
	VALUES ("da0719d2-dd53-a5fe-3e19-5f21b334bfa1",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44");
INSERT INTO SM_ACT
	VALUES ("da0719d2-dd53-a5fe-3e19-5f21b334bfa1",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("181075f3-c105-38db-a4d1-945afff11263",
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("a3717d15-41b2-79af-e965-9b1c28e28408",
	8,
	"f3c7d60c-1955-4d10-d738-0fba72b46e44",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("ce15634e-dc3d-f704-b709-420351979c5e",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"cd033373-d53b-6b85-a758-e9d5ef26783c",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO GD_NCS
	VALUES ("ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ce15634e-dc3d-f704-b709-420351979c5e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6b686ae8-04dc-8e86-2783-653a4e043f51",
	1888.000000,
	1328.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO DIM_CON
	VALUES ("61e8cdc1-665f-f4e7-8634-3e9ef07a3646",
	2016.000000,
	1328.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO DIM_CON
	VALUES ("c4212253-9a7e-db6b-0237-6b230f01959d",
	2144.000000,
	1408.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO DIM_CON
	VALUES ("0f20c97d-a1c9-6511-5e39-2a5218b9216c",
	1856.000000,
	1392.000000,
	"ce15634e-dc3d-f704-b709-420351979c5e");
INSERT INTO GD_GE
	VALUES ("cf386e3e-172e-c800-ccaf-bdc7b65aa6c4",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"a6c55fce-56da-3b9e-0f21-58e80d788c54",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO GD_NCS
	VALUES ("cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf386e3e-172e-c800-ccaf-bdc7b65aa6c4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("02c36b76-b56c-7b14-3d0d-51f5cb07b08a",
	1920.000000,
	1056.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO DIM_CON
	VALUES ("66ef95ca-8952-9d44-5904-690e25060b9e",
	2096.000000,
	1056.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO DIM_CON
	VALUES ("a3ddef0b-2236-8e3b-e692-f7b2713f1a26",
	2144.000000,
	1120.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO DIM_CON
	VALUES ("0f43a1b6-74ca-e450-b479-a4b5bfc075ea",
	1856.000000,
	1120.000000,
	"cf386e3e-172e-c800-ccaf-bdc7b65aa6c4");
INSERT INTO GD_GE
	VALUES ("5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"21d21e34-1119-b67c-dc50-b3397f805271",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fa3a2d25-50af-a9b3-6137-9e54785f2746",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fa3a2d25-50af-a9b3-6137-9e54785f2746");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fa3a2d25-50af-a9b3-6137-9e54785f2746",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fa3a2d25-50af-a9b3-6137-9e54785f2746",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a97e7f79-269e-7920-743d-f4d034be306f",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"a97e7f79-269e-7920-743d-f4d034be306f");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"a97e7f79-269e-7920-743d-f4d034be306f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a97e7f79-269e-7920-743d-f4d034be306f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e3b9cbe6-a39a-db02-a30e-e5dd51d4ea6b",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e3b9cbe6-a39a-db02-a30e-e5dd51d4ea6b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e3b9cbe6-a39a-db02-a30e-e5dd51d4ea6b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e3b9cbe6-a39a-db02-a30e-e5dd51d4ea6b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4f36e6ea-bf51-8084-ea77-0a171b8face7",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000",
	"46ed9ef0-ad46-c9de-67d3-444b3b51fe87",
	"fbce47df-ff5c-a06d-fabb-ad8f8562a429");
INSERT INTO GD_LS
	VALUES ("e00cad50-02f3-2e53-2cfb-4321c0db7f87",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"4f36e6ea-bf51-8084-ea77-0a171b8face7",
	"fbce47df-ff5c-a06d-fabb-ad8f8562a429",
	"a6674509-8bcc-0d59-27c0-29b4f4a13ae3");
INSERT INTO GD_LS
	VALUES ("edd3f89f-f51a-598b-c251-2733b0856ffd",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"e00cad50-02f3-2e53-2cfb-4321c0db7f87",
	"a6674509-8bcc-0d59-27c0-29b4f4a13ae3",
	"5a993b21-236a-e527-7b2f-b41ac78375ce");
INSERT INTO DIM_WAY
	VALUES ("46ed9ef0-ad46-c9de-67d3-444b3b51fe87",
	1888.000000,
	1328.000000,
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fbce47df-ff5c-a06d-fabb-ad8f8562a429",
	1888.000000,
	1296.000000,
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000",
	"46ed9ef0-ad46-c9de-67d3-444b3b51fe87");
INSERT INTO DIM_WAY
	VALUES ("a6674509-8bcc-0d59-27c0-29b4f4a13ae3",
	2016.000000,
	1296.000000,
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000",
	"fbce47df-ff5c-a06d-fabb-ad8f8562a429");
INSERT INTO DIM_WAY
	VALUES ("5a993b21-236a-e527-7b2f-b41ac78375ce",
	2016.000000,
	1328.000000,
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000",
	"a6674509-8bcc-0d59-27c0-29b4f4a13ae3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6b686ae8-04dc-8e86-2783-653a4e043f51",
	"61e8cdc1-665f-f4e7-8634-3e9ef07a3646",
	"5029a7cd-087f-cdf7-0b19-73d1aa0b0fd2");
INSERT INTO GD_GE
	VALUES ("6ac50c80-6fdc-b858-5824-219f257bea6f",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"52d46cf7-800c-a5f9-0813-2e2301474711",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6548389f-0de3-47e2-7ff0-14936096442e",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6548389f-0de3-47e2-7ff0-14936096442e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6548389f-0de3-47e2-7ff0-14936096442e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6548389f-0de3-47e2-7ff0-14936096442e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("219f87bd-7242-0349-b487-1c3d9934c0cb",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"219f87bd-7242-0349-b487-1c3d9934c0cb");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"219f87bd-7242-0349-b487-1c3d9934c0cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("219f87bd-7242-0349-b487-1c3d9934c0cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("46c5a51e-c11f-490a-1bcc-26ae6cce1c0a",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"46c5a51e-c11f-490a-1bcc-26ae6cce1c0a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"46c5a51e-c11f-490a-1bcc-26ae6cce1c0a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("46c5a51e-c11f-490a-1bcc-26ae6cce1c0a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e7327c30-9f14-0e03-7d5a-3983505ffaea",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000",
	"71ec3b6d-0392-f5e9-cee3-e1b9f9cc4bb7",
	"9c51e302-2045-ccee-d457-5b2014552095");
INSERT INTO GD_LS
	VALUES ("0e9b2912-895a-406a-4714-19a4b3967e89",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"e7327c30-9f14-0e03-7d5a-3983505ffaea",
	"9c51e302-2045-ccee-d457-5b2014552095",
	"1bd646e7-f83c-dbec-c176-afc8ed21e1c3");
INSERT INTO GD_LS
	VALUES ("cf0aa4f1-4d87-fdfb-aeb2-6b6dcf4bba9f",
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"0e9b2912-895a-406a-4714-19a4b3967e89",
	"1bd646e7-f83c-dbec-c176-afc8ed21e1c3",
	"92fee57e-9dd3-9dbe-2c26-6108dc0d515e");
INSERT INTO DIM_WAY
	VALUES ("71ec3b6d-0392-f5e9-cee3-e1b9f9cc4bb7",
	1920.000000,
	1056.000000,
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9c51e302-2045-ccee-d457-5b2014552095",
	1920.000000,
	1008.000000,
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000",
	"71ec3b6d-0392-f5e9-cee3-e1b9f9cc4bb7");
INSERT INTO DIM_WAY
	VALUES ("1bd646e7-f83c-dbec-c176-afc8ed21e1c3",
	2096.000000,
	1008.000000,
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000",
	"9c51e302-2045-ccee-d457-5b2014552095");
INSERT INTO DIM_WAY
	VALUES ("92fee57e-9dd3-9dbe-2c26-6108dc0d515e",
	2096.000000,
	1056.000000,
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000",
	"1bd646e7-f83c-dbec-c176-afc8ed21e1c3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ac50c80-6fdc-b858-5824-219f257bea6f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ac50c80-6fdc-b858-5824-219f257bea6f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("02c36b76-b56c-7b14-3d0d-51f5cb07b08a",
	"66ef95ca-8952-9d44-5904-690e25060b9e",
	"6ac50c80-6fdc-b858-5824-219f257bea6f");
INSERT INTO GD_GE
	VALUES ("40679b4f-3663-c745-2728-50407a73ee1e",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"181075f3-c105-38db-a4d1-945afff11263",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("72d27640-7d4d-cbe7-d465-b645355d038d",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"72d27640-7d4d-cbe7-d465-b645355d038d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"72d27640-7d4d-cbe7-d465-b645355d038d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("72d27640-7d4d-cbe7-d465-b645355d038d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("917b9fa1-0e5e-4aed-4c2d-f9a171946040",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"917b9fa1-0e5e-4aed-4c2d-f9a171946040");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"917b9fa1-0e5e-4aed-4c2d-f9a171946040",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("917b9fa1-0e5e-4aed-4c2d-f9a171946040",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a23aed48-dda4-2a7b-9b0f-718a4b1c7ac1",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a23aed48-dda4-2a7b-9b0f-718a4b1c7ac1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a23aed48-dda4-2a7b-9b0f-718a4b1c7ac1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a23aed48-dda4-2a7b-9b0f-718a4b1c7ac1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8b30c0cf-0946-e582-b22a-d08e16399720",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000",
	"70d6e3e8-a994-8168-7ac0-708b744ecc19",
	"cda4335e-286c-0620-b853-b2ffbb20be94");
INSERT INTO GD_LS
	VALUES ("9abf26c3-5f0b-f81b-e948-9b355177d253",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"8b30c0cf-0946-e582-b22a-d08e16399720",
	"cda4335e-286c-0620-b853-b2ffbb20be94",
	"e958c9c3-59d6-cef6-0bf5-6c1d63c92c22");
INSERT INTO GD_LS
	VALUES ("90bb2fbb-05b3-2b34-a180-2e2283b6901e",
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"9abf26c3-5f0b-f81b-e948-9b355177d253",
	"e958c9c3-59d6-cef6-0bf5-6c1d63c92c22",
	"558629e0-dd99-dc5e-ee00-e27626bc4259");
INSERT INTO DIM_WAY
	VALUES ("70d6e3e8-a994-8168-7ac0-708b744ecc19",
	2144.000000,
	1408.000000,
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cda4335e-286c-0620-b853-b2ffbb20be94",
	2240.000000,
	1408.000000,
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000",
	"70d6e3e8-a994-8168-7ac0-708b744ecc19");
INSERT INTO DIM_WAY
	VALUES ("e958c9c3-59d6-cef6-0bf5-6c1d63c92c22",
	2240.000000,
	1120.000000,
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000",
	"cda4335e-286c-0620-b853-b2ffbb20be94");
INSERT INTO DIM_WAY
	VALUES ("558629e0-dd99-dc5e-ee00-e27626bc4259",
	2144.000000,
	1120.000000,
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000",
	"e958c9c3-59d6-cef6-0bf5-6c1d63c92c22");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"40679b4f-3663-c745-2728-50407a73ee1e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("40679b4f-3663-c745-2728-50407a73ee1e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c4212253-9a7e-db6b-0237-6b230f01959d",
	"a3ddef0b-2236-8e3b-e692-f7b2713f1a26",
	"40679b4f-3663-c745-2728-50407a73ee1e");
INSERT INTO GD_GE
	VALUES ("426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"a3717d15-41b2-79af-e965-9b1c28e28408",
	"66db3fcf-31d0-46c7-83d9-279a4eb5eb97",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("16b1de46-abe7-06ea-9b28-3261389ae7f1",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"16b1de46-abe7-06ea-9b28-3261389ae7f1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"16b1de46-abe7-06ea-9b28-3261389ae7f1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("16b1de46-abe7-06ea-9b28-3261389ae7f1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7580b6ed-a06e-c22f-fb16-525a12a584bb",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"7580b6ed-a06e-c22f-fb16-525a12a584bb");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"7580b6ed-a06e-c22f-fb16-525a12a584bb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7580b6ed-a06e-c22f-fb16-525a12a584bb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6adcb441-b25c-c0f9-0236-8f9345dbcbd3",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6adcb441-b25c-c0f9-0236-8f9345dbcbd3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6adcb441-b25c-c0f9-0236-8f9345dbcbd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6adcb441-b25c-c0f9-0236-8f9345dbcbd3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("45e9889f-d185-b512-7a66-69c9d5bc81f4",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000",
	"1b95b554-6404-33b3-ba41-76b3256c603a",
	"06b379c6-3c34-3f9f-32c0-c975a24003d7");
INSERT INTO GD_LS
	VALUES ("862a0541-f12c-4fe9-fcac-33019393b47a",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"45e9889f-d185-b512-7a66-69c9d5bc81f4",
	"06b379c6-3c34-3f9f-32c0-c975a24003d7",
	"026d3cdd-eff8-9ef0-ea24-2564ddc240cd");
INSERT INTO GD_LS
	VALUES ("adedf294-2d1e-e081-84cd-d5211dfca12e",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"862a0541-f12c-4fe9-fcac-33019393b47a",
	"026d3cdd-eff8-9ef0-ea24-2564ddc240cd",
	"c9964956-d3ee-7858-a408-88003027cd8e");
INSERT INTO DIM_WAY
	VALUES ("1b95b554-6404-33b3-ba41-76b3256c603a",
	1856.000000,
	1120.000000,
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("06b379c6-3c34-3f9f-32c0-c975a24003d7",
	1776.000000,
	1120.000000,
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000",
	"1b95b554-6404-33b3-ba41-76b3256c603a");
INSERT INTO DIM_WAY
	VALUES ("026d3cdd-eff8-9ef0-ea24-2564ddc240cd",
	1776.000000,
	1392.000000,
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000",
	"06b379c6-3c34-3f9f-32c0-c975a24003d7");
INSERT INTO DIM_WAY
	VALUES ("c9964956-d3ee-7858-a408-88003027cd8e",
	1856.000000,
	1392.000000,
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000",
	"026d3cdd-eff8-9ef0-ea24-2564ddc240cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"426d4a35-ac17-e2d3-e949-fb2020d60de5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("426d4a35-ac17-e2d3-e949-fb2020d60de5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0f43a1b6-74ca-e450-b479-a4b5bfc075ea",
	"0f20c97d-a1c9-6511-5e39-2a5218b9216c",
	"426d4a35-ac17-e2d3-e949-fb2020d60de5");
INSERT INTO DIM_DIA
	VALUES ("a3717d15-41b2-79af-e965-9b1c28e28408",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935",
	"d17fbc72-9788-c6b6-23b5-62670440ec56",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935",
	"3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935",
	"21762565-23be-65af-73fc-35e214dabf2e",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935",
	"e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935",
	"46792961-2920-d189-6204-318144409ee9",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935",
	"3f0ba211-2512-298c-8862-a2b3f4471b3b",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935",
	"d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935",
	"67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_BATTR
	VALUES ("9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ATTR
	VALUES ("9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935",
	"6b198324-67d5-86bf-060f-79908d0fefbb",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"d230db49-0b38-abc0-9131-32b611ae25f2",
	"1aba7207-6ad2-bb8e-a59c-d3237fac6b31",
	"ed45734a-998e-44dd-b9bd-da405b6121b3",
	"6842a511-f071-fa55-d3bf-4622222492d7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("ed45734a-998e-44dd-b9bd-da405b6121b3",
	"b9576516-defd-6566-d57f-11c030375935",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("ed45734a-998e-44dd-b9bd-da405b6121b3",
	"b9576516-defd-6566-d57f-11c030375935",
	"9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"544e5cfe-8124-fb06-2671-cb982a49637b",
	"e915e4d7-a64f-b1a0-ec63-382304f43f20",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("544e5cfe-8124-fb06-2671-cb982a49637b",
	"b9576516-defd-6566-d57f-11c030375935",
	"30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("544e5cfe-8124-fb06-2671-cb982a49637b",
	"b9576516-defd-6566-d57f-11c030375935",
	"ed45734a-998e-44dd-b9bd-da405b6121b3",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"69e63316-6562-f57f-677f-82aeb7ec0e64",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"f9fc2951-2a9b-d371-55d2-12248962d278",
	"bb82ca5e-a550-0f3c-f0b0-53cc01fce728",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("f9fc2951-2a9b-d371-55d2-12248962d278",
	"b9576516-defd-6566-d57f-11c030375935",
	"69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("f9fc2951-2a9b-d371-55d2-12248962d278",
	"b9576516-defd-6566-d57f-11c030375935",
	"544e5cfe-8124-fb06-2671-cb982a49637b",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"eff8a6e2-4559-e188-fea1-e460eebc3516",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"3b28a361-619f-cb4e-6306-6f73ab43e534",
	"db512c24-cb69-a060-0f20-3d6b744d1e2b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("3b28a361-619f-cb4e-6306-6f73ab43e534",
	"b9576516-defd-6566-d57f-11c030375935",
	"eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("3b28a361-619f-cb4e-6306-6f73ab43e534",
	"b9576516-defd-6566-d57f-11c030375935",
	"f9fc2951-2a9b-d371-55d2-12248962d278",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"233747a1-4918-9eb0-e569-4f384cb1cca7",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"a297fa06-70a9-c6fb-17bc-9e4480d13ed1",
	"369cc36b-e20b-4eb4-a792-21e29015abbc",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("a297fa06-70a9-c6fb-17bc-9e4480d13ed1",
	"b9576516-defd-6566-d57f-11c030375935",
	"233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("a297fa06-70a9-c6fb-17bc-9e4480d13ed1",
	"b9576516-defd-6566-d57f-11c030375935",
	"3b28a361-619f-cb4e-6306-6f73ab43e534",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"99825e56-d099-9cc7-d041-55e3015c6347",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"bc1d3e50-ff39-0e8e-bcb4-b735fb2dda47",
	"0b6e2bb0-039b-0609-88e8-252d4b73cef7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("bc1d3e50-ff39-0e8e-bcb4-b735fb2dda47",
	"b9576516-defd-6566-d57f-11c030375935",
	"99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("bc1d3e50-ff39-0e8e-bcb4-b735fb2dda47",
	"b9576516-defd-6566-d57f-11c030375935",
	"a297fa06-70a9-c6fb-17bc-9e4480d13ed1",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"ac20d837-10c5-4752-77bb-9439bdbecf17",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"73a58f52-0654-c2bc-d39d-95784ccde69d",
	"f5a0951a-300d-fb57-ac30-5d0b10cf1875",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("73a58f52-0654-c2bc-d39d-95784ccde69d",
	"b9576516-defd-6566-d57f-11c030375935",
	"ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("73a58f52-0654-c2bc-d39d-95784ccde69d",
	"b9576516-defd-6566-d57f-11c030375935",
	"bc1d3e50-ff39-0e8e-bcb4-b735fb2dda47",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"60e4e4b2-2ee1-e4f7-37a0-fee2283055cc",
	"057df6f0-9d93-ce98-0b70-fadebe88b50a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("60e4e4b2-2ee1-e4f7-37a0-fee2283055cc",
	"b9576516-defd-6566-d57f-11c030375935",
	"414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("60e4e4b2-2ee1-e4f7-37a0-fee2283055cc",
	"b9576516-defd-6566-d57f-11c030375935",
	"73a58f52-0654-c2bc-d39d-95784ccde69d",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"9d536490-0716-e194-4a8a-89cc7b5504e8",
	"8e978113-c8a6-be7f-4b15-fc5ae6ba4f86",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("9d536490-0716-e194-4a8a-89cc7b5504e8",
	"b9576516-defd-6566-d57f-11c030375935",
	"d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("9d536490-0716-e194-4a8a-89cc7b5504e8",
	"b9576516-defd-6566-d57f-11c030375935",
	"60e4e4b2-2ee1-e4f7-37a0-fee2283055cc",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"38e6927f-76ed-46ae-d39d-723652d77e1e",
	"c030d3d7-5906-ca97-2003-5b0a9c7787c4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("38e6927f-76ed-46ae-d39d-723652d77e1e",
	"b9576516-defd-6566-d57f-11c030375935",
	"078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("38e6927f-76ed-46ae-d39d-723652d77e1e",
	"b9576516-defd-6566-d57f-11c030375935",
	"9d536490-0716-e194-4a8a-89cc7b5504e8",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"7b834a9e-1024-9126-8725-86c26bd00702",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"573205f9-65d7-7e6d-f82a-d3e8dcb7cfff",
	"0db1fdce-90d1-966a-5b35-783bf5d2c569",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("573205f9-65d7-7e6d-f82a-d3e8dcb7cfff",
	"b9576516-defd-6566-d57f-11c030375935",
	"7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("573205f9-65d7-7e6d-f82a-d3e8dcb7cfff",
	"b9576516-defd-6566-d57f-11c030375935",
	"38e6927f-76ed-46ae-d39d-723652d77e1e",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_OIDA
	VALUES ("9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO O_ID
	VALUES (2,
	"b9576516-defd-6566-d57f-11c030375935");
INSERT INTO PE_PE
	VALUES ("40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"69e63316-6562-f57f-677f-82aeb7ec0e64",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"eff8a6e2-4559-e188-fea1-e460eebc3516",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"233747a1-4918-9eb0-e569-4f384cb1cca7",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"99825e56-d099-9cc7-d041-55e3015c6347",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"ac20d837-10c5-4752-77bb-9439bdbecf17",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_BATTR
	VALUES ("7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ATTR
	VALUES ("7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_OIDA
	VALUES ("99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO O_ID
	VALUES (2,
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec");
INSERT INTO PE_PE
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("bf0b524d-c991-1899-b266-4ca9bc6b3f81",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"c16aee2c-b29c-68ca-38e9-68396b23c113",
	0);
INSERT INTO O_TFR
	VALUES ("a88bdd0e-634a-32a0-1f7d-7bfa17329edf",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"b90d5f99-f3c7-5439-69ad-9d004bae52c5",
	0);
INSERT INTO O_TPARM
	VALUES ("de1b05ea-0873-df29-9715-65277c3889ee",
	"a88bdd0e-634a-32a0-1f7d-7bfa17329edf",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("64d68341-0e5e-b360-e6d8-581e2eca7a3e",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"bf0b524d-c991-1899-b266-4ca9bc6b3f81",
	0);
INSERT INTO O_TPARM
	VALUES ("6c07ac14-ebd0-85e8-4ee2-c5e9f5c92514",
	"64d68341-0e5e-b360-e6d8-581e2eca7a3e",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("9ad5ef54-bc12-b500-fe30-0221a8fbcc17",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TPARM
	VALUES ("35a50480-62c5-2ce2-4058-98e8e4142065",
	"9ad5ef54-bc12-b500-fe30-0221a8fbcc17",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("8daab554-a101-2c03-ea9d-d4083ed17a50",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"64d68341-0e5e-b360-e6d8-581e2eca7a3e",
	0);
INSERT INTO O_TPARM
	VALUES ("f6b27389-d7c5-4f3b-020f-cfd67de7ba7e",
	"8daab554-a101-2c03-ea9d-d4083ed17a50",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("43608432-c786-abf2-60c2-a1832dd763ab",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"0372e567-49cc-1dc4-f1d3-572073dcbd16",
	0);
INSERT INTO O_TPARM
	VALUES ("13ca49d4-ee05-9196-3834-473bb69070d3",
	"43608432-c786-abf2-60c2-a1832dd763ab",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b90d5f99-f3c7-5439-69ad-9d004bae52c5",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"9ad5ef54-bc12-b500-fe30-0221a8fbcc17",
	0);
INSERT INTO O_TPARM
	VALUES ("9b64705c-d969-b3ee-cc45-d6bd1bb1cfae",
	"b90d5f99-f3c7-5439-69ad-9d004bae52c5",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0372e567-49cc-1dc4-f1d3-572073dcbd16",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"8daab554-a101-2c03-ea9d-d4083ed17a50",
	0);
INSERT INTO O_TPARM
	VALUES ("fee83d6e-9c6f-0df8-0525-6cc0f43b1258",
	"0372e567-49cc-1dc4-f1d3-572073dcbd16",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c16aee2c-b29c-68ca-38e9-68396b23c113",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"a88bdd0e-634a-32a0-1f7d-7bfa17329edf",
	0);
INSERT INTO O_TPARM
	VALUES ("5cc18e05-858b-01d9-a842-1cf420934f84",
	"c16aee2c-b29c-68ca-38e9-68396b23c113",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a64776d1-8d15-b15b-dfb6-d81712c5657c",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"43608432-c786-abf2-60c2-a1832dd763ab",
	0);
INSERT INTO O_NBATTR
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("25481a55-68bc-c09d-d6de-518087c826ca",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("25481a55-68bc-c09d-d6de-518087c826ca",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("25481a55-68bc-c09d-d6de-518087c826ca",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("68b74807-2c09-6d16-c4c5-f3ded0849d22",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("68b74807-2c09-6d16-c4c5-f3ded0849d22",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("68b74807-2c09-6d16-c4c5-f3ded0849d22",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"25481a55-68bc-c09d-d6de-518087c826ca",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f2a59e13-f1a2-596b-257f-1e963f75adcd",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("f2a59e13-f1a2-596b-257f-1e963f75adcd",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("f2a59e13-f1a2-596b-257f-1e963f75adcd",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"68b74807-2c09-6d16-c4c5-f3ded0849d22",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("07897b3a-fa79-5b13-b165-da350301c956",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("07897b3a-fa79-5b13-b165-da350301c956",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("07897b3a-fa79-5b13-b165-da350301c956",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"f2a59e13-f1a2-596b-257f-1e963f75adcd",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("538aa64f-eb81-1d46-11ad-aa3f1e6c0833",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("538aa64f-eb81-1d46-11ad-aa3f1e6c0833",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("538aa64f-eb81-1d46-11ad-aa3f1e6c0833",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"07897b3a-fa79-5b13-b165-da350301c956",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ec1cd33f-fdb6-1422-680e-c7e1f4b94d55",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("ec1cd33f-fdb6-1422-680e-c7e1f4b94d55",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("ec1cd33f-fdb6-1422-680e-c7e1f4b94d55",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"538aa64f-eb81-1d46-11ad-aa3f1e6c0833",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("edbb62ce-8cc6-032a-0703-6a3bb096227a",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("edbb62ce-8cc6-032a-0703-6a3bb096227a",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("edbb62ce-8cc6-032a-0703-6a3bb096227a",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"ec1cd33f-fdb6-1422-680e-c7e1f4b94d55",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("53abd7f3-99a5-bf13-4ba7-f50374dc6c03",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("53abd7f3-99a5-bf13-4ba7-f50374dc6c03",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("53abd7f3-99a5-bf13-4ba7-f50374dc6c03",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"edbb62ce-8cc6-032a-0703-6a3bb096227a",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1c1f6a55-c5b3-2e41-4aa5-28e2c00b7419",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("1c1f6a55-c5b3-2e41-4aa5-28e2c00b7419",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("1c1f6a55-c5b3-2e41-4aa5-28e2c00b7419",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"53abd7f3-99a5-bf13-4ba7-f50374dc6c03",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("47cc4dfc-ebbe-c94c-2743-1b7bd86a4628",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("47cc4dfc-ebbe-c94c-2743-1b7bd86a4628",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("47cc4dfc-ebbe-c94c-2743-1b7bd86a4628",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"1c1f6a55-c5b3-2e41-4aa5-28e2c00b7419",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4a4a5dea-64d7-2d74-2380-526398bb4056",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("4a4a5dea-64d7-2d74-2380-526398bb4056",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("4a4a5dea-64d7-2d74-2380-526398bb4056",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"47cc4dfc-ebbe-c94c-2743-1b7bd86a4628",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("dbe00dd5-a5fb-6c37-40b1-da9a19fab859",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("dbe00dd5-a5fb-6c37-40b1-da9a19fab859",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("dbe00dd5-a5fb-6c37-40b1-da9a19fab859",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"4a4a5dea-64d7-2d74-2380-526398bb4056",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c0921cbe-4f03-36aa-23ef-f2654cc08a1e",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("c0921cbe-4f03-36aa-23ef-f2654cc08a1e",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("c0921cbe-4f03-36aa-23ef-f2654cc08a1e",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"dbe00dd5-a5fb-6c37-40b1-da9a19fab859",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bca396ba-c4e6-4229-ced2-7c3760fc0472",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("bca396ba-c4e6-4229-ced2-7c3760fc0472",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("bca396ba-c4e6-4229-ced2-7c3760fc0472",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"c0921cbe-4f03-36aa-23ef-f2654cc08a1e",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"30506817-5243-0ab0-bb82-3d3068356918",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6feffaeb-4960-2077-2ff9-57f7cd73e448",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("6feffaeb-4960-2077-2ff9-57f7cd73e448",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("6feffaeb-4960-2077-2ff9-57f7cd73e448",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"bca396ba-c4e6-4229-ced2-7c3760fc0472",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"66fb2f9d-fb62-147a-7a7a-04cc0ba5f938",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("32cd5fb6-b01e-3484-a2ee-ef5ec538edf1",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("32cd5fb6-b01e-3484-a2ee-ef5ec538edf1",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("32cd5fb6-b01e-3484-a2ee-ef5ec538edf1",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"6feffaeb-4960-2077-2ff9-57f7cd73e448",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"612942c3-12a1-70de-d989-6fa6106b281e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("46d0eee3-6c6e-3639-ba34-d314e98bea20",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_BATTR
	VALUES ("46d0eee3-6c6e-3639-ba34-d314e98bea20",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ATTR
	VALUES ("46d0eee3-6c6e-3639-ba34-d314e98bea20",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"32cd5fb6-b01e-3484-a2ee-ef5ec538edf1",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"2ec5d5bc-fe6a-f698-d5d7-db997beddab0",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"d17fbc72-9788-c6b6-23b5-62670440ec56",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"3433a7e5-a67e-4228-29a8-56719700cfe9",
	"6ea7d275-2051-91fa-dd52-a89dc6f1884a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("3433a7e5-a67e-4228-29a8-56719700cfe9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("3433a7e5-a67e-4228-29a8-56719700cfe9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"46d0eee3-6c6e-3639-ba34-d314e98bea20",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"76ff87ab-c1ac-01ae-67e3-f8dc559a9d1f",
	"8edd19f2-5703-68de-d89b-f51069e1b7ed",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("76ff87ab-c1ac-01ae-67e3-f8dc559a9d1f",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("76ff87ab-c1ac-01ae-67e3-f8dc559a9d1f",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"3433a7e5-a67e-4228-29a8-56719700cfe9",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"21762565-23be-65af-73fc-35e214dabf2e",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"540609aa-f70e-59b3-faae-5ddf2d7193da",
	"71dfe550-8d11-2130-e93f-afa24607b31e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("540609aa-f70e-59b3-faae-5ddf2d7193da",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("540609aa-f70e-59b3-faae-5ddf2d7193da",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"76ff87ab-c1ac-01ae-67e3-f8dc559a9d1f",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"0f4d8f41-9e36-83c1-4b9f-460b0ec0f7ca",
	"40c62b31-eb9f-fd45-0fd0-cb9fb59e0145",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("0f4d8f41-9e36-83c1-4b9f-460b0ec0f7ca",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("0f4d8f41-9e36-83c1-4b9f-460b0ec0f7ca",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"540609aa-f70e-59b3-faae-5ddf2d7193da",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"46792961-2920-d189-6204-318144409ee9",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"0f3c07a7-e744-db2c-7704-8e5c6fc3f397",
	"7e19f7fd-dd67-142f-1983-f76b5f3a28ab",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("0f3c07a7-e744-db2c-7704-8e5c6fc3f397",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("0f3c07a7-e744-db2c-7704-8e5c6fc3f397",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"0f4d8f41-9e36-83c1-4b9f-460b0ec0f7ca",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"c6cdd3d6-012c-bc6b-26ff-d5db02a6dde2",
	"d2a7a763-e902-a343-00c1-822e90767671",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("c6cdd3d6-012c-bc6b-26ff-d5db02a6dde2",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("c6cdd3d6-012c-bc6b-26ff-d5db02a6dde2",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"0f3c07a7-e744-db2c-7704-8e5c6fc3f397",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"27850c8c-8143-9224-accb-a79840987bab",
	"3ac64761-0d6c-149a-060a-b298300c732c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("27850c8c-8143-9224-accb-a79840987bab",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("27850c8c-8143-9224-accb-a79840987bab",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"c6cdd3d6-012c-bc6b-26ff-d5db02a6dde2",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"b10efe43-c2f8-9a2c-9789-f434c572916c",
	"011f6993-7ff8-6931-35d4-529f47091166",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("b10efe43-c2f8-9a2c-9789-f434c572916c",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("b10efe43-c2f8-9a2c-9789-f434c572916c",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"27850c8c-8143-9224-accb-a79840987bab",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"6b198324-67d5-86bf-060f-79908d0fefbb",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"14e6218c-69a2-c341-dd59-3f9e7e8fd5ed",
	"21b3ce16-2f94-1ca5-d588-e1816b3d5c70",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("14e6218c-69a2-c341-dd59-3f9e7e8fd5ed",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("14e6218c-69a2-c341-dd59-3f9e7e8fd5ed",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b10efe43-c2f8-9a2c-9789-f434c572916c",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"a935ee64-dde3-d951-70e5-79cb0fd8f294",
	"156f49b2-526e-f4f1-2c9b-91221da974ce",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("a935ee64-dde3-d951-70e5-79cb0fd8f294",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("a935ee64-dde3-d951-70e5-79cb0fd8f294",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	"14e6218c-69a2-c341-dd59-3f9e7e8fd5ed",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_OIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO O_ID
	VALUES (2,
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO SM_ISM
	VALUES ("e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"a2306621-56f0-d9c9-ae78-e27421faf59e");
INSERT INTO SM_SM
	VALUES ("e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_EVTDI
	VALUES ("2f05bdf0-c339-18a9-6b93-9fa2c8f9e084",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"38cdb5e4-c0ca-a377-a7ed-c4f5370254c1");
INSERT INTO SM_EVTDI
	VALUES ("dd7d3f94-f537-2c4d-defa-830b41f03c6e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("dbcdadc4-ef8c-f467-0d37-b602d2968385",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"2f05bdf0-c339-18a9-6b93-9fa2c8f9e084");
INSERT INTO SM_EVTDI
	VALUES ("be4b1dbf-b7b8-1653-9842-48fff285a8e5",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"dbcdadc4-ef8c-f467-0d37-b602d2968385");
INSERT INTO SM_EVTDI
	VALUES ("e9f2b1d2-1610-387e-84b0-2d2999737132",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"68f903ed-374b-9bd2-a93b-2610d70e0047");
INSERT INTO SM_EVTDI
	VALUES ("a0eda1de-4ce9-feb7-eca9-c5657d63d1ac",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c5345aa8-7bfa-0422-699e-e3604bac6986",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"a0eda1de-4ce9-feb7-eca9-c5657d63d1ac");
INSERT INTO SM_EVTDI
	VALUES ("6fc9a020-8c14-441f-9bd6-5e428a0fc4a0",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"c5345aa8-7bfa-0422-699e-e3604bac6986");
INSERT INTO SM_EVTDI
	VALUES ("22b648dc-18e2-e5a8-8932-0d8b6e491454",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"6fc9a020-8c14-441f-9bd6-5e428a0fc4a0");
INSERT INTO SM_EVTDI
	VALUES ("b5d5b9a5-f320-3398-392c-68f7b54b9927",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"22b648dc-18e2-e5a8-8932-0d8b6e491454");
INSERT INTO SM_EVTDI
	VALUES ("b20fc243-a9df-3224-9007-df3bc168f3e7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"be4b1dbf-b7b8-1653-9842-48fff285a8e5");
INSERT INTO SM_EVTDI
	VALUES ("68f903ed-374b-9bd2-a93b-2610d70e0047",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"83e2d741-45c3-7bce-0497-c66180c10c85");
INSERT INTO SM_EVTDI
	VALUES ("27234a4b-d442-89b4-7497-a6fdcdd191f6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3b88f7b4-56a6-67dc-4270-49afb53cdc59",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"27234a4b-d442-89b4-7497-a6fdcdd191f6");
INSERT INTO SM_EVTDI
	VALUES ("2ae69181-c0ad-84da-231e-ae80753a7718",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"3b88f7b4-56a6-67dc-4270-49afb53cdc59");
INSERT INTO SM_EVTDI
	VALUES ("0509db65-17da-0ca7-0a3c-7d92b1603c7b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"2ae69181-c0ad-84da-231e-ae80753a7718");
INSERT INTO SM_EVTDI
	VALUES ("6a51fbb5-5d80-8bc8-208e-455d8851769e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("83e2d741-45c3-7bce-0497-c66180c10c85",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"3f222501-8a21-3985-ed02-22c66d83ccf6");
INSERT INTO SM_EVTDI
	VALUES ("3f222501-8a21-3985-ed02-22c66d83ccf6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"b20fc243-a9df-3224-9007-df3bc168f3e7");
INSERT INTO SM_EVTDI
	VALUES ("38cdb5e4-c0ca-a377-a7ed-c4f5370254c1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"6a51fbb5-5d80-8bc8-208e-455d8851769e");
INSERT INTO SM_EVTDI
	VALUES ("37793517-a5ce-f488-e28d-0cf920cbd652",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"f89c6d10-44bb-d921-7522-8cd382a60d46");
INSERT INTO SM_EVTDI
	VALUES ("f89c6d10-44bb-d921-7522-8cd382a60d46",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("80f805a5-d8fa-b177-53c2-9ea9af43bbdc",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"37793517-a5ce-f488-e28d-0cf920cbd652");
INSERT INTO SM_EVTDI
	VALUES ("137165b8-56ef-7135-0835-237a54d641c3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"80f805a5-d8fa-b177-53c2-9ea9af43bbdc");
INSERT INTO SM_EVTDI
	VALUES ("3d77df50-092e-3f0e-74bc-fda0a3d34077",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"137165b8-56ef-7135-0835-237a54d641c3");
INSERT INTO SM_EVTDI
	VALUES ("380930cf-d0cc-e321-24c7-522950bcabeb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("201c9180-fe5a-7d78-e4d4-162f2711c733",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b95a1a00-40b7-f081-d43b-59d800342cc6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("a211189c-076a-9dc5-c38b-8c3088dee5cb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"380930cf-d0cc-e321-24c7-522950bcabeb");
INSERT INTO SM_EVTDI
	VALUES ("f14f099e-77ff-0436-2dec-c77ee186f094",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"201c9180-fe5a-7d78-e4d4-162f2711c733");
INSERT INTO SM_EVTDI
	VALUES ("0cb5b2a6-fccd-3327-319f-b1c1b92f5a15",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"b95a1a00-40b7-f081-d43b-59d800342cc6");
INSERT INTO SM_LEVT
	VALUES ("5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("59d65030-e343-e026-4b8f-b19fd0a406a6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"cc821c33-dfc2-d2d8-5b68-3be2b423cdca");
INSERT INTO SM_AH
	VALUES ("59d65030-e343-e026-4b8f-b19fd0a406a6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("59d65030-e343-e026-4b8f-b19fd0a406a6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("85060149-8dd9-db76-2280-523e5c35e631",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bfc05df9-9cd9-5add-ea36-c435a0fec465",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"85060149-8dd9-db76-2280-523e5c35e631");
INSERT INTO SM_AH
	VALUES ("bfc05df9-9cd9-5add-ea36-c435a0fec465",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("bfc05df9-9cd9-5add-ea36-c435a0fec465",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("df038968-6e5a-07a8-db0d-47a52711abde",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"bd7456ea-c544-cfc1-7a52-3adf472d6a78");
INSERT INTO SM_AH
	VALUES ("df038968-6e5a-07a8-db0d-47a52711abde",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("df038968-6e5a-07a8-db0d-47a52711abde",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4213574e-fb3d-9b53-2059-0a58cc26466e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"7c56ef1f-473d-1c29-e502-2b3a988a446f");
INSERT INTO SM_AH
	VALUES ("4213574e-fb3d-9b53-2059-0a58cc26466e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("4213574e-fb3d-9b53-2059-0a58cc26466e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4b103de5-d86f-9afb-550e-60b7030b37d2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"583f1d09-5b54-202d-9c11-b6693c1c90ca");
INSERT INTO SM_AH
	VALUES ("4b103de5-d86f-9afb-550e-60b7030b37d2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("4b103de5-d86f-9afb-550e-60b7030b37d2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("b4ed87a2-e362-89b6-14d8-fd09fc6f5a4f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"31a899e1-80c3-74f0-1c1a-24e7c45b1131");
INSERT INTO SM_AH
	VALUES ("b4ed87a2-e362-89b6-14d8-fd09fc6f5a4f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("b4ed87a2-e362-89b6-14d8-fd09fc6f5a4f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f5e7e244-15da-aeb3-1944-667a2efdf012",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"c14217cf-6e9a-c2d1-185e-1433bbfd5363");
INSERT INTO SM_AH
	VALUES ("f5e7e244-15da-aeb3-1944-667a2efdf012",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("f5e7e244-15da-aeb3-1944-667a2efdf012",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("97591846-92a4-c542-0b1a-64d5d6366ca7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"d50c6b61-9d2e-ccf0-8227-e3cbc32f899e");
INSERT INTO SM_AH
	VALUES ("97591846-92a4-c542-0b1a-64d5d6366ca7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("97591846-92a4-c542-0b1a-64d5d6366ca7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc98f2a9-8806-859c-4e64-085ae2c98763",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cedcccb1-6691-1267-cc69-c0d1b498c33e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"fc98f2a9-8806-859c-4e64-085ae2c98763");
INSERT INTO SM_AH
	VALUES ("cedcccb1-6691-1267-cc69-c0d1b498c33e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("cedcccb1-6691-1267-cc69-c0d1b498c33e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("157d9453-775b-f066-1054-1bc35f91d804",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"2badf67e-afb5-9012-1c8e-51c6e2b9719e");
INSERT INTO SM_AH
	VALUES ("157d9453-775b-f066-1054-1bc35f91d804",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("157d9453-775b-f066-1054-1bc35f91d804",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a9feb9a1-c179-8024-222d-11018f1844a1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"8cc04a8d-71e5-6b48-4448-993b2d8bb932");
INSERT INTO SM_AH
	VALUES ("a9feb9a1-c179-8024-222d-11018f1844a1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("a9feb9a1-c179-8024-222d-11018f1844a1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("34419ad5-80aa-43a2-ce3d-5d185493500c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"b073732a-8bb8-363e-e6a6-5dbce01c7399");
INSERT INTO SM_AH
	VALUES ("34419ad5-80aa-43a2-ce3d-5d185493500c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("34419ad5-80aa-43a2-ce3d-5d185493500c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("24380c1c-b862-d25c-9165-16563a1a2abe",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4864b18a-c62a-8de4-6763-390a2e2d95b9",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"24380c1c-b862-d25c-9165-16563a1a2abe");
INSERT INTO SM_AH
	VALUES ("4864b18a-c62a-8de4-6763-390a2e2d95b9",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("4864b18a-c62a-8de4-6763-390a2e2d95b9",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("995f87f5-98a1-e969-0d3c-af0d6acda979",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("739729d3-f5f6-a7f0-82fb-7cceeeca61ba",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"995f87f5-98a1-e969-0d3c-af0d6acda979");
INSERT INTO SM_AH
	VALUES ("739729d3-f5f6-a7f0-82fb-7cceeeca61ba",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("739729d3-f5f6-a7f0-82fb-7cceeeca61ba",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6a7b049d-52be-043d-c7f9-450de126503d",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f90f841c-04c6-d480-b133-f19b845b064b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"6a7b049d-52be-043d-c7f9-450de126503d");
INSERT INTO SM_AH
	VALUES ("f90f841c-04c6-d480-b133-f19b845b064b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("f90f841c-04c6-d480-b133-f19b845b064b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"4e324530-e120-914e-6c5b-c42d47076f02",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"ff9ac5d2-0507-7bcc-310e-49329f2ea220",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("4a1a1977-7755-ec46-f20c-98c01bfd6a58",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"1d4ae534-2f5f-857b-2f6a-e4a52e460736");
INSERT INTO SM_AH
	VALUES ("4a1a1977-7755-ec46-f20c-98c01bfd6a58",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("4a1a1977-7755-ec46-f20c-98c01bfd6a58",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("b67b12e6-b583-9919-59cd-cae7487fdd4d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"85060149-8dd9-db76-2280-523e5c35e631",
	"656b6e2f-2843-8395-3e87-4d6f6c3962d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("db24bdee-69e0-c8c8-2c72-fdede13fff85",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"b67b12e6-b583-9919-59cd-cae7487fdd4d");
INSERT INTO SM_AH
	VALUES ("db24bdee-69e0-c8c8-2c72-fdede13fff85",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("db24bdee-69e0-c8c8-2c72-fdede13fff85",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("b67b12e6-b583-9919-59cd-cae7487fdd4d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("e201610c-0f59-aebd-f9a3-d4d1f19ffa7a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	"239e210b-9d85-4bc5-5c37-66d9890dae94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3744d3fc-a736-4312-3817-eb88ec6a62b8",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"e201610c-0f59-aebd-f9a3-d4d1f19ffa7a");
INSERT INTO SM_AH
	VALUES ("3744d3fc-a736-4312-3817-eb88ec6a62b8",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("3744d3fc-a736-4312-3817-eb88ec6a62b8",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("e201610c-0f59-aebd-f9a3-d4d1f19ffa7a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("faa8cb9b-51c6-857a-4a2a-49767751f0a2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"7c56ef1f-473d-1c29-e502-2b3a988a446f",
	"2baf75cd-2e2a-2dbd-d750-e1ba4a05d227",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("28913b44-e53a-82d4-571e-1eb4d054e7fe",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"faa8cb9b-51c6-857a-4a2a-49767751f0a2");
INSERT INTO SM_AH
	VALUES ("28913b44-e53a-82d4-571e-1eb4d054e7fe",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("28913b44-e53a-82d4-571e-1eb4d054e7fe",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("faa8cb9b-51c6-857a-4a2a-49767751f0a2",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1683693c-2170-1e18-fd96-2358223f7faa",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	"b67f261b-5202-f1c6-a7a4-dec13b1e3563",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ac16eb63-d663-7167-9d0a-91405cb9514e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"1683693c-2170-1e18-fd96-2358223f7faa");
INSERT INTO SM_AH
	VALUES ("ac16eb63-d663-7167-9d0a-91405cb9514e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("ac16eb63-d663-7167-9d0a-91405cb9514e",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("1683693c-2170-1e18-fd96-2358223f7faa",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4a5d2a0f-e4fe-3beb-a913-30e9bc890bb7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	"520573dd-1fa9-a753-a623-4489cd2adc9b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3c6a27b4-f2b1-cf2e-1d8e-0ad64e1c44f3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"4a5d2a0f-e4fe-3beb-a913-30e9bc890bb7");
INSERT INTO SM_AH
	VALUES ("3c6a27b4-f2b1-cf2e-1d8e-0ad64e1c44f3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("3c6a27b4-f2b1-cf2e-1d8e-0ad64e1c44f3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4a5d2a0f-e4fe-3beb-a913-30e9bc890bb7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4894c235-2e95-8f67-3a2d-9ec5f6eeef9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	"e1648e59-23be-8824-7386-c2a4161996b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("51a432a2-ca44-b29d-36c3-e9ae78e4b64d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"4894c235-2e95-8f67-3a2d-9ec5f6eeef9a");
INSERT INTO SM_AH
	VALUES ("51a432a2-ca44-b29d-36c3-e9ae78e4b64d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("51a432a2-ca44-b29d-36c3-e9ae78e4b64d",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("4894c235-2e95-8f67-3a2d-9ec5f6eeef9a",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"fc98f2a9-8806-859c-4e64-085ae2c98763",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("55d43fb2-8230-e86e-cfcd-12a0e2d2b26f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"fc98f2a9-8806-859c-4e64-085ae2c98763",
	"5e6c7031-a62d-c231-d3d8-5593ec973b49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("a16b6983-6839-667e-5da7-9685e9cdaaeb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"55d43fb2-8230-e86e-cfcd-12a0e2d2b26f");
INSERT INTO SM_AH
	VALUES ("a16b6983-6839-667e-5da7-9685e9cdaaeb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("a16b6983-6839-667e-5da7-9685e9cdaaeb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("55d43fb2-8230-e86e-cfcd-12a0e2d2b26f",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"583f1d09-5b54-202d-9c11-b6693c1c90ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a86b0c86-9db0-e60f-3d8d-92578be717ea",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"1742f88b-534b-2496-c298-6890fd03fbd2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("561e490a-7054-3248-0598-7b9bdd9762f7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"a86b0c86-9db0-e60f-3d8d-92578be717ea");
INSERT INTO SM_AH
	VALUES ("561e490a-7054-3248-0598-7b9bdd9762f7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("561e490a-7054-3248-0598-7b9bdd9762f7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("a86b0c86-9db0-e60f-3d8d-92578be717ea",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("c2ba04ea-fa19-6959-1fdd-9513b61de287",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	"c7a03f03-72af-7dc9-d53c-f98ada62f049",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("31a88581-6b1d-4c57-f409-e841fef83aca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"c2ba04ea-fa19-6959-1fdd-9513b61de287");
INSERT INTO SM_AH
	VALUES ("31a88581-6b1d-4c57-f409-e841fef83aca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("31a88581-6b1d-4c57-f409-e841fef83aca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("c2ba04ea-fa19-6959-1fdd-9513b61de287",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("542f7f6b-3f88-9507-754d-e1fad9e255ca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"5009677b-736c-38e9-60d6-9336bcb38af6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b707f12e-c497-5c00-2cce-5befb18ffac3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"542f7f6b-3f88-9507-754d-e1fad9e255ca");
INSERT INTO SM_AH
	VALUES ("b707f12e-c497-5c00-2cce-5befb18ffac3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("b707f12e-c497-5c00-2cce-5befb18ffac3",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("542f7f6b-3f88-9507-754d-e1fad9e255ca",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7163eac3-8d3a-e196-904f-6a04e24e8a87",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"24380c1c-b862-d25c-9165-16563a1a2abe",
	"90d06261-7de7-4041-feb0-b446627e73b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2c652636-45c1-0685-fb56-e04e421baf16",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"7163eac3-8d3a-e196-904f-6a04e24e8a87");
INSERT INTO SM_AH
	VALUES ("2c652636-45c1-0685-fb56-e04e421baf16",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("2c652636-45c1-0685-fb56-e04e421baf16",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("7163eac3-8d3a-e196-904f-6a04e24e8a87",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("26ceef6d-5a96-ce12-fd4e-65436462eea9",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	"8854fb17-ae76-1d13-3f2a-38783da224da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ece5fc1e-746b-afbd-18c8-e763b397eebb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"26ceef6d-5a96-ce12-fd4e-65436462eea9");
INSERT INTO SM_AH
	VALUES ("ece5fc1e-746b-afbd-18c8-e763b397eebb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("ece5fc1e-746b-afbd-18c8-e763b397eebb",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("26ceef6d-5a96-ce12-fd4e-65436462eea9",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"24380c1c-b862-d25c-9165-16563a1a2abe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3ce7aa91-9a6f-e3f4-dafc-ce71c38d5fd6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"b073732a-8bb8-363e-e6a6-5dbce01c7399",
	"02f9b176-e0e7-5d11-87e5-9d1274a72e9a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0f4a9b81-9f4e-fa1d-e549-4303971da1d0",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"3ce7aa91-9a6f-e3f4-dafc-ce71c38d5fd6");
INSERT INTO SM_AH
	VALUES ("0f4a9b81-9f4e-fa1d-e549-4303971da1d0",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("0f4a9b81-9f4e-fa1d-e549-4303971da1d0",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("3ce7aa91-9a6f-e3f4-dafc-ce71c38d5fd6",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"995f87f5-98a1-e969-0d3c-af0d6acda979",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ea6510d2-b11e-42d3-f29b-443aa01b0a4c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"995f87f5-98a1-e969-0d3c-af0d6acda979",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0eda8f1a-6b45-db20-b557-94c929cdb9a7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"ea6510d2-b11e-42d3-f29b-443aa01b0a4c");
INSERT INTO SM_AH
	VALUES ("0eda8f1a-6b45-db20-b557-94c929cdb9a7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("0eda8f1a-6b45-db20-b557-94c929cdb9a7",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("ea6510d2-b11e-42d3-f29b-443aa01b0a4c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"6a7b049d-52be-043d-c7f9-450de126503d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("831d577d-6c13-acf4-9eb3-35f4242c61c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"6a7b049d-52be-043d-c7f9-450de126503d",
	"1ea92787-ef4d-d1ac-2cb2-62cb88466954",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("28d6e7f2-9272-5898-f0f6-654101cb6641",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"831d577d-6c13-acf4-9eb3-35f4242c61c4");
INSERT INTO SM_AH
	VALUES ("28d6e7f2-9272-5898-f0f6-654101cb6641",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("28d6e7f2-9272-5898-f0f6-654101cb6641",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("831d577d-6c13-acf4-9eb3-35f4242c61c4",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f57a4095-6e95-2aa2-c9b1-4c83447e7eac",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	"01ac57b1-a1f6-bf7b-c7a8-655caf9514c4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("69843771-43e1-96b0-2b9c-d01e8b6ca59c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"f57a4095-6e95-2aa2-c9b1-4c83447e7eac");
INSERT INTO SM_AH
	VALUES ("69843771-43e1-96b0-2b9c-d01e8b6ca59c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6");
INSERT INTO SM_ACT
	VALUES ("69843771-43e1-96b0-2b9c-d01e8b6ca59c",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("f57a4095-6e95-2aa2-c9b1-4c83447e7eac",
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	"85060149-8dd9-db76-2280-523e5c35e631",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("e492ee96-5326-95f0-9395-64883ae7c79d",
	8,
	"e9b632a6-6ed4-4c0c-4a17-92abc1920de6",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("5383113c-4bef-baff-56a0-a0d1b7f3c714",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"cc821c33-dfc2-d2d8-5b68-3be2b423cdca",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO GD_NCS
	VALUES ("5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"5383113c-4bef-baff-56a0-a0d1b7f3c714",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5383113c-4bef-baff-56a0-a0d1b7f3c714",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("266d95c4-da3f-10ed-4d1c-03ed44bb32f4",
	752.000000,
	1408.000000,
	"5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO DIM_CON
	VALUES ("a92ce0bd-fdfd-6273-80a3-42e42ff5a737",
	784.000000,
	1360.000000,
	"5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO DIM_CON
	VALUES ("257d88fe-27ea-a40e-1a6b-ed224f8a6da3",
	928.000000,
	1456.000000,
	"5383113c-4bef-baff-56a0-a0d1b7f3c714");
INSERT INTO GD_GE
	VALUES ("23e65e69-d0ad-76f4-faaf-5302193fbc18",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"85060149-8dd9-db76-2280-523e5c35e631",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("23e65e69-d0ad-76f4-faaf-5302193fbc18");
INSERT INTO GD_NCS
	VALUES ("23e65e69-d0ad-76f4-faaf-5302193fbc18");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"23e65e69-d0ad-76f4-faaf-5302193fbc18");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"23e65e69-d0ad-76f4-faaf-5302193fbc18",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("23e65e69-d0ad-76f4-faaf-5302193fbc18",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("bc55da36-f35d-5f73-5508-f3e0e03e88bc",
	2128.000000,
	1616.000000,
	"23e65e69-d0ad-76f4-faaf-5302193fbc18");
INSERT INTO DIM_CON
	VALUES ("e01c8a7d-0b5b-a628-1c85-823ec1dab8a3",
	1712.000000,
	1568.000000,
	"23e65e69-d0ad-76f4-faaf-5302193fbc18");
INSERT INTO GD_GE
	VALUES ("4c3dfd2b-0033-bc0d-3c7d-9205e64625fc",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"bd7456ea-c544-cfc1-7a52-3adf472d6a78",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("4c3dfd2b-0033-bc0d-3c7d-9205e64625fc");
INSERT INTO GD_NCS
	VALUES ("4c3dfd2b-0033-bc0d-3c7d-9205e64625fc");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"4c3dfd2b-0033-bc0d-3c7d-9205e64625fc");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"4c3dfd2b-0033-bc0d-3c7d-9205e64625fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4c3dfd2b-0033-bc0d-3c7d-9205e64625fc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c466aa4a-52d4-c5a2-8629-6917b4d87c60",
	2128.000000,
	1760.000000,
	"4c3dfd2b-0033-bc0d-3c7d-9205e64625fc");
INSERT INTO DIM_CON
	VALUES ("7411be46-520a-96d9-6d23-63ffa7c814fc",
	2128.000000,
	1792.000000,
	"4c3dfd2b-0033-bc0d-3c7d-9205e64625fc");
INSERT INTO GD_GE
	VALUES ("190f9121-cc98-f15a-5376-f524a52a329f",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"7c56ef1f-473d-1c29-e502-2b3a988a446f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("190f9121-cc98-f15a-5376-f524a52a329f");
INSERT INTO GD_NCS
	VALUES ("190f9121-cc98-f15a-5376-f524a52a329f");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"190f9121-cc98-f15a-5376-f524a52a329f");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"190f9121-cc98-f15a-5376-f524a52a329f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("190f9121-cc98-f15a-5376-f524a52a329f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f505e80b-0754-0d11-650c-dfda109a5835",
	2128.000000,
	1920.000000,
	"190f9121-cc98-f15a-5376-f524a52a329f");
INSERT INTO DIM_CON
	VALUES ("7c30d9b2-65e9-7aa1-f0ec-ac8ca047a2a0",
	2128.000000,
	1952.000000,
	"190f9121-cc98-f15a-5376-f524a52a329f");
INSERT INTO GD_GE
	VALUES ("21c42440-a5f5-dc1a-51da-756d35961281",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"583f1d09-5b54-202d-9c11-b6693c1c90ca",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("21c42440-a5f5-dc1a-51da-756d35961281");
INSERT INTO GD_NCS
	VALUES ("21c42440-a5f5-dc1a-51da-756d35961281");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"21c42440-a5f5-dc1a-51da-756d35961281");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"21c42440-a5f5-dc1a-51da-756d35961281",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21c42440-a5f5-dc1a-51da-756d35961281",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("876f0058-dbde-608b-f949-acb1cdacbbbc",
	2592.000000,
	1632.000000,
	"21c42440-a5f5-dc1a-51da-756d35961281");
INSERT INTO GD_GE
	VALUES ("b0ea8ca5-4c85-a25b-001c-b721bd1d30fb",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"31a899e1-80c3-74f0-1c1a-24e7c45b1131",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("b0ea8ca5-4c85-a25b-001c-b721bd1d30fb");
INSERT INTO GD_NCS
	VALUES ("b0ea8ca5-4c85-a25b-001c-b721bd1d30fb");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"b0ea8ca5-4c85-a25b-001c-b721bd1d30fb");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"b0ea8ca5-4c85-a25b-001c-b721bd1d30fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0ea8ca5-4c85-a25b-001c-b721bd1d30fb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6d2698ed-8853-86ad-68d9-65772f0dcfac",
	2128.000000,
	2048.000000,
	"b0ea8ca5-4c85-a25b-001c-b721bd1d30fb");
INSERT INTO DIM_CON
	VALUES ("15193bc6-a5ff-af9e-25f0-bb66a5000fb2",
	2128.000000,
	2080.000000,
	"b0ea8ca5-4c85-a25b-001c-b721bd1d30fb");
INSERT INTO GD_GE
	VALUES ("3db0c945-4896-ef8b-dc09-d7efcda9b8e8",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"c14217cf-6e9a-c2d1-185e-1433bbfd5363",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("3db0c945-4896-ef8b-dc09-d7efcda9b8e8");
INSERT INTO GD_NCS
	VALUES ("3db0c945-4896-ef8b-dc09-d7efcda9b8e8");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"3db0c945-4896-ef8b-dc09-d7efcda9b8e8");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"3db0c945-4896-ef8b-dc09-d7efcda9b8e8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3db0c945-4896-ef8b-dc09-d7efcda9b8e8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2951ac94-6a00-fec9-7e3e-b446d775eff8",
	2400.000000,
	2080.000000,
	"3db0c945-4896-ef8b-dc09-d7efcda9b8e8");
INSERT INTO DIM_CON
	VALUES ("f2eb5d0d-a9d6-65dd-e789-23da6cb2fbf2",
	2608.000000,
	2016.000000,
	"3db0c945-4896-ef8b-dc09-d7efcda9b8e8");
INSERT INTO GD_GE
	VALUES ("33e3717d-80c6-2362-275c-437ed3099cc0",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"d50c6b61-9d2e-ccf0-8227-e3cbc32f899e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("33e3717d-80c6-2362-275c-437ed3099cc0");
INSERT INTO GD_NCS
	VALUES ("33e3717d-80c6-2362-275c-437ed3099cc0");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"33e3717d-80c6-2362-275c-437ed3099cc0");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"33e3717d-80c6-2362-275c-437ed3099cc0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("33e3717d-80c6-2362-275c-437ed3099cc0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("317459f8-d69b-24d6-9d58-cf5392edb040",
	2608.000000,
	1968.000000,
	"33e3717d-80c6-2362-275c-437ed3099cc0");
INSERT INTO DIM_CON
	VALUES ("8d4d6bd9-8e49-26a5-7d46-11602b3d9876",
	2608.000000,
	1872.000000,
	"33e3717d-80c6-2362-275c-437ed3099cc0");
INSERT INTO GD_GE
	VALUES ("e86da620-a71a-ccd3-cc9f-55ee591cfc88",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"fc98f2a9-8806-859c-4e64-085ae2c98763",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("e86da620-a71a-ccd3-cc9f-55ee591cfc88");
INSERT INTO GD_NCS
	VALUES ("e86da620-a71a-ccd3-cc9f-55ee591cfc88");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"e86da620-a71a-ccd3-cc9f-55ee591cfc88");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"e86da620-a71a-ccd3-cc9f-55ee591cfc88",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e86da620-a71a-ccd3-cc9f-55ee591cfc88",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("547edbb2-57dd-eace-a8b6-f84a8a0729ea",
	2608.000000,
	1808.000000,
	"e86da620-a71a-ccd3-cc9f-55ee591cfc88");
INSERT INTO DIM_CON
	VALUES ("52d061b3-ac19-2457-b209-0a4fd8e9ae3c",
	2592.000000,
	1712.000000,
	"e86da620-a71a-ccd3-cc9f-55ee591cfc88");
INSERT INTO GD_GE
	VALUES ("c67c40a5-7dfa-d25e-f970-6b4baf6df8bc",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"2badf67e-afb5-9012-1c8e-51c6e2b9719e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("c67c40a5-7dfa-d25e-f970-6b4baf6df8bc");
INSERT INTO GD_NCS
	VALUES ("c67c40a5-7dfa-d25e-f970-6b4baf6df8bc");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"c67c40a5-7dfa-d25e-f970-6b4baf6df8bc");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"c67c40a5-7dfa-d25e-f970-6b4baf6df8bc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c67c40a5-7dfa-d25e-f970-6b4baf6df8bc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0f6eb881-3818-70e8-7020-856b812e85f1",
	928.000000,
	1776.000000,
	"c67c40a5-7dfa-d25e-f970-6b4baf6df8bc");
INSERT INTO DIM_CON
	VALUES ("11448371-6b6a-02a7-9e02-1258a43109c5",
	928.000000,
	1680.000000,
	"c67c40a5-7dfa-d25e-f970-6b4baf6df8bc");
INSERT INTO GD_GE
	VALUES ("654a7f7b-76e0-fb1f-cc53-73e0ecf544e5",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"8cc04a8d-71e5-6b48-4448-993b2d8bb932",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("654a7f7b-76e0-fb1f-cc53-73e0ecf544e5");
INSERT INTO GD_NCS
	VALUES ("654a7f7b-76e0-fb1f-cc53-73e0ecf544e5");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"654a7f7b-76e0-fb1f-cc53-73e0ecf544e5");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"654a7f7b-76e0-fb1f-cc53-73e0ecf544e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("654a7f7b-76e0-fb1f-cc53-73e0ecf544e5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0d207c75-9069-c96a-69a2-e201af44fd80",
	928.000000,
	1840.000000,
	"654a7f7b-76e0-fb1f-cc53-73e0ecf544e5");
INSERT INTO DIM_CON
	VALUES ("10c53ee1-c5e5-5b47-860d-7938485306bc",
	928.000000,
	1936.000000,
	"654a7f7b-76e0-fb1f-cc53-73e0ecf544e5");
INSERT INTO GD_GE
	VALUES ("ee3ea841-5757-4292-8a2d-9c2ffc0f8245",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"b073732a-8bb8-363e-e6a6-5dbce01c7399",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("ee3ea841-5757-4292-8a2d-9c2ffc0f8245");
INSERT INTO GD_NCS
	VALUES ("ee3ea841-5757-4292-8a2d-9c2ffc0f8245");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"ee3ea841-5757-4292-8a2d-9c2ffc0f8245");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"ee3ea841-5757-4292-8a2d-9c2ffc0f8245",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee3ea841-5757-4292-8a2d-9c2ffc0f8245",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("20bfe6ff-238c-90fc-1631-43e35d8ac036",
	928.000000,
	2016.000000,
	"ee3ea841-5757-4292-8a2d-9c2ffc0f8245");
INSERT INTO DIM_CON
	VALUES ("772631b3-6549-3401-54fe-7005cff2ddd7",
	1072.000000,
	2080.000000,
	"ee3ea841-5757-4292-8a2d-9c2ffc0f8245");
INSERT INTO GD_GE
	VALUES ("3df1cdd3-de53-8231-5ada-2b1f062020a3",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"24380c1c-b862-d25c-9165-16563a1a2abe",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("3df1cdd3-de53-8231-5ada-2b1f062020a3");
INSERT INTO GD_NCS
	VALUES ("3df1cdd3-de53-8231-5ada-2b1f062020a3");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"3df1cdd3-de53-8231-5ada-2b1f062020a3");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"3df1cdd3-de53-8231-5ada-2b1f062020a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3df1cdd3-de53-8231-5ada-2b1f062020a3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("190f83f1-5332-bb89-f15c-5a92c63a98a8",
	928.000000,
	1616.000000,
	"3df1cdd3-de53-8231-5ada-2b1f062020a3");
INSERT INTO DIM_CON
	VALUES ("35732238-e656-c4ef-248d-a9d5ee65c1e3",
	928.000000,
	1536.000000,
	"3df1cdd3-de53-8231-5ada-2b1f062020a3");
INSERT INTO GD_GE
	VALUES ("c5960c73-d604-e7c6-180e-945b7d6de7b9",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"995f87f5-98a1-e969-0d3c-af0d6acda979",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("c5960c73-d604-e7c6-180e-945b7d6de7b9");
INSERT INTO GD_NCS
	VALUES ("c5960c73-d604-e7c6-180e-945b7d6de7b9");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"c5960c73-d604-e7c6-180e-945b7d6de7b9");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"c5960c73-d604-e7c6-180e-945b7d6de7b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c5960c73-d604-e7c6-180e-945b7d6de7b9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7fa46c4b-5454-5a9d-98cb-513521b7f280",
	1280.000000,
	1376.000000,
	"c5960c73-d604-e7c6-180e-945b7d6de7b9");
INSERT INTO DIM_CON
	VALUES ("3270f448-1bbe-5a52-4165-2224625a5e3c",
	1424.000000,
	1456.000000,
	"c5960c73-d604-e7c6-180e-945b7d6de7b9");
INSERT INTO GD_GE
	VALUES ("38ed3a74-9b0b-8e08-e087-0af236007c6d",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"6a7b049d-52be-043d-c7f9-450de126503d",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("38ed3a74-9b0b-8e08-e087-0af236007c6d");
INSERT INTO GD_NCS
	VALUES ("38ed3a74-9b0b-8e08-e087-0af236007c6d");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"38ed3a74-9b0b-8e08-e087-0af236007c6d");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"38ed3a74-9b0b-8e08-e087-0af236007c6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("38ed3a74-9b0b-8e08-e087-0af236007c6d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3866d570-c907-0973-6d8a-2a19df06df5b",
	1424.000000,
	1520.000000,
	"38ed3a74-9b0b-8e08-e087-0af236007c6d");
INSERT INTO DIM_CON
	VALUES ("56e05162-70b4-1936-f335-f4d2bf919922",
	1456.000000,
	1616.000000,
	"38ed3a74-9b0b-8e08-e087-0af236007c6d");
INSERT INTO GD_GE
	VALUES ("40992e73-9657-c27d-a05c-358d3f19c888",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"1d4ae534-2f5f-857b-2f6a-e4a52e460736",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("40992e73-9657-c27d-a05c-358d3f19c888");
INSERT INTO GD_NCS
	VALUES ("40992e73-9657-c27d-a05c-358d3f19c888");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"40992e73-9657-c27d-a05c-358d3f19c888");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"40992e73-9657-c27d-a05c-358d3f19c888",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("40992e73-9657-c27d-a05c-358d3f19c888",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2fb85ecf-897b-e04d-abda-33081d987eac",
	1456.000000,
	1680.000000,
	"40992e73-9657-c27d-a05c-358d3f19c888");
INSERT INTO DIM_CON
	VALUES ("29ccec64-92e3-8fc9-e36a-af81a74b912a",
	1600.000000,
	1728.000000,
	"40992e73-9657-c27d-a05c-358d3f19c888");
INSERT INTO GD_GE
	VALUES ("0e76c3fd-d050-ee17-f550-95181239553c",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"b67b12e6-b583-9919-59cd-cae7487fdd4d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("27946fc2-89fe-2e9e-26ef-54be9aa4b06b",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"27946fc2-89fe-2e9e-26ef-54be9aa4b06b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"27946fc2-89fe-2e9e-26ef-54be9aa4b06b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("27946fc2-89fe-2e9e-26ef-54be9aa4b06b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b0845cbd-1c1c-4334-fa3e-7e05afad4362",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"b0845cbd-1c1c-4334-fa3e-7e05afad4362");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"b0845cbd-1c1c-4334-fa3e-7e05afad4362",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0845cbd-1c1c-4334-fa3e-7e05afad4362",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ce6d2942-e929-cbfb-ffa7-d3a377586d2c",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ce6d2942-e929-cbfb-ffa7-d3a377586d2c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ce6d2942-e929-cbfb-ffa7-d3a377586d2c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ce6d2942-e929-cbfb-ffa7-d3a377586d2c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("66ee5168-b5c0-551f-1803-cd04a7670269",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000",
	"6da9b1b9-fc46-c6ce-1f80-ab5daee95ab6",
	"0c16b112-2a1a-9076-4c93-f7f31b2e8370");
INSERT INTO GD_LS
	VALUES ("8e6a9a28-8ff6-54f7-f473-688b193b7121",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"66ee5168-b5c0-551f-1803-cd04a7670269",
	"0c16b112-2a1a-9076-4c93-f7f31b2e8370",
	"dbf9ecfe-b8ec-83e1-a84e-8094df0d398d");
INSERT INTO GD_LS
	VALUES ("3d996a99-0750-c6d9-ca85-a90dba164484",
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"8e6a9a28-8ff6-54f7-f473-688b193b7121",
	"dbf9ecfe-b8ec-83e1-a84e-8094df0d398d",
	"541a5199-a3e3-3086-b09b-920f5d6e9cc1");
INSERT INTO DIM_WAY
	VALUES ("6da9b1b9-fc46-c6ce-1f80-ab5daee95ab6",
	2128.000000,
	1616.000000,
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0c16b112-2a1a-9076-4c93-f7f31b2e8370",
	2176.000000,
	1616.000000,
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000",
	"6da9b1b9-fc46-c6ce-1f80-ab5daee95ab6");
INSERT INTO DIM_WAY
	VALUES ("dbf9ecfe-b8ec-83e1-a84e-8094df0d398d",
	2176.000000,
	1760.000000,
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000",
	"0c16b112-2a1a-9076-4c93-f7f31b2e8370");
INSERT INTO DIM_WAY
	VALUES ("541a5199-a3e3-3086-b09b-920f5d6e9cc1",
	2128.000000,
	1760.000000,
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000",
	"dbf9ecfe-b8ec-83e1-a84e-8094df0d398d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0e76c3fd-d050-ee17-f550-95181239553c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0e76c3fd-d050-ee17-f550-95181239553c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bc55da36-f35d-5f73-5508-f3e0e03e88bc",
	"c466aa4a-52d4-c5a2-8629-6917b4d87c60",
	"0e76c3fd-d050-ee17-f550-95181239553c");
INSERT INTO GD_GE
	VALUES ("b641e488-f4f1-6735-f781-dc0da89f4deb",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"e201610c-0f59-aebd-f9a3-d4d1f19ffa7a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dc8385e7-e336-6f7a-4651-2db6ed61d855",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dc8385e7-e336-6f7a-4651-2db6ed61d855");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dc8385e7-e336-6f7a-4651-2db6ed61d855",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dc8385e7-e336-6f7a-4651-2db6ed61d855",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cf2d3263-6255-a91d-e448-9ff28f703ba7",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"cf2d3263-6255-a91d-e448-9ff28f703ba7");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"cf2d3263-6255-a91d-e448-9ff28f703ba7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf2d3263-6255-a91d-e448-9ff28f703ba7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("df0e02a7-4a20-09fe-9d0e-bec7e413a2c1",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"df0e02a7-4a20-09fe-9d0e-bec7e413a2c1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"df0e02a7-4a20-09fe-9d0e-bec7e413a2c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("df0e02a7-4a20-09fe-9d0e-bec7e413a2c1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("938f417d-67cf-455b-6107-61ba7739af98",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000",
	"a95ed9ed-b4ef-31e3-677a-a189a96ab26c",
	"fdf2bbb4-b78d-f0e8-59c5-6757ab63a0e7");
INSERT INTO GD_LS
	VALUES ("0c21f900-4ab7-724d-15d9-2e542c8faf81",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"938f417d-67cf-455b-6107-61ba7739af98",
	"fdf2bbb4-b78d-f0e8-59c5-6757ab63a0e7",
	"8ad26d4f-12e0-2d1b-44fb-8a97449603a4");
INSERT INTO GD_LS
	VALUES ("dafc1a48-c276-d2b3-3a69-70a74e015a2f",
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"0c21f900-4ab7-724d-15d9-2e542c8faf81",
	"8ad26d4f-12e0-2d1b-44fb-8a97449603a4",
	"0eda3b8f-3de9-e771-0040-4bfa63be7bac");
INSERT INTO DIM_WAY
	VALUES ("a95ed9ed-b4ef-31e3-677a-a189a96ab26c",
	2128.000000,
	1792.000000,
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fdf2bbb4-b78d-f0e8-59c5-6757ab63a0e7",
	2176.000000,
	1792.000000,
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000",
	"a95ed9ed-b4ef-31e3-677a-a189a96ab26c");
INSERT INTO DIM_WAY
	VALUES ("8ad26d4f-12e0-2d1b-44fb-8a97449603a4",
	2176.000000,
	1920.000000,
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000",
	"fdf2bbb4-b78d-f0e8-59c5-6757ab63a0e7");
INSERT INTO DIM_WAY
	VALUES ("0eda3b8f-3de9-e771-0040-4bfa63be7bac",
	2128.000000,
	1920.000000,
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000",
	"8ad26d4f-12e0-2d1b-44fb-8a97449603a4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b641e488-f4f1-6735-f781-dc0da89f4deb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b641e488-f4f1-6735-f781-dc0da89f4deb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7411be46-520a-96d9-6d23-63ffa7c814fc",
	"f505e80b-0754-0d11-650c-dfda109a5835",
	"b641e488-f4f1-6735-f781-dc0da89f4deb");
INSERT INTO GD_GE
	VALUES ("ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"faa8cb9b-51c6-857a-4a2a-49767751f0a2",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c42db6c2-33e2-a5dc-bb63-d734d573cab5",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c42db6c2-33e2-a5dc-bb63-d734d573cab5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c42db6c2-33e2-a5dc-bb63-d734d573cab5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c42db6c2-33e2-a5dc-bb63-d734d573cab5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4aa4e6ed-653f-03c1-cdfc-14521df717ad",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"4aa4e6ed-653f-03c1-cdfc-14521df717ad");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"4aa4e6ed-653f-03c1-cdfc-14521df717ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4aa4e6ed-653f-03c1-cdfc-14521df717ad",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7e9ee6e0-9d8c-e419-c02d-160acfff166b",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7e9ee6e0-9d8c-e419-c02d-160acfff166b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7e9ee6e0-9d8c-e419-c02d-160acfff166b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7e9ee6e0-9d8c-e419-c02d-160acfff166b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8fcb9ee5-480c-35bd-ca54-41b44aea0c5c",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000",
	"d57f6e01-e239-1e13-d47f-3f124dfe5e64",
	"0e9369c6-7aaa-d4d5-3d83-22d6fb74be96");
INSERT INTO GD_LS
	VALUES ("8b065c53-2fae-6dea-8b96-9e04d3018848",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"8fcb9ee5-480c-35bd-ca54-41b44aea0c5c",
	"0e9369c6-7aaa-d4d5-3d83-22d6fb74be96",
	"67c004a8-1cb3-633c-20f4-be4fcb18e65e");
INSERT INTO GD_LS
	VALUES ("b0d5630d-6402-91cd-8a86-637f7f53439c",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"8b065c53-2fae-6dea-8b96-9e04d3018848",
	"67c004a8-1cb3-633c-20f4-be4fcb18e65e",
	"083024ea-8457-0e56-8129-6a496a8fab09");
INSERT INTO DIM_WAY
	VALUES ("d57f6e01-e239-1e13-d47f-3f124dfe5e64",
	2128.000000,
	1952.000000,
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0e9369c6-7aaa-d4d5-3d83-22d6fb74be96",
	2176.000000,
	1952.000000,
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000",
	"d57f6e01-e239-1e13-d47f-3f124dfe5e64");
INSERT INTO DIM_WAY
	VALUES ("67c004a8-1cb3-633c-20f4-be4fcb18e65e",
	2176.000000,
	2048.000000,
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000",
	"0e9369c6-7aaa-d4d5-3d83-22d6fb74be96");
INSERT INTO DIM_WAY
	VALUES ("083024ea-8457-0e56-8129-6a496a8fab09",
	2128.000000,
	2048.000000,
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000",
	"67c004a8-1cb3-633c-20f4-be4fcb18e65e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7c30d9b2-65e9-7aa1-f0ec-ac8ca047a2a0",
	"6d2698ed-8853-86ad-68d9-65772f0dcfac",
	"ef3d7d20-cfb2-a1cf-8d84-3bbd1e010302");
INSERT INTO GD_GE
	VALUES ("7cc4cce0-308c-60ff-228e-31b58330916a",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"1683693c-2170-1e18-fd96-2358223f7faa",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("7cc4cce0-308c-60ff-228e-31b58330916a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a73b2da2-4f83-dc20-70bb-c6f9f228cf7a",
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a73b2da2-4f83-dc20-70bb-c6f9f228cf7a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a73b2da2-4f83-dc20-70bb-c6f9f228cf7a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a73b2da2-4f83-dc20-70bb-c6f9f228cf7a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c62f3716-1a1c-91eb-ca1d-55e19ded9e43",
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"c62f3716-1a1c-91eb-ca1d-55e19ded9e43");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"c62f3716-1a1c-91eb-ca1d-55e19ded9e43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c62f3716-1a1c-91eb-ca1d-55e19ded9e43",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8d6630b7-f11b-bdf9-3ad0-03b549088738",
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8d6630b7-f11b-bdf9-3ad0-03b549088738");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8d6630b7-f11b-bdf9-3ad0-03b549088738",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8d6630b7-f11b-bdf9-3ad0-03b549088738",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e5a00462-d866-8f15-d2a1-98a81fbc9a1f",
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	"00000000-0000-0000-0000-000000000000",
	"751b0dba-7b18-e20c-ecdb-137637b2ef20",
	"37706dca-ec0b-faf9-da60-75599524e28c");
INSERT INTO DIM_WAY
	VALUES ("751b0dba-7b18-e20c-ecdb-137637b2ef20",
	2128.000000,
	2080.000000,
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("37706dca-ec0b-faf9-da60-75599524e28c",
	2400.000000,
	2080.000000,
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	"00000000-0000-0000-0000-000000000000",
	"751b0dba-7b18-e20c-ecdb-137637b2ef20");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7cc4cce0-308c-60ff-228e-31b58330916a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7cc4cce0-308c-60ff-228e-31b58330916a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("15193bc6-a5ff-af9e-25f0-bb66a5000fb2",
	"2951ac94-6a00-fec9-7e3e-b446d775eff8",
	"7cc4cce0-308c-60ff-228e-31b58330916a");
INSERT INTO GD_GE
	VALUES ("4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"4a5d2a0f-e4fe-3beb-a913-30e9bc890bb7",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ce37950e-2780-03eb-d39d-b226eb6fb85e",
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ce37950e-2780-03eb-d39d-b226eb6fb85e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ce37950e-2780-03eb-d39d-b226eb6fb85e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ce37950e-2780-03eb-d39d-b226eb6fb85e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c37f3709-ab68-8884-28ca-e2ee44d3f30b",
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"c37f3709-ab68-8884-28ca-e2ee44d3f30b");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"c37f3709-ab68-8884-28ca-e2ee44d3f30b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c37f3709-ab68-8884-28ca-e2ee44d3f30b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b82a2246-51cc-592a-f98f-e23a967d539b",
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b82a2246-51cc-592a-f98f-e23a967d539b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b82a2246-51cc-592a-f98f-e23a967d539b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b82a2246-51cc-592a-f98f-e23a967d539b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ef57074d-1069-01d6-9b5c-ae7df5abc9d9",
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"00000000-0000-0000-0000-000000000000",
	"48d50a9c-fc1a-368a-8981-934272f0fe71",
	"1771ebcd-35f6-c9c1-e35c-ec83772477f3");
INSERT INTO DIM_WAY
	VALUES ("48d50a9c-fc1a-368a-8981-934272f0fe71",
	2608.000000,
	2016.000000,
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("1771ebcd-35f6-c9c1-e35c-ec83772477f3",
	2608.000000,
	1968.000000,
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"00000000-0000-0000-0000-000000000000",
	"48d50a9c-fc1a-368a-8981-934272f0fe71");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4f40d430-e98a-153d-dfa3-42f2789b50c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4f40d430-e98a-153d-dfa3-42f2789b50c5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f2eb5d0d-a9d6-65dd-e789-23da6cb2fbf2",
	"317459f8-d69b-24d6-9d58-cf5392edb040",
	"4f40d430-e98a-153d-dfa3-42f2789b50c5");
INSERT INTO GD_GE
	VALUES ("b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"4894c235-2e95-8f67-3a2d-9ec5f6eeef9a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f0e92948-d2e3-e64f-f5c3-bc5a61839633",
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f0e92948-d2e3-e64f-f5c3-bc5a61839633");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f0e92948-d2e3-e64f-f5c3-bc5a61839633",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f0e92948-d2e3-e64f-f5c3-bc5a61839633",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("97b405d7-b309-a32b-154d-8ed66eb5dca2",
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"97b405d7-b309-a32b-154d-8ed66eb5dca2");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"97b405d7-b309-a32b-154d-8ed66eb5dca2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("97b405d7-b309-a32b-154d-8ed66eb5dca2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cc91c9c5-8188-e876-484a-118e31b7f84f",
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cc91c9c5-8188-e876-484a-118e31b7f84f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cc91c9c5-8188-e876-484a-118e31b7f84f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc91c9c5-8188-e876-484a-118e31b7f84f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("839e494f-8e77-d20b-ef34-26d15d027425",
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"00000000-0000-0000-0000-000000000000",
	"8d844797-1706-52f4-03c0-8cb32ca3bd35",
	"749aa39f-34c0-956f-9352-136f42a4d44a");
INSERT INTO DIM_WAY
	VALUES ("8d844797-1706-52f4-03c0-8cb32ca3bd35",
	2608.000000,
	1872.000000,
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("749aa39f-34c0-956f-9352-136f42a4d44a",
	2608.000000,
	1808.000000,
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"00000000-0000-0000-0000-000000000000",
	"8d844797-1706-52f4-03c0-8cb32ca3bd35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b5a8389b-fe5a-e732-1408-f63de8b33ed7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8d4d6bd9-8e49-26a5-7d46-11602b3d9876",
	"547edbb2-57dd-eace-a8b6-f84a8a0729ea",
	"b5a8389b-fe5a-e732-1408-f63de8b33ed7");
INSERT INTO GD_GE
	VALUES ("fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"55d43fb2-8230-e86e-cfcd-12a0e2d2b26f",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("31757035-2228-6e8d-0d21-e0bd5c68bbc6",
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"31757035-2228-6e8d-0d21-e0bd5c68bbc6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"31757035-2228-6e8d-0d21-e0bd5c68bbc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31757035-2228-6e8d-0d21-e0bd5c68bbc6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("180a6d8a-b03f-0040-2628-d5b2f8646aaa",
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"180a6d8a-b03f-0040-2628-d5b2f8646aaa");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"180a6d8a-b03f-0040-2628-d5b2f8646aaa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("180a6d8a-b03f-0040-2628-d5b2f8646aaa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f4625853-9bb5-f3a5-6251-7d0ceb6f3e4b",
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f4625853-9bb5-f3a5-6251-7d0ceb6f3e4b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f4625853-9bb5-f3a5-6251-7d0ceb6f3e4b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4625853-9bb5-f3a5-6251-7d0ceb6f3e4b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6095dfc7-c81a-3198-8f65-fc74ab98d460",
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"00000000-0000-0000-0000-000000000000",
	"9c566cab-19db-b591-c58f-17c573c185e1",
	"8bfc1a64-1598-fa00-5eab-783644896490");
INSERT INTO DIM_WAY
	VALUES ("9c566cab-19db-b591-c58f-17c573c185e1",
	2592.000000,
	1712.000000,
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8bfc1a64-1598-fa00-5eab-783644896490",
	2592.000000,
	1632.000000,
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"00000000-0000-0000-0000-000000000000",
	"9c566cab-19db-b591-c58f-17c573c185e1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fc0bf986-7fad-148c-2b95-aad5df39eaec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fc0bf986-7fad-148c-2b95-aad5df39eaec",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("52d061b3-ac19-2457-b209-0a4fd8e9ae3c",
	"876f0058-dbde-608b-f949-acb1cdacbbbc",
	"fc0bf986-7fad-148c-2b95-aad5df39eaec");
INSERT INTO GD_GE
	VALUES ("71f86657-0834-2206-7ae7-939dc0e4a71b",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"a86b0c86-9db0-e60f-3d8d-92578be717ea",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("71f86657-0834-2206-7ae7-939dc0e4a71b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("96925eac-0a43-c0f1-040c-1bebabb789a7",
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"96925eac-0a43-c0f1-040c-1bebabb789a7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"96925eac-0a43-c0f1-040c-1bebabb789a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("96925eac-0a43-c0f1-040c-1bebabb789a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d435641c-b86a-bb41-fb4d-28d269a386a7",
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"d435641c-b86a-bb41-fb4d-28d269a386a7");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"d435641c-b86a-bb41-fb4d-28d269a386a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d435641c-b86a-bb41-fb4d-28d269a386a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8dc73112-96ea-1fe7-2c1b-f5afdf40bdb6",
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8dc73112-96ea-1fe7-2c1b-f5afdf40bdb6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8dc73112-96ea-1fe7-2c1b-f5afdf40bdb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8dc73112-96ea-1fe7-2c1b-f5afdf40bdb6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c3436e20-e49b-c7b2-a211-3ba9f7e7f9db",
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	"00000000-0000-0000-0000-000000000000",
	"92d4ca4b-ad5a-6335-4400-177e62979a43",
	"03e29471-518a-10ae-c4db-c6b515dd8724");
INSERT INTO DIM_WAY
	VALUES ("92d4ca4b-ad5a-6335-4400-177e62979a43",
	928.000000,
	1776.000000,
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("03e29471-518a-10ae-c4db-c6b515dd8724",
	928.000000,
	1840.000000,
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	"00000000-0000-0000-0000-000000000000",
	"92d4ca4b-ad5a-6335-4400-177e62979a43");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"71f86657-0834-2206-7ae7-939dc0e4a71b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("71f86657-0834-2206-7ae7-939dc0e4a71b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0f6eb881-3818-70e8-7020-856b812e85f1",
	"0d207c75-9069-c96a-69a2-e201af44fd80",
	"71f86657-0834-2206-7ae7-939dc0e4a71b");
INSERT INTO GD_GE
	VALUES ("1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"c2ba04ea-fa19-6959-1fdd-9513b61de287",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4121e8a7-e6e6-94f8-af68-769ad8314d45",
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4121e8a7-e6e6-94f8-af68-769ad8314d45");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4121e8a7-e6e6-94f8-af68-769ad8314d45",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4121e8a7-e6e6-94f8-af68-769ad8314d45",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("67d474d2-a79b-410f-d1f7-19967254f5df",
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"67d474d2-a79b-410f-d1f7-19967254f5df");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"67d474d2-a79b-410f-d1f7-19967254f5df",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("67d474d2-a79b-410f-d1f7-19967254f5df",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ad828b7f-e20d-8e15-6889-4e582e93d6f9",
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ad828b7f-e20d-8e15-6889-4e582e93d6f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ad828b7f-e20d-8e15-6889-4e582e93d6f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ad828b7f-e20d-8e15-6889-4e582e93d6f9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0c9e398d-c32c-82ae-dd5f-c0506c8e48b9",
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"00000000-0000-0000-0000-000000000000",
	"6d713f7a-6e96-f232-d1f3-d91a9893b762",
	"192f93f0-c4cf-fb69-5ee7-6050b29f9d1a");
INSERT INTO DIM_WAY
	VALUES ("6d713f7a-6e96-f232-d1f3-d91a9893b762",
	928.000000,
	1936.000000,
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("192f93f0-c4cf-fb69-5ee7-6050b29f9d1a",
	928.000000,
	2016.000000,
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"00000000-0000-0000-0000-000000000000",
	"6d713f7a-6e96-f232-d1f3-d91a9893b762");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("10c53ee1-c5e5-5b47-860d-7938485306bc",
	"20bfe6ff-238c-90fc-1631-43e35d8ac036",
	"1c9227a2-06a6-5a6b-0cf7-93c323c1bdb2");
INSERT INTO GD_GE
	VALUES ("3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"542f7f6b-3f88-9507-754d-e1fad9e255ca",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e1b10d98-fcd0-a8c8-dff3-4110176b1599",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e1b10d98-fcd0-a8c8-dff3-4110176b1599");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e1b10d98-fcd0-a8c8-dff3-4110176b1599",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e1b10d98-fcd0-a8c8-dff3-4110176b1599",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9b72591d-4c2e-0514-2ed3-07d3d6fb8dce",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"9b72591d-4c2e-0514-2ed3-07d3d6fb8dce");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"9b72591d-4c2e-0514-2ed3-07d3d6fb8dce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b72591d-4c2e-0514-2ed3-07d3d6fb8dce",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d30cd200-b1fe-9165-f650-fed2a2c399f2",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d30cd200-b1fe-9165-f650-fed2a2c399f2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d30cd200-b1fe-9165-f650-fed2a2c399f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d30cd200-b1fe-9165-f650-fed2a2c399f2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("65796f91-05b0-1dbb-942e-ff0ec7742b3d",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"795b6610-f147-2d2b-68b3-0c8f51213127",
	"459ad984-e351-6265-d647-959dc7f1d451");
INSERT INTO GD_LS
	VALUES ("f735c5ab-d03b-14a8-0576-9508367642d0",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"65796f91-05b0-1dbb-942e-ff0ec7742b3d",
	"459ad984-e351-6265-d647-959dc7f1d451",
	"441a44b0-e058-88ad-a529-366f0854e8b8");
INSERT INTO GD_LS
	VALUES ("1f6b16cd-a0f7-404f-5baa-358e9d736d57",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"f735c5ab-d03b-14a8-0576-9508367642d0",
	"441a44b0-e058-88ad-a529-366f0854e8b8",
	"b2179cb3-e00a-41f8-5983-82ff701609cd");
INSERT INTO GD_LS
	VALUES ("778e829d-d9c7-dac4-fd1d-b4ca1091bb4c",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"1f6b16cd-a0f7-404f-5baa-358e9d736d57",
	"b2179cb3-e00a-41f8-5983-82ff701609cd",
	"c0a2bc1a-2877-3bc9-105d-3e00c17515b1");
INSERT INTO DIM_WAY
	VALUES ("795b6610-f147-2d2b-68b3-0c8f51213127",
	752.000000,
	1408.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("459ad984-e351-6265-d647-959dc7f1d451",
	624.000000,
	1408.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"795b6610-f147-2d2b-68b3-0c8f51213127");
INSERT INTO DIM_WAY
	VALUES ("441a44b0-e058-88ad-a529-366f0854e8b8",
	624.000000,
	1328.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"459ad984-e351-6265-d647-959dc7f1d451");
INSERT INTO DIM_WAY
	VALUES ("b2179cb3-e00a-41f8-5983-82ff701609cd",
	784.000000,
	1328.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"441a44b0-e058-88ad-a529-366f0854e8b8");
INSERT INTO DIM_WAY
	VALUES ("c0a2bc1a-2877-3bc9-105d-3e00c17515b1",
	784.000000,
	1360.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000",
	"b2179cb3-e00a-41f8-5983-82ff701609cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("266d95c4-da3f-10ed-4d1c-03ed44bb32f4",
	"a92ce0bd-fdfd-6273-80a3-42e42ff5a737",
	"3cec5e1c-c5f0-b2a8-c305-4e4a7ff0ab1f");
INSERT INTO GD_GE
	VALUES ("caca263a-498c-d159-ab99-a0101b681368",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"7163eac3-8d3a-e196-904f-6a04e24e8a87",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("caca263a-498c-d159-ab99-a0101b681368",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3de78c52-4e21-74ac-9873-64eb419a5bca",
	"caca263a-498c-d159-ab99-a0101b681368",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3de78c52-4e21-74ac-9873-64eb419a5bca");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3de78c52-4e21-74ac-9873-64eb419a5bca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3de78c52-4e21-74ac-9873-64eb419a5bca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fbc961cb-67a4-a553-d5a2-184430622d9d",
	"caca263a-498c-d159-ab99-a0101b681368",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"fbc961cb-67a4-a553-d5a2-184430622d9d");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"fbc961cb-67a4-a553-d5a2-184430622d9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fbc961cb-67a4-a553-d5a2-184430622d9d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("341dd256-c38e-706a-9bae-23f06c878119",
	"caca263a-498c-d159-ab99-a0101b681368",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"341dd256-c38e-706a-9bae-23f06c878119");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"341dd256-c38e-706a-9bae-23f06c878119",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("341dd256-c38e-706a-9bae-23f06c878119",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f7c57209-0a4c-1b5b-0150-6acf205ed1c1",
	"caca263a-498c-d159-ab99-a0101b681368",
	"00000000-0000-0000-0000-000000000000",
	"4b131f2c-fdee-1d1f-613e-17a2f716cf5a",
	"61892f20-a217-8157-19b1-61e6fbe3a768");
INSERT INTO DIM_WAY
	VALUES ("4b131f2c-fdee-1d1f-613e-17a2f716cf5a",
	928.000000,
	1616.000000,
	"caca263a-498c-d159-ab99-a0101b681368",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("61892f20-a217-8157-19b1-61e6fbe3a768",
	928.000000,
	1680.000000,
	"caca263a-498c-d159-ab99-a0101b681368",
	"00000000-0000-0000-0000-000000000000",
	"4b131f2c-fdee-1d1f-613e-17a2f716cf5a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"caca263a-498c-d159-ab99-a0101b681368",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caca263a-498c-d159-ab99-a0101b681368",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("190f83f1-5332-bb89-f15c-5a92c63a98a8",
	"11448371-6b6a-02a7-9e02-1258a43109c5",
	"caca263a-498c-d159-ab99-a0101b681368");
INSERT INTO GD_GE
	VALUES ("75716161-aa55-5653-0a30-ed3fda25a49b",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"26ceef6d-5a96-ce12-fd4e-65436462eea9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("75716161-aa55-5653-0a30-ed3fda25a49b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b31727d7-b906-dda7-d17d-9bbf76a8eb30",
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b31727d7-b906-dda7-d17d-9bbf76a8eb30");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b31727d7-b906-dda7-d17d-9bbf76a8eb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b31727d7-b906-dda7-d17d-9bbf76a8eb30",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6d9f0824-fd9e-4fd5-1265-a773ece8112a",
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"6d9f0824-fd9e-4fd5-1265-a773ece8112a");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"6d9f0824-fd9e-4fd5-1265-a773ece8112a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d9f0824-fd9e-4fd5-1265-a773ece8112a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a0152828-ce79-445f-e3e1-1fb775278e0b",
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a0152828-ce79-445f-e3e1-1fb775278e0b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a0152828-ce79-445f-e3e1-1fb775278e0b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a0152828-ce79-445f-e3e1-1fb775278e0b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("7d6d13f8-447e-565d-04db-b9b1c0750634",
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	"00000000-0000-0000-0000-000000000000",
	"c29ef35c-db9e-d2d1-309e-c3ae30b3d3f3",
	"98397467-5ff8-64d2-6fdd-8671eb961bec");
INSERT INTO DIM_WAY
	VALUES ("c29ef35c-db9e-d2d1-309e-c3ae30b3d3f3",
	928.000000,
	1456.000000,
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("98397467-5ff8-64d2-6fdd-8671eb961bec",
	928.000000,
	1536.000000,
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	"00000000-0000-0000-0000-000000000000",
	"c29ef35c-db9e-d2d1-309e-c3ae30b3d3f3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"75716161-aa55-5653-0a30-ed3fda25a49b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("75716161-aa55-5653-0a30-ed3fda25a49b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("257d88fe-27ea-a40e-1a6b-ed224f8a6da3",
	"35732238-e656-c4ef-248d-a9d5ee65c1e3",
	"75716161-aa55-5653-0a30-ed3fda25a49b");
INSERT INTO GD_GE
	VALUES ("d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"3ce7aa91-9a6f-e3f4-dafc-ce71c38d5fd6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("aa8eea07-f359-26ba-6afd-4912707f4f52",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"aa8eea07-f359-26ba-6afd-4912707f4f52");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"aa8eea07-f359-26ba-6afd-4912707f4f52",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aa8eea07-f359-26ba-6afd-4912707f4f52",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e180b4ea-d08b-2f68-7b42-4bde079e3af4",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"e180b4ea-d08b-2f68-7b42-4bde079e3af4");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"e180b4ea-d08b-2f68-7b42-4bde079e3af4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e180b4ea-d08b-2f68-7b42-4bde079e3af4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("369330f6-722a-ef5b-0a92-3ad644459da0",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"369330f6-722a-ef5b-0a92-3ad644459da0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"369330f6-722a-ef5b-0a92-3ad644459da0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("369330f6-722a-ef5b-0a92-3ad644459da0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4c7cccaa-2ea7-f9fd-b1c7-6cd360652f35",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000",
	"2177f10e-69cd-0cad-0fd1-6b853888ab34",
	"3baff6ce-9f19-5aa5-d947-0dd0bbe51083");
INSERT INTO GD_LS
	VALUES ("1ac64b4c-623f-0ce1-0cc7-325149a4c2d8",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"4c7cccaa-2ea7-f9fd-b1c7-6cd360652f35",
	"3baff6ce-9f19-5aa5-d947-0dd0bbe51083",
	"64dff344-d817-79dc-89d9-b90584e798f2");
INSERT INTO GD_LS
	VALUES ("99d3394c-65fb-7b04-b167-d3bc0636c780",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"1ac64b4c-623f-0ce1-0cc7-325149a4c2d8",
	"64dff344-d817-79dc-89d9-b90584e798f2",
	"fb76ab07-7ef4-bb20-0b4f-530ceca64685");
INSERT INTO DIM_WAY
	VALUES ("2177f10e-69cd-0cad-0fd1-6b853888ab34",
	1072.000000,
	2080.000000,
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3baff6ce-9f19-5aa5-d947-0dd0bbe51083",
	1168.000000,
	2080.000000,
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000",
	"2177f10e-69cd-0cad-0fd1-6b853888ab34");
INSERT INTO DIM_WAY
	VALUES ("64dff344-d817-79dc-89d9-b90584e798f2",
	1168.000000,
	1376.000000,
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000",
	"3baff6ce-9f19-5aa5-d947-0dd0bbe51083");
INSERT INTO DIM_WAY
	VALUES ("fb76ab07-7ef4-bb20-0b4f-530ceca64685",
	1280.000000,
	1376.000000,
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000",
	"64dff344-d817-79dc-89d9-b90584e798f2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d21cbe42-76bc-9c51-a8c9-f6bbfa668809",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("772631b3-6549-3401-54fe-7005cff2ddd7",
	"7fa46c4b-5454-5a9d-98cb-513521b7f280",
	"d21cbe42-76bc-9c51-a8c9-f6bbfa668809");
INSERT INTO GD_GE
	VALUES ("caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"ea6510d2-b11e-42d3-f29b-443aa01b0a4c",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("af8678d4-b493-5778-a6f5-f7ba1e4c2c35",
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"af8678d4-b493-5778-a6f5-f7ba1e4c2c35");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"af8678d4-b493-5778-a6f5-f7ba1e4c2c35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("af8678d4-b493-5778-a6f5-f7ba1e4c2c35",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd2f40a5-316e-0229-814f-8b31027e395c",
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"fd2f40a5-316e-0229-814f-8b31027e395c");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"fd2f40a5-316e-0229-814f-8b31027e395c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd2f40a5-316e-0229-814f-8b31027e395c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("760fbf8b-33dc-fff2-c4b5-4289a8d1ba1e",
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"760fbf8b-33dc-fff2-c4b5-4289a8d1ba1e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"760fbf8b-33dc-fff2-c4b5-4289a8d1ba1e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("760fbf8b-33dc-fff2-c4b5-4289a8d1ba1e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e75efa8c-4411-69d1-a367-449ef940f249",
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"00000000-0000-0000-0000-000000000000",
	"79569880-6e69-6677-89c3-24d5cee2df41",
	"3349c70e-cdbf-f28e-e64a-89f8d8d51d1f");
INSERT INTO DIM_WAY
	VALUES ("79569880-6e69-6677-89c3-24d5cee2df41",
	1424.000000,
	1456.000000,
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3349c70e-cdbf-f28e-e64a-89f8d8d51d1f",
	1424.000000,
	1520.000000,
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"00000000-0000-0000-0000-000000000000",
	"79569880-6e69-6677-89c3-24d5cee2df41");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("caab229d-6f0b-6bd0-898a-f95ad4ffbbd0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3270f448-1bbe-5a52-4165-2224625a5e3c",
	"3866d570-c907-0973-6d8a-2a19df06df5b",
	"caab229d-6f0b-6bd0-898a-f95ad4ffbbd0");
INSERT INTO GD_GE
	VALUES ("b298de56-67c7-3b01-9139-44d55d49762d",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"831d577d-6c13-acf4-9eb3-35f4242c61c4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("b298de56-67c7-3b01-9139-44d55d49762d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4585e3a4-e330-eb5b-5b78-75a43fcb24f6",
	"b298de56-67c7-3b01-9139-44d55d49762d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4585e3a4-e330-eb5b-5b78-75a43fcb24f6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4585e3a4-e330-eb5b-5b78-75a43fcb24f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4585e3a4-e330-eb5b-5b78-75a43fcb24f6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10197459-2e1f-9cc2-34f8-b5c2b73aed34",
	"b298de56-67c7-3b01-9139-44d55d49762d",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"10197459-2e1f-9cc2-34f8-b5c2b73aed34");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"10197459-2e1f-9cc2-34f8-b5c2b73aed34",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10197459-2e1f-9cc2-34f8-b5c2b73aed34",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7f162905-a3bb-776a-dff3-2ab4421d17e2",
	"b298de56-67c7-3b01-9139-44d55d49762d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7f162905-a3bb-776a-dff3-2ab4421d17e2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7f162905-a3bb-776a-dff3-2ab4421d17e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7f162905-a3bb-776a-dff3-2ab4421d17e2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0d830211-5e44-4e25-095f-09656a253f7a",
	"b298de56-67c7-3b01-9139-44d55d49762d",
	"00000000-0000-0000-0000-000000000000",
	"8abe4edf-7511-65dc-08be-14357daa4b0f",
	"b28685d1-50dc-1e17-7448-755ddc9a5b6a");
INSERT INTO DIM_WAY
	VALUES ("8abe4edf-7511-65dc-08be-14357daa4b0f",
	1456.000000,
	1616.000000,
	"b298de56-67c7-3b01-9139-44d55d49762d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b28685d1-50dc-1e17-7448-755ddc9a5b6a",
	1456.000000,
	1680.000000,
	"b298de56-67c7-3b01-9139-44d55d49762d",
	"00000000-0000-0000-0000-000000000000",
	"8abe4edf-7511-65dc-08be-14357daa4b0f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b298de56-67c7-3b01-9139-44d55d49762d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b298de56-67c7-3b01-9139-44d55d49762d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("56e05162-70b4-1936-f335-f4d2bf919922",
	"2fb85ecf-897b-e04d-abda-33081d987eac",
	"b298de56-67c7-3b01-9139-44d55d49762d");
INSERT INTO GD_GE
	VALUES ("cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"e492ee96-5326-95f0-9395-64883ae7c79d",
	"f57a4095-6e95-2aa2-c9b1-4c83447e7eac",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("086078e2-7194-403f-3d17-1697d1258c13",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"086078e2-7194-403f-3d17-1697d1258c13");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"086078e2-7194-403f-3d17-1697d1258c13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("086078e2-7194-403f-3d17-1697d1258c13",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2b17db25-241f-ee63-a029-b347b28926e6",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"2b17db25-241f-ee63-a029-b347b28926e6");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"2b17db25-241f-ee63-a029-b347b28926e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2b17db25-241f-ee63-a029-b347b28926e6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ed6f4d05-f6f3-d467-bb70-def9f901b975",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ed6f4d05-f6f3-d467-bb70-def9f901b975");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ed6f4d05-f6f3-d467-bb70-def9f901b975",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ed6f4d05-f6f3-d467-bb70-def9f901b975",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("7627c924-0f20-27fb-2f67-6ae44c571e8d",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000",
	"c79d41fd-ac29-6caf-140c-9a1a5764a97b",
	"7d64dbde-c381-64e7-89cb-bbb657ff1724");
INSERT INTO GD_LS
	VALUES ("d48ef1c2-8310-4c14-b150-8ecf91b2610f",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"7627c924-0f20-27fb-2f67-6ae44c571e8d",
	"7d64dbde-c381-64e7-89cb-bbb657ff1724",
	"745ad107-d318-828a-a168-dbe9bb076ca5");
INSERT INTO GD_LS
	VALUES ("3043d4a1-6bd9-ec68-f84c-df581482606e",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"d48ef1c2-8310-4c14-b150-8ecf91b2610f",
	"745ad107-d318-828a-a168-dbe9bb076ca5",
	"d7c4be3f-ec93-325a-7797-48126d9c8992");
INSERT INTO DIM_WAY
	VALUES ("c79d41fd-ac29-6caf-140c-9a1a5764a97b",
	1600.000000,
	1728.000000,
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7d64dbde-c381-64e7-89cb-bbb657ff1724",
	1648.000000,
	1728.000000,
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000",
	"c79d41fd-ac29-6caf-140c-9a1a5764a97b");
INSERT INTO DIM_WAY
	VALUES ("745ad107-d318-828a-a168-dbe9bb076ca5",
	1648.000000,
	1568.000000,
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000",
	"7d64dbde-c381-64e7-89cb-bbb657ff1724");
INSERT INTO DIM_WAY
	VALUES ("d7c4be3f-ec93-325a-7797-48126d9c8992",
	1712.000000,
	1568.000000,
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000",
	"745ad107-d318-828a-a168-dbe9bb076ca5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cbf6d046-3d15-a350-9af7-7f17fb1a02e9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("29ccec64-92e3-8fc9-e36a-af81a74b912a",
	"e01c8a7d-0b5b-a628-1c85-823ec1dab8a3",
	"cbf6d046-3d15-a350-9af7-7f17fb1a02e9");
INSERT INTO DIM_DIA
	VALUES ("e492ee96-5326-95f0-9395-64883ae7c79d",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b7ce4e1e-f28b-3ae6-3ec0-a5dd1d4a7949",
	"35a498e1-65ea-eff6-8877-a190e6f608ef");
INSERT INTO O_BATTR
	VALUES ("b7ce4e1e-f28b-3ae6-3ec0-a5dd1d4a7949",
	"35a498e1-65ea-eff6-8877-a190e6f608ef");
INSERT INTO O_ATTR
	VALUES ("b7ce4e1e-f28b-3ae6-3ec0-a5dd1d4a7949",
	"35a498e1-65ea-eff6-8877-a190e6f608ef",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"025b6d8c-65fa-3eeb-9841-820a4a7ed957",
	"48b38ca0-1bf7-b715-a0aa-3be710c7e14e",
	"a6a77338-4873-98d2-a9b8-0082a66703ad",
	"a11ea965-e7a4-24c7-d219-30c7af69fb13",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("a6a77338-4873-98d2-a9b8-0082a66703ad",
	"35a498e1-65ea-eff6-8877-a190e6f608ef",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("a6a77338-4873-98d2-a9b8-0082a66703ad",
	"35a498e1-65ea-eff6-8877-a190e6f608ef",
	"b7ce4e1e-f28b-3ae6-3ec0-a5dd1d4a7949",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"35a498e1-65ea-eff6-8877-a190e6f608ef");
INSERT INTO O_OIDA
	VALUES ("b7ce4e1e-f28b-3ae6-3ec0-a5dd1d4a7949",
	"35a498e1-65ea-eff6-8877-a190e6f608ef",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"35a498e1-65ea-eff6-8877-a190e6f608ef");
INSERT INTO O_ID
	VALUES (2,
	"35a498e1-65ea-eff6-8877-a190e6f608ef");
INSERT INTO PE_PE
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b58750a8-7bc8-6610-cfd5-53833e6d69e0",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac");
INSERT INTO O_BATTR
	VALUES ("b58750a8-7bc8-6610-cfd5-53833e6d69e0",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac");
INSERT INTO O_ATTR
	VALUES ("b58750a8-7bc8-6610-cfd5-53833e6d69e0",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"a5432442-6047-65c9-709e-57ebab1a1836",
	"1e4e4253-6f05-6908-5334-a6f7c6aff4fa",
	"b362c349-6333-b1d0-103d-ae153d615d4e",
	"221d7de2-a019-51e8-c634-961c2a4e08b7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("b362c349-6333-b1d0-103d-ae153d615d4e",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("b362c349-6333-b1d0-103d-ae153d615d4e",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"b58750a8-7bc8-6610-cfd5-53833e6d69e0",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"4998ad62-65e3-bb17-b32b-29bde0510654",
	"ac7f9733-0bfe-a789-7d39-9e1513fd65ca",
	"be0f14d4-6455-4976-6162-99281fcaa872",
	"5bf291c7-0ba4-3199-1d31-02915f99c70e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("be0f14d4-6455-4976-6162-99281fcaa872",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("be0f14d4-6455-4976-6162-99281fcaa872",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"b362c349-6333-b1d0-103d-ae153d615d4e",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac");
INSERT INTO O_OIDA
	VALUES ("b58750a8-7bc8-6610-cfd5-53833e6d69e0",
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac");
INSERT INTO O_ID
	VALUES (2,
	"396fd2e8-0efa-6094-c2c9-b575c3d3c5ac");
INSERT INTO PE_PE
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("580768d4-b59d-52f1-4639-26ec5f846c83",
	"2b094710-d59a-bac2-fb53-72d5fc38e311");
INSERT INTO O_BATTR
	VALUES ("580768d4-b59d-52f1-4639-26ec5f846c83",
	"2b094710-d59a-bac2-fb53-72d5fc38e311");
INSERT INTO O_ATTR
	VALUES ("580768d4-b59d-52f1-4639-26ec5f846c83",
	"2b094710-d59a-bac2-fb53-72d5fc38e311",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"91743866-3863-d3a9-7389-4d4569b93f5b",
	"aab4fb7e-b2e6-df3d-1da3-b95cc858ec73",
	"ce1ded85-4ef6-6ca0-2674-2aafeb2cac73",
	"03f23134-6900-3706-0154-cab5d1506254",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("ce1ded85-4ef6-6ca0-2674-2aafeb2cac73",
	"2b094710-d59a-bac2-fb53-72d5fc38e311",
	"e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("ce1ded85-4ef6-6ca0-2674-2aafeb2cac73",
	"2b094710-d59a-bac2-fb53-72d5fc38e311",
	"580768d4-b59d-52f1-4639-26ec5f846c83",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"2b094710-d59a-bac2-fb53-72d5fc38e311");
INSERT INTO O_OIDA
	VALUES ("580768d4-b59d-52f1-4639-26ec5f846c83",
	"2b094710-d59a-bac2-fb53-72d5fc38e311",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"2b094710-d59a-bac2-fb53-72d5fc38e311");
INSERT INTO O_ID
	VALUES (2,
	"2b094710-d59a-bac2-fb53-72d5fc38e311");
INSERT INTO PE_PE
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_BATTR
	VALUES ("a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_ATTR
	VALUES ("a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_BATTR
	VALUES ("fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_ATTR
	VALUES ("fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"a6b7abed-581b-ed5c-8516-9dc86a80919a",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	0,
	"7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"b7d17403-d2fc-3443-b507-4427368d5b1a",
	"2f6267bb-d4e3-4e33-9d24-34cca9569077",
	"d6470cbe-6066-e7c6-5f8f-ecf742d03c62",
	"4426b256-d019-eafc-93ce-8964a4b6e450",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("d6470cbe-6066-e7c6-5f8f-ecf742d03c62",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("d6470cbe-6066-e7c6-5f8f-ecf742d03c62",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	"771f345a-930d-d820-9d05-8e6dd803ce09",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"a4c35f9a-c5b4-eaae-38ae-3ca3f3ef5c90",
	"57d2faa2-478b-1cef-5147-2772246e2fe2",
	"2d21f0ea-7567-c082-2b22-d76e6db2e31e",
	"d1a7d651-5ba0-5145-5c5d-7fe1bef58a3d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("2d21f0ea-7567-c082-2b22-d76e6db2e31e",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("2d21f0ea-7567-c082-2b22-d76e6db2e31e",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"d6470cbe-6066-e7c6-5f8f-ecf742d03c62",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	"84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"a4c35f9a-c5b4-eaae-38ae-3ca3f3ef5c90",
	"57d2faa2-478b-1cef-5147-2772246e2fe2",
	"beddfb25-b399-4e90-a4df-cb152b0aefeb",
	"d596db75-f27c-d61e-d252-e444e3d5a04f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("beddfb25-b399-4e90-a4df-cb152b0aefeb",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("beddfb25-b399-4e90-a4df-cb152b0aefeb",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"2d21f0ea-7567-c082-2b22-d76e6db2e31e",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_OIDA
	VALUES ("a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO O_ID
	VALUES (2,
	"dc27a0c5-9aeb-7496-869e-6b56832a6574");
INSERT INTO PE_PE
	VALUES ("72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_BATTR
	VALUES ("771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_ATTR
	VALUES ("771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_BATTR
	VALUES ("84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_ATTR
	VALUES ("84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	"771f345a-930d-d820-9d05-8e6dd803ce09",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_OIDA
	VALUES ("84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO O_ID
	VALUES (2,
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b");
INSERT INTO PE_PE
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_BATTR
	VALUES ("89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_ATTR
	VALUES ("89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2952414b-cdc3-3239-e667-395acc881d91",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_BATTR
	VALUES ("2952414b-cdc3-3239-e667-395acc881d91",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_ATTR
	VALUES ("2952414b-cdc3-3239-e667-395acc881d91",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"89957900-cbbb-bb0b-e87f-f5f85a621e05",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("21be2443-6af0-451e-91c7-bfe4586ce76b",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_BATTR
	VALUES ("21be2443-6af0-451e-91c7-bfe4586ce76b",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_ATTR
	VALUES ("21be2443-6af0-451e-91c7-bfe4586ce76b",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"2952414b-cdc3-3239-e667-395acc881d91",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	"4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"4fc03d1b-938a-d3c3-8537-84ef3f316629",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d",
	"039008a7-3e01-03ce-07c5-78c7b6a64b1a",
	"98a5e003-e142-ae7a-102b-1058e3d3600b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("039008a7-3e01-03ce-07c5-78c7b6a64b1a",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("039008a7-3e01-03ce-07c5-78c7b6a64b1a",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"21be2443-6af0-451e-91c7-bfe4586ce76b",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	"ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"4fc03d1b-938a-d3c3-8537-84ef3f316629",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d",
	"13fe44bf-ccb5-ecce-e65e-164eb1885a95",
	"e827151d-0235-70af-3096-4fa787e48a0a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("13fe44bf-ccb5-ecce-e65e-164eb1885a95",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("13fe44bf-ccb5-ecce-e65e-164eb1885a95",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"039008a7-3e01-03ce-07c5-78c7b6a64b1a",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("89ad7bf4-b963-7dc8-219f-40faa99327eb",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_BATTR
	VALUES ("89ad7bf4-b963-7dc8-219f-40faa99327eb",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_ATTR
	VALUES ("89ad7bf4-b963-7dc8-219f-40faa99327eb",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"13fe44bf-ccb5-ecce-e65e-164eb1885a95",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_OIDA
	VALUES ("89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO O_ID
	VALUES (2,
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO SM_ISM
	VALUES ("c5a053fd-dadc-2907-e990-4603a142faeb",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf");
INSERT INTO SM_SM
	VALUES ("c5a053fd-dadc-2907-e990-4603a142faeb",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_EVTDI
	VALUES ("989a8840-0d9d-5d44-0b35-a817bf761585",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'tfalse',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("9dca6487-91cc-9b61-0b63-d53c5bf7d363",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'ttrue',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"989a8840-0d9d-5d44-0b35-a817bf761585");
INSERT INTO SM_EVTDI
	VALUES ("dbf6bd59-503f-5180-45cd-75267f1652ba",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'tfalse',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("576e50f0-a817-c999-e455-14d4fa4a9da8",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'tfalse',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c1a8f781-a493-d268-4490-f428101f8cbe",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'tfalse',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("bf683a83-973d-87c8-253e-fa1d846d45ba",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'ttrue',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"dbf6bd59-503f-5180-45cd-75267f1652ba");
INSERT INTO SM_EVTDI
	VALUES ("abbd9f0e-e1b8-220d-5e6b-cc94a7862881",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'ttrue',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"576e50f0-a817-c999-e455-14d4fa4a9da8");
INSERT INTO SM_EVTDI
	VALUES ("9b868924-608c-a30a-c8dd-7c9c69eb0530",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	'ttrue',
	'',
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c1a8f781-a493-d268-4490-f428101f8cbe");
INSERT INTO SM_LEVT
	VALUES ("0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c3760a39-ec1b-4240-9ecd-4957883222c6",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0d0ad4b0-2648-4cfe-32e3-3640c9b7597c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"c3760a39-ec1b-4240-9ecd-4957883222c6");
INSERT INTO SM_AH
	VALUES ("0d0ad4b0-2648-4cfe-32e3-3640c9b7597c",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("0d0ad4b0-2648-4cfe-32e3-3640c9b7597c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("467a3725-3480-5791-2a69-5e32eb97726e",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71");
INSERT INTO SM_AH
	VALUES ("467a3725-3480-5791-2a69-5e32eb97726e",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("467a3725-3480-5791-2a69-5e32eb97726e",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9e727013-7845-9416-32dc-effbd27dc87a",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0503f803-2e5e-4566-b0c8-34c862361e1a",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"9e727013-7845-9416-32dc-effbd27dc87a");
INSERT INTO SM_AH
	VALUES ("0503f803-2e5e-4566-b0c8-34c862361e1a",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("0503f803-2e5e-4566-b0c8-34c862361e1a",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("132088b4-1512-4ec2-d482-3b43f9f6f111",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("73882a95-6321-4e31-e883-a3fe6872c811",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"132088b4-1512-4ec2-d482-3b43f9f6f111");
INSERT INTO SM_AH
	VALUES ("73882a95-6321-4e31-e883-a3fe6872c811",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("73882a95-6321-4e31-e883-a3fe6872c811",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f64ce327-d074-cecb-e910-299bc72ea5da",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"e8ab316e-d4fb-9052-e877-c5f5376563e5");
INSERT INTO SM_AH
	VALUES ("f64ce327-d074-cecb-e910-299bc72ea5da",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("f64ce327-d074-cecb-e910-299bc72ea5da",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'',
	0);
INSERT INTO SM_STATE
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("4c30c8b4-18db-9041-47c2-815c04bd7449",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d4439ff7-93ea-9050-12c1-27d84118091c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"4c30c8b4-18db-9041-47c2-815c04bd7449");
INSERT INTO SM_AH
	VALUES ("d4439ff7-93ea-9050-12c1-27d84118091c",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("d4439ff7-93ea-9050-12c1-27d84118091c",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("f6480c5e-ff3e-a19f-43d6-3eef6e784f1a",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"c3760a39-ec1b-4240-9ecd-4957883222c6",
	"0602064c-2fa1-b8d8-549f-8d3cfe788458",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b82628c4-f6a9-2e2c-4857-5151e7cb5b15",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"f6480c5e-ff3e-a19f-43d6-3eef6e784f1a");
INSERT INTO SM_AH
	VALUES ("b82628c4-f6a9-2e2c-4857-5151e7cb5b15",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("b82628c4-f6a9-2e2c-4857-5151e7cb5b15",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("f6480c5e-ff3e-a19f-43d6-3eef6e784f1a",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"c3760a39-ec1b-4240-9ecd-4957883222c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("e606eb2f-b8eb-9da4-7583-ce78aac04500",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"9e727013-7845-9416-32dc-effbd27dc87a",
	"13840b07-eaf8-30fc-d3c2-95fd27768d8d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b3221487-618a-65f1-10c7-979d763bafb1",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"e606eb2f-b8eb-9da4-7583-ce78aac04500");
INSERT INTO SM_AH
	VALUES ("b3221487-618a-65f1-10c7-979d763bafb1",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("b3221487-618a-65f1-10c7-979d763bafb1",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("e606eb2f-b8eb-9da4-7583-ce78aac04500",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"132088b4-1512-4ec2-d482-3b43f9f6f111",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d52a3804-aec9-4640-74c6-3b86ee347986",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"c3760a39-ec1b-4240-9ecd-4957883222c6",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("609ad7b9-b646-4b11-36a8-e3244593f77d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"d52a3804-aec9-4640-74c6-3b86ee347986");
INSERT INTO SM_AH
	VALUES ("609ad7b9-b646-4b11-36a8-e3244593f77d",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("609ad7b9-b646-4b11-36a8-e3244593f77d",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("d52a3804-aec9-4640-74c6-3b86ee347986",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("119fcd7b-c845-f90f-1364-0ef52dd493dc",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	"48fcb978-4301-7057-421e-312d5e1515c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("dfec0bec-50d4-e82d-5ec3-3df2f49b1dbd",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"119fcd7b-c845-f90f-1364-0ef52dd493dc");
INSERT INTO SM_AH
	VALUES ("dfec0bec-50d4-e82d-5ec3-3df2f49b1dbd",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("dfec0bec-50d4-e82d-5ec3-3df2f49b1dbd",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("119fcd7b-c845-f90f-1364-0ef52dd493dc",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"9e727013-7845-9416-32dc-effbd27dc87a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("13612a1d-116e-e97c-d7c0-e7f8347c62e6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"132088b4-1512-4ec2-d482-3b43f9f6f111",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("df6e0ac2-960a-5454-b803-fb03d729fdea",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"13612a1d-116e-e97c-d7c0-e7f8347c62e6");
INSERT INTO SM_AH
	VALUES ("df6e0ac2-960a-5454-b803-fb03d729fdea",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("df6e0ac2-960a-5454-b803-fb03d729fdea",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("13612a1d-116e-e97c-d7c0-e7f8347c62e6",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("50c32b8b-730e-ef1b-5975-c0a9f1ce37bf",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"e8ab316e-d4fb-9052-e877-c5f5376563e5",
	"d9aaf07c-c6bc-5402-f9c5-53a64032911c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e5236562-8507-c3ee-6a7d-fbb95400d3b3",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"50c32b8b-730e-ef1b-5975-c0a9f1ce37bf");
INSERT INTO SM_AH
	VALUES ("e5236562-8507-c3ee-6a7d-fbb95400d3b3",
	"c5a053fd-dadc-2907-e990-4603a142faeb");
INSERT INTO SM_ACT
	VALUES ("e5236562-8507-c3ee-6a7d-fbb95400d3b3",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("50c32b8b-730e-ef1b-5975-c0a9f1ce37bf",
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	"4c30c8b4-18db-9041-47c2-815c04bd7449",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	8,
	"c5a053fd-dadc-2907-e990-4603a142faeb",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("5b21dbb9-74bb-5ade-4906-705eacc236dd",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"c3760a39-ec1b-4240-9ecd-4957883222c6",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO GD_NCS
	VALUES ("5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"5b21dbb9-74bb-5ade-4906-705eacc236dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5b21dbb9-74bb-5ade-4906-705eacc236dd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a163fa6d-9b95-2bcf-1bf1-8e4a8d10d7a9",
	1872.000000,
	1296.000000,
	"5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO DIM_CON
	VALUES ("e994d529-349c-696d-e82d-3f9593971cd8",
	1824.000000,
	1264.000000,
	"5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO DIM_CON
	VALUES ("989c1433-e7d7-9491-8760-f57f5e7d90b4",
	1792.000000,
	1344.000000,
	"5b21dbb9-74bb-5ade-4906-705eacc236dd");
INSERT INTO GD_GE
	VALUES ("a1e8ef04-90ea-1413-68f2-a5dc4d723a63",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"d6316ff6-c2e3-60d7-fa69-eedb7a1fbc71",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("a1e8ef04-90ea-1413-68f2-a5dc4d723a63");
INSERT INTO GD_NCS
	VALUES ("a1e8ef04-90ea-1413-68f2-a5dc4d723a63");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"a1e8ef04-90ea-1413-68f2-a5dc4d723a63");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"a1e8ef04-90ea-1413-68f2-a5dc4d723a63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1e8ef04-90ea-1413-68f2-a5dc4d723a63",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("acf5631a-0e61-4f8e-5d21-410b19b8a29d",
	1792.000000,
	1456.000000,
	"a1e8ef04-90ea-1413-68f2-a5dc4d723a63");
INSERT INTO DIM_CON
	VALUES ("37148a02-7e8e-723b-08f7-ce875d8ece21",
	1792.000000,
	1536.000000,
	"a1e8ef04-90ea-1413-68f2-a5dc4d723a63");
INSERT INTO GD_GE
	VALUES ("42d9b978-353d-6bf3-1cbf-da9059ec0747",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"9e727013-7845-9416-32dc-effbd27dc87a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("42d9b978-353d-6bf3-1cbf-da9059ec0747");
INSERT INTO GD_NCS
	VALUES ("42d9b978-353d-6bf3-1cbf-da9059ec0747");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"42d9b978-353d-6bf3-1cbf-da9059ec0747");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"42d9b978-353d-6bf3-1cbf-da9059ec0747",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("42d9b978-353d-6bf3-1cbf-da9059ec0747",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("98b4cdc4-7ea9-4411-e468-5b3f2a968b29",
	1792.000000,
	1648.000000,
	"42d9b978-353d-6bf3-1cbf-da9059ec0747");
INSERT INTO DIM_CON
	VALUES ("6c4e9616-b71f-b93e-7c85-f2300ee2e3a2",
	1872.000000,
	1696.000000,
	"42d9b978-353d-6bf3-1cbf-da9059ec0747");
INSERT INTO GD_GE
	VALUES ("ee71105a-a1af-2806-200f-eb3b4fa2d587",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"132088b4-1512-4ec2-d482-3b43f9f6f111",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("ee71105a-a1af-2806-200f-eb3b4fa2d587");
INSERT INTO GD_NCS
	VALUES ("ee71105a-a1af-2806-200f-eb3b4fa2d587");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"ee71105a-a1af-2806-200f-eb3b4fa2d587");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"ee71105a-a1af-2806-200f-eb3b4fa2d587",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee71105a-a1af-2806-200f-eb3b4fa2d587",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("bd737df7-b5ea-36b8-4624-a60eaecab010",
	2096.000000,
	1360.000000,
	"ee71105a-a1af-2806-200f-eb3b4fa2d587");
INSERT INTO DIM_CON
	VALUES ("b6dbcdc7-e5dc-85d5-a159-2ec3e56661f8",
	2096.000000,
	1296.000000,
	"ee71105a-a1af-2806-200f-eb3b4fa2d587");
INSERT INTO GD_GE
	VALUES ("018f8032-7f6b-2a9a-e111-2e76c9bf9b4f",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"e8ab316e-d4fb-9052-e877-c5f5376563e5",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("018f8032-7f6b-2a9a-e111-2e76c9bf9b4f");
INSERT INTO GD_NCS
	VALUES ("018f8032-7f6b-2a9a-e111-2e76c9bf9b4f");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"018f8032-7f6b-2a9a-e111-2e76c9bf9b4f");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"018f8032-7f6b-2a9a-e111-2e76c9bf9b4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("018f8032-7f6b-2a9a-e111-2e76c9bf9b4f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("759514cc-946e-e727-b5e1-f074a4200660",
	2096.000000,
	1456.000000,
	"018f8032-7f6b-2a9a-e111-2e76c9bf9b4f");
INSERT INTO DIM_CON
	VALUES ("13e06351-5e71-2735-e23f-d307e098054d",
	2096.000000,
	1536.000000,
	"018f8032-7f6b-2a9a-e111-2e76c9bf9b4f");
INSERT INTO GD_GE
	VALUES ("a1a9e061-ad09-de62-264d-766b9e881df2",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"4c30c8b4-18db-9041-47c2-815c04bd7449",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("a1a9e061-ad09-de62-264d-766b9e881df2");
INSERT INTO GD_NCS
	VALUES ("a1a9e061-ad09-de62-264d-766b9e881df2");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"a1a9e061-ad09-de62-264d-766b9e881df2");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"a1a9e061-ad09-de62-264d-766b9e881df2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1a9e061-ad09-de62-264d-766b9e881df2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("06d7825f-e284-9476-f8ed-072c596829a7",
	2096.000000,
	1648.000000,
	"a1a9e061-ad09-de62-264d-766b9e881df2");
INSERT INTO GD_GE
	VALUES ("c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"f6480c5e-ff3e-a19f-43d6-3eef6e784f1a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("05e54ae6-a449-563a-b438-4c7c0579835b",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"05e54ae6-a449-563a-b438-4c7c0579835b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"05e54ae6-a449-563a-b438-4c7c0579835b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("05e54ae6-a449-563a-b438-4c7c0579835b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eff94b5f-6cfb-86cf-62e5-4dd509333a87",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"eff94b5f-6cfb-86cf-62e5-4dd509333a87");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"eff94b5f-6cfb-86cf-62e5-4dd509333a87",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eff94b5f-6cfb-86cf-62e5-4dd509333a87",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("15a82d45-5f59-4e69-33c2-855f4be55153",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"15a82d45-5f59-4e69-33c2-855f4be55153");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"15a82d45-5f59-4e69-33c2-855f4be55153",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("15a82d45-5f59-4e69-33c2-855f4be55153",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("99400e52-be56-e2a4-f257-120e938ffa78",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"099744f3-71c6-f0f7-b3d6-a6986c9c2430",
	"e413dc51-de9d-c7d1-5544-abae22c59301");
INSERT INTO GD_LS
	VALUES ("d2eaea15-e21f-c4b8-f047-92b40649c200",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"99400e52-be56-e2a4-f257-120e938ffa78",
	"e413dc51-de9d-c7d1-5544-abae22c59301",
	"a7f00d03-ced7-f3d5-35e2-af9541bdfdae");
INSERT INTO GD_LS
	VALUES ("11576182-2cd1-9ebe-60e6-56ddb97c10d3",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"d2eaea15-e21f-c4b8-f047-92b40649c200",
	"a7f00d03-ced7-f3d5-35e2-af9541bdfdae",
	"f11073f0-815d-a6c9-618b-8c9e4a43bda8");
INSERT INTO GD_LS
	VALUES ("e29fdb2b-c1a1-a456-5249-bcf605d0596f",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"11576182-2cd1-9ebe-60e6-56ddb97c10d3",
	"f11073f0-815d-a6c9-618b-8c9e4a43bda8",
	"d6b2c4a8-2908-1899-c1de-53659864069e");
INSERT INTO DIM_WAY
	VALUES ("099744f3-71c6-f0f7-b3d6-a6986c9c2430",
	1872.000000,
	1296.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e413dc51-de9d-c7d1-5544-abae22c59301",
	1920.000000,
	1296.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"099744f3-71c6-f0f7-b3d6-a6986c9c2430");
INSERT INTO DIM_WAY
	VALUES ("a7f00d03-ced7-f3d5-35e2-af9541bdfdae",
	1920.000000,
	1216.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"e413dc51-de9d-c7d1-5544-abae22c59301");
INSERT INTO DIM_WAY
	VALUES ("f11073f0-815d-a6c9-618b-8c9e4a43bda8",
	1824.000000,
	1216.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"a7f00d03-ced7-f3d5-35e2-af9541bdfdae");
INSERT INTO DIM_WAY
	VALUES ("d6b2c4a8-2908-1899-c1de-53659864069e",
	1824.000000,
	1264.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000",
	"f11073f0-815d-a6c9-618b-8c9e4a43bda8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c4694776-5986-15b6-1f74-5ad4bfd68e67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c4694776-5986-15b6-1f74-5ad4bfd68e67",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a163fa6d-9b95-2bcf-1bf1-8e4a8d10d7a9",
	"e994d529-349c-696d-e82d-3f9593971cd8",
	"c4694776-5986-15b6-1f74-5ad4bfd68e67");
INSERT INTO GD_GE
	VALUES ("91327d89-337a-e4f9-7edb-6622cfe06582",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"d52a3804-aec9-4640-74c6-3b86ee347986",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("91327d89-337a-e4f9-7edb-6622cfe06582",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b0b0c331-b466-dd78-c5e2-3de3611a725c",
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b0b0c331-b466-dd78-c5e2-3de3611a725c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b0b0c331-b466-dd78-c5e2-3de3611a725c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0b0c331-b466-dd78-c5e2-3de3611a725c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("12f3b615-f6e7-651d-dc2d-6079175fe956",
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"12f3b615-f6e7-651d-dc2d-6079175fe956");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"12f3b615-f6e7-651d-dc2d-6079175fe956",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("12f3b615-f6e7-651d-dc2d-6079175fe956",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b3d63dfe-6b81-c4a2-3dad-5c1f370c39af",
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b3d63dfe-6b81-c4a2-3dad-5c1f370c39af");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b3d63dfe-6b81-c4a2-3dad-5c1f370c39af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b3d63dfe-6b81-c4a2-3dad-5c1f370c39af",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ba8ffd90-2020-59b0-aabb-82fdc041f613",
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	"00000000-0000-0000-0000-000000000000",
	"367ab9c2-fc26-5c1d-ee26-b6091cd1f428",
	"0b91ea63-a6e4-9cdd-fb17-2d3b908dc62e");
INSERT INTO DIM_WAY
	VALUES ("367ab9c2-fc26-5c1d-ee26-b6091cd1f428",
	1792.000000,
	1344.000000,
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0b91ea63-a6e4-9cdd-fb17-2d3b908dc62e",
	1792.000000,
	1456.000000,
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	"00000000-0000-0000-0000-000000000000",
	"367ab9c2-fc26-5c1d-ee26-b6091cd1f428");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"91327d89-337a-e4f9-7edb-6622cfe06582",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91327d89-337a-e4f9-7edb-6622cfe06582",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("989c1433-e7d7-9491-8760-f57f5e7d90b4",
	"acf5631a-0e61-4f8e-5d21-410b19b8a29d",
	"91327d89-337a-e4f9-7edb-6622cfe06582");
INSERT INTO GD_GE
	VALUES ("4305018a-bedb-7a54-d588-d1d224f478ba",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"119fcd7b-c845-f90f-1364-0ef52dd493dc",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("4305018a-bedb-7a54-d588-d1d224f478ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c04de495-5e29-10b6-22c8-f11060849beb",
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c04de495-5e29-10b6-22c8-f11060849beb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c04de495-5e29-10b6-22c8-f11060849beb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c04de495-5e29-10b6-22c8-f11060849beb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bca39cb2-b900-0fc8-03cf-59a98bef4315",
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"bca39cb2-b900-0fc8-03cf-59a98bef4315");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"bca39cb2-b900-0fc8-03cf-59a98bef4315",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bca39cb2-b900-0fc8-03cf-59a98bef4315",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9bf4e320-9a0c-1497-fa93-cf30d6618b4b",
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9bf4e320-9a0c-1497-fa93-cf30d6618b4b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9bf4e320-9a0c-1497-fa93-cf30d6618b4b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9bf4e320-9a0c-1497-fa93-cf30d6618b4b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c4f47d7d-ff9c-61af-624d-2d39c40c08b2",
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	"00000000-0000-0000-0000-000000000000",
	"32ac441c-f542-670a-55ab-0c6f116d3f0d",
	"c5e26ca1-7dbb-dc94-5717-b8c62e78b614");
INSERT INTO DIM_WAY
	VALUES ("32ac441c-f542-670a-55ab-0c6f116d3f0d",
	1792.000000,
	1536.000000,
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c5e26ca1-7dbb-dc94-5717-b8c62e78b614",
	1792.000000,
	1648.000000,
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	"00000000-0000-0000-0000-000000000000",
	"32ac441c-f542-670a-55ab-0c6f116d3f0d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4305018a-bedb-7a54-d588-d1d224f478ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4305018a-bedb-7a54-d588-d1d224f478ba",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("37148a02-7e8e-723b-08f7-ce875d8ece21",
	"98b4cdc4-7ea9-4411-e468-5b3f2a968b29",
	"4305018a-bedb-7a54-d588-d1d224f478ba");
INSERT INTO GD_GE
	VALUES ("ba42422c-bd60-86a6-a660-13bf1c725060",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"13612a1d-116e-e97c-d7c0-e7f8347c62e6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("ba42422c-bd60-86a6-a660-13bf1c725060",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("519a4dc7-dc09-70dc-9d59-6e48a1074988",
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"519a4dc7-dc09-70dc-9d59-6e48a1074988");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"519a4dc7-dc09-70dc-9d59-6e48a1074988",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("519a4dc7-dc09-70dc-9d59-6e48a1074988",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c0418fe8-b1d0-679e-a1c2-0144c59c23ff",
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"c0418fe8-b1d0-679e-a1c2-0144c59c23ff");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"c0418fe8-b1d0-679e-a1c2-0144c59c23ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c0418fe8-b1d0-679e-a1c2-0144c59c23ff",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5df0554d-052e-e171-cce8-75b7734b22e8",
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5df0554d-052e-e171-cce8-75b7734b22e8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5df0554d-052e-e171-cce8-75b7734b22e8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5df0554d-052e-e171-cce8-75b7734b22e8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f75ae37c-ac1a-5fa1-aac1-eadf3021afbc",
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	"00000000-0000-0000-0000-000000000000",
	"a413ce14-8fdb-b68b-71ff-8a05734dfdfc",
	"74859d03-114c-5d8e-4437-f4dd9ba11ef6");
INSERT INTO DIM_WAY
	VALUES ("a413ce14-8fdb-b68b-71ff-8a05734dfdfc",
	2096.000000,
	1360.000000,
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("74859d03-114c-5d8e-4437-f4dd9ba11ef6",
	2096.000000,
	1456.000000,
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	"00000000-0000-0000-0000-000000000000",
	"a413ce14-8fdb-b68b-71ff-8a05734dfdfc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ba42422c-bd60-86a6-a660-13bf1c725060",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba42422c-bd60-86a6-a660-13bf1c725060",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bd737df7-b5ea-36b8-4624-a60eaecab010",
	"759514cc-946e-e727-b5e1-f074a4200660",
	"ba42422c-bd60-86a6-a660-13bf1c725060");
INSERT INTO GD_GE
	VALUES ("49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"50c32b8b-730e-ef1b-5975-c0a9f1ce37bf",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b1a1b7ce-256b-7fc9-ac08-18bdf7e6a9ff",
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b1a1b7ce-256b-7fc9-ac08-18bdf7e6a9ff");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b1a1b7ce-256b-7fc9-ac08-18bdf7e6a9ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b1a1b7ce-256b-7fc9-ac08-18bdf7e6a9ff",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("27846f72-ff5c-b6d0-7052-ac12fe473902",
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"27846f72-ff5c-b6d0-7052-ac12fe473902");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"27846f72-ff5c-b6d0-7052-ac12fe473902",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("27846f72-ff5c-b6d0-7052-ac12fe473902",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b904e363-2ba1-43a9-8da2-d5f8c68894c9",
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b904e363-2ba1-43a9-8da2-d5f8c68894c9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b904e363-2ba1-43a9-8da2-d5f8c68894c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b904e363-2ba1-43a9-8da2-d5f8c68894c9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("da82b843-c075-eb2f-47f9-1037ff8e361f",
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"00000000-0000-0000-0000-000000000000",
	"75cf9b67-30c6-ee33-6742-a0f210d2a85c",
	"8510ba82-4c4c-1438-c54c-5789f89ecc97");
INSERT INTO DIM_WAY
	VALUES ("75cf9b67-30c6-ee33-6742-a0f210d2a85c",
	2096.000000,
	1536.000000,
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8510ba82-4c4c-1438-c54c-5789f89ecc97",
	2096.000000,
	1648.000000,
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"00000000-0000-0000-0000-000000000000",
	"75cf9b67-30c6-ee33-6742-a0f210d2a85c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("49b73b96-9e08-6d8b-26b6-8cd8359498a8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("13e06351-5e71-2735-e23f-d307e098054d",
	"06d7825f-e284-9476-f8ed-072c596829a7",
	"49b73b96-9e08-6d8b-26b6-8cd8359498a8");
INSERT INTO GD_GE
	VALUES ("2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	"e606eb2f-b8eb-9da4-7583-ce78aac04500",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bb9e884b-19d4-5dd6-17a5-3140faa3ea46",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bb9e884b-19d4-5dd6-17a5-3140faa3ea46");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bb9e884b-19d4-5dd6-17a5-3140faa3ea46",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bb9e884b-19d4-5dd6-17a5-3140faa3ea46",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("71418795-ffbe-5fe5-3263-ab64669d193d",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"71418795-ffbe-5fe5-3263-ab64669d193d");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"71418795-ffbe-5fe5-3263-ab64669d193d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("71418795-ffbe-5fe5-3263-ab64669d193d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3adc16d3-cc3d-95a3-51f9-9b6419f5849d",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3adc16d3-cc3d-95a3-51f9-9b6419f5849d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3adc16d3-cc3d-95a3-51f9-9b6419f5849d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3adc16d3-cc3d-95a3-51f9-9b6419f5849d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e557943a-be93-aafd-b112-caa90e6338a5",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"93f3dfa8-bd6d-bebb-ee4c-e12293831701",
	"8b100b59-eca8-0539-3ece-12f03a35f30f");
INSERT INTO GD_LS
	VALUES ("caa2aa73-d5bf-6b6d-13eb-a0706abd1d0b",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"e557943a-be93-aafd-b112-caa90e6338a5",
	"8b100b59-eca8-0539-3ece-12f03a35f30f",
	"d6c8ec89-de9e-3728-001c-5ac4720c2a21");
INSERT INTO GD_LS
	VALUES ("7c0ec951-d124-9244-3914-986ae6a903e3",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"caa2aa73-d5bf-6b6d-13eb-a0706abd1d0b",
	"d6c8ec89-de9e-3728-001c-5ac4720c2a21",
	"d57ceaea-3edc-1f40-2161-3633a7ecc8e3");
INSERT INTO GD_LS
	VALUES ("9fa6e5bb-e704-0faf-d3ca-2f188371180e",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"7c0ec951-d124-9244-3914-986ae6a903e3",
	"d57ceaea-3edc-1f40-2161-3633a7ecc8e3",
	"a800d511-a728-aa6d-2771-c203daa50466");
INSERT INTO DIM_WAY
	VALUES ("93f3dfa8-bd6d-bebb-ee4c-e12293831701",
	1872.000000,
	1696.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8b100b59-eca8-0539-3ece-12f03a35f30f",
	1968.000000,
	1696.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"93f3dfa8-bd6d-bebb-ee4c-e12293831701");
INSERT INTO DIM_WAY
	VALUES ("d6c8ec89-de9e-3728-001c-5ac4720c2a21",
	1968.000000,
	1248.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"8b100b59-eca8-0539-3ece-12f03a35f30f");
INSERT INTO DIM_WAY
	VALUES ("d57ceaea-3edc-1f40-2161-3633a7ecc8e3",
	2096.000000,
	1248.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"d6c8ec89-de9e-3728-001c-5ac4720c2a21");
INSERT INTO DIM_WAY
	VALUES ("a800d511-a728-aa6d-2771-c203daa50466",
	2096.000000,
	1296.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000",
	"d57ceaea-3edc-1f40-2161-3633a7ecc8e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2e4212cf-b114-0f1f-dd1c-2fc8b791f56c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6c4e9616-b71f-b93e-7c85-f2300ee2e3a2",
	"b6dbcdc7-e5dc-85d5-a159-2ec3e56661f8",
	"2e4212cf-b114-0f1f-dd1c-2fc8b791f56c");
INSERT INTO DIM_DIA
	VALUES ("86a25b2f-4ff2-8259-5dc5-e09161d797a7",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_BATTR
	VALUES ("4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_ATTR
	VALUES ("4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_BATTR
	VALUES ("ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_ATTR
	VALUES ("ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_REF
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	0,
	"89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"9dd73d7f-fae3-271f-4142-7c45e997ecb3",
	"cca18846-092a-91af-a999-d1c1622d8358",
	"8c6c48b4-ac08-6123-ad82-62e259f2b78f",
	"9a1f5e14-b9dc-9c40-f632-74c27a3dfcea",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("8c6c48b4-ac08-6123-ad82-62e259f2b78f",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("8c6c48b4-ac08-6123-ad82-62e259f2b78f",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"ff7ecd25-bd9b-7392-67c0-0509cae42510",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	"13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"827a6568-0c53-bd46-aa4b-bf14e624bd29",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd",
	"1efcafd0-e5dc-13d2-2cd0-d80ab6256dbd",
	"732d260c-0da2-fb48-13e4-623e0cbf66fb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("1efcafd0-e5dc-13d2-2cd0-d80ab6256dbd",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("1efcafd0-e5dc-13d2-2cd0-d80ab6256dbd",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"8c6c48b4-ac08-6123-ad82-62e259f2b78f",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	"9c246e7f-266f-f686-937e-814592509dc2",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"827a6568-0c53-bd46-aa4b-bf14e624bd29",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd",
	"2d35bdff-bde8-df17-060d-fc4942e3e679",
	"060f7fca-7d4b-bf8f-2c66-27efcbcf6918",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("2d35bdff-bde8-df17-060d-fc4942e3e679",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("2d35bdff-bde8-df17-060d-fc4942e3e679",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"1efcafd0-e5dc-13d2-2cd0-d80ab6256dbd",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_OIDA
	VALUES ("ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO O_ID
	VALUES (2,
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19");
INSERT INTO PE_PE
	VALUES ("7511b651-e130-959e-d060-a554185901ee",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7511b651-e130-959e-d060-a554185901ee",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_BATTR
	VALUES ("13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_ATTR
	VALUES ("13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_BATTR
	VALUES ("9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_ATTR
	VALUES ("9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee",
	"13387ff7-0b48-ea08-870a-64b3ae4aa158",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_OIDA
	VALUES ("13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO O_ID
	VALUES (2,
	"7511b651-e130-959e-d060-a554185901ee");
INSERT INTO PE_PE
	VALUES ("19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b1ee1bb6-547c-1256-143c-2553b16070b9",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_BATTR
	VALUES ("b1ee1bb6-547c-1256-143c-2553b16070b9",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_ATTR
	VALUES ("b1ee1bb6-547c-1256-143c-2553b16070b9",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("59e49fb5-6371-cfb6-eccc-d09ed8b1bb86",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_BATTR
	VALUES ("59e49fb5-6371-cfb6-eccc-d09ed8b1bb86",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_ATTR
	VALUES ("59e49fb5-6371-cfb6-eccc-d09ed8b1bb86",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	"b1ee1bb6-547c-1256-143c-2553b16070b9",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_OIDA
	VALUES ("b1ee1bb6-547c-1256-143c-2553b16070b9",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO O_ID
	VALUES (2,
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO SM_ISM
	VALUES ("65147ce5-0422-86dd-de47-07cd5ef22184",
	"19e6c051-4bbd-7747-f8d8-dd19f35ef117");
INSERT INTO SM_SM
	VALUES ("65147ce5-0422-86dd-de47-07cd5ef22184",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("65147ce5-0422-86dd-de47-07cd5ef22184");
INSERT INTO SM_LEVT
	VALUES ("d5872c44-e3db-00ab-1167-d9c936231cc3",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d5872c44-e3db-00ab-1167-d9c936231cc3",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d5872c44-e3db-00ab-1167-d9c936231cc3",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("a6bdcec3-0d82-c573-c58b-c5760f14dc93",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("a6bdcec3-0d82-c573-c58b-c5760f14dc93",
	"d5872c44-e3db-00ab-1167-d9c936231cc3",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0a269694-81d7-840a-7b83-c4c27f158eee",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"a6bdcec3-0d82-c573-c58b-c5760f14dc93");
INSERT INTO SM_AH
	VALUES ("0a269694-81d7-840a-7b83-c4c27f158eee",
	"65147ce5-0422-86dd-de47-07cd5ef22184");
INSERT INTO SM_ACT
	VALUES ("0a269694-81d7-840a-7b83-c4c27f158eee",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'',
	0);
INSERT INTO SM_NSTXN
	VALUES ("55a3b646-af31-eb3b-b20b-8571736c8f47",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"a6bdcec3-0d82-c573-c58b-c5760f14dc93",
	"d5872c44-e3db-00ab-1167-d9c936231cc3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("99216744-de0b-2367-deb7-0fbe2e6f42d4",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"55a3b646-af31-eb3b-b20b-8571736c8f47");
INSERT INTO SM_AH
	VALUES ("99216744-de0b-2367-deb7-0fbe2e6f42d4",
	"65147ce5-0422-86dd-de47-07cd5ef22184");
INSERT INTO SM_ACT
	VALUES ("99216744-de0b-2367-deb7-0fbe2e6f42d4",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	3,
	'',
	'',
	0);
INSERT INTO SM_TXN
	VALUES ("55a3b646-af31-eb3b-b20b-8571736c8f47",
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	"a6bdcec3-0d82-c573-c58b-c5760f14dc93",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("c7256ad5-ca7d-dfca-b1a3-bf4802cfa72c",
	8,
	"65147ce5-0422-86dd-de47-07cd5ef22184",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("53a9bed2-7301-5be0-1ce7-c1956e7fc9bf",
	"c7256ad5-ca7d-dfca-b1a3-bf4802cfa72c",
	"a6bdcec3-0d82-c573-c58b-c5760f14dc93",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("53a9bed2-7301-5be0-1ce7-c1956e7fc9bf");
INSERT INTO GD_NCS
	VALUES ("53a9bed2-7301-5be0-1ce7-c1956e7fc9bf");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"53a9bed2-7301-5be0-1ce7-c1956e7fc9bf");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"53a9bed2-7301-5be0-1ce7-c1956e7fc9bf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("53a9bed2-7301-5be0-1ce7-c1956e7fc9bf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("619df490-91d8-6cae-31af-08750aea2dcd",
	2240.000000,
	1296.000000,
	"53a9bed2-7301-5be0-1ce7-c1956e7fc9bf");
INSERT INTO DIM_CON
	VALUES ("f95f115b-e945-5e58-2e64-00c95f17e3f1",
	2176.000000,
	1248.000000,
	"53a9bed2-7301-5be0-1ce7-c1956e7fc9bf");
INSERT INTO GD_GE
	VALUES ("d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"c7256ad5-ca7d-dfca-b1a3-bf4802cfa72c",
	"55a3b646-af31-eb3b-b20b-8571736c8f47",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dcfc3ab7-06d7-953a-66e3-b3f6bb1dda9c",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"dcfc3ab7-06d7-953a-66e3-b3f6bb1dda9c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"dcfc3ab7-06d7-953a-66e3-b3f6bb1dda9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dcfc3ab7-06d7-953a-66e3-b3f6bb1dda9c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2ab9a2a7-ec13-58e2-e61e-0468fbea63fb",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"2ab9a2a7-ec13-58e2-e61e-0468fbea63fb");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"2ab9a2a7-ec13-58e2-e61e-0468fbea63fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ab9a2a7-ec13-58e2-e61e-0468fbea63fb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e038009e-4d34-068c-179e-8004bb9c32b5",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e038009e-4d34-068c-179e-8004bb9c32b5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e038009e-4d34-068c-179e-8004bb9c32b5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e038009e-4d34-068c-179e-8004bb9c32b5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2aba1d5e-0db0-3f53-d321-d2e6fc90238e",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"a1c7e26f-8296-7464-2e01-74da26046305",
	"5dd9e9fe-4e74-12cb-0b82-953038a11c4f");
INSERT INTO GD_LS
	VALUES ("6d7d19eb-83c7-380e-45fd-99dedbfd699c",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"2aba1d5e-0db0-3f53-d321-d2e6fc90238e",
	"5dd9e9fe-4e74-12cb-0b82-953038a11c4f",
	"56d4c77a-02fd-e050-b0d8-109f0c384eb9");
INSERT INTO GD_LS
	VALUES ("1ca0301d-1503-351a-dbf1-edbb1a7f08fc",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"6d7d19eb-83c7-380e-45fd-99dedbfd699c",
	"56d4c77a-02fd-e050-b0d8-109f0c384eb9",
	"a44d86fc-b52a-3559-f7a7-e428884a0970");
INSERT INTO GD_LS
	VALUES ("76bb0381-ee3e-5358-c2f4-145280e4626a",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"1ca0301d-1503-351a-dbf1-edbb1a7f08fc",
	"a44d86fc-b52a-3559-f7a7-e428884a0970",
	"5a9125c1-9870-5941-7d48-a2435781dc72");
INSERT INTO DIM_WAY
	VALUES ("a1c7e26f-8296-7464-2e01-74da26046305",
	2240.000000,
	1296.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5dd9e9fe-4e74-12cb-0b82-953038a11c4f",
	2320.000000,
	1296.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"a1c7e26f-8296-7464-2e01-74da26046305");
INSERT INTO DIM_WAY
	VALUES ("56d4c77a-02fd-e050-b0d8-109f0c384eb9",
	2320.000000,
	1200.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"5dd9e9fe-4e74-12cb-0b82-953038a11c4f");
INSERT INTO DIM_WAY
	VALUES ("a44d86fc-b52a-3559-f7a7-e428884a0970",
	2176.000000,
	1200.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"56d4c77a-02fd-e050-b0d8-109f0c384eb9");
INSERT INTO DIM_WAY
	VALUES ("5a9125c1-9870-5941-7d48-a2435781dc72",
	2176.000000,
	1248.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000",
	"a44d86fc-b52a-3559-f7a7-e428884a0970");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d2bcab63-fd46-c6b7-4851-c81977d0f72f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("619df490-91d8-6cae-31af-08750aea2dcd",
	"f95f115b-e945-5e58-2e64-00c95f17e3f1",
	"d2bcab63-fd46-c6b7-4851-c81977d0f72f");
INSERT INTO DIM_DIA
	VALUES ("c7256ad5-ca7d-dfca-b1a3-bf4802cfa72c",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1529693b-72df-ea3c-b3a2-48845562e690",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1529693b-72df-ea3c-b3a2-48845562e690",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1529693b-72df-ea3c-b3a2-48845562e690");
INSERT INTO R_PART
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f02b31b-f2b0-6220-4ddc-8a229bb7b0f1",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("3f0ba211-2512-298c-8862-a2b3f4471b3b",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("3b9311ca-e28c-1363-fd6d-eb9a64214fa7",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("d583f4ed-3c52-5a93-d69d-db2ce843d23c",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("6b198324-67d5-86bf-060f-79908d0fefbb",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("d17fbc72-9788-c6b6-23b5-62670440ec56",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("67ed54d1-6e33-1dee-68ba-9b7e766a14ec",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("e745eb64-59c5-adc4-1ce7-b975f39cbf4b",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("21762565-23be-65af-73fc-35e214dabf2e",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO O_RTIDA
	VALUES ("46792961-2920-d189-6204-318144409ee9",
	"b9576516-defd-6566-d57f-11c030375935",
	0,
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea");
INSERT INTO R_RTO
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	0);
INSERT INTO R_OIR
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"41aebff3-c622-e764-23b8-bc39accb92ea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b");
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"1529693b-72df-ea3c-b3a2-48845562e690",
	"bd60f356-6f26-e8f3-08c2-918fa39ee28b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("cbb96ea5-dc7f-8753-3250-86649dcbdd28");
INSERT INTO R_PART
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"1e4e4253-6f05-6908-5334-a6f7c6aff4fa",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"1e4e4253-6f05-6908-5334-a6f7c6aff4fa");
INSERT INTO R_RTO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"1e4e4253-6f05-6908-5334-a6f7c6aff4fa",
	0);
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"1e4e4253-6f05-6908-5334-a6f7c6aff4fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"a5432442-6047-65c9-709e-57ebab1a1836",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"a5432442-6047-65c9-709e-57ebab1a1836");
INSERT INTO R_OIR
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"cbb96ea5-dc7f-8753-3250-86649dcbdd28",
	"a5432442-6047-65c9-709e-57ebab1a1836",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("421cd316-4237-d02f-6138-15cc9d403a60",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("421cd316-4237-d02f-6138-15cc9d403a60",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("421cd316-4237-d02f-6138-15cc9d403a60");
INSERT INTO R_PART
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"aab4fb7e-b2e6-df3d-1da3-b95cc858ec73",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"aab4fb7e-b2e6-df3d-1da3-b95cc858ec73");
INSERT INTO R_RTO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"aab4fb7e-b2e6-df3d-1da3-b95cc858ec73",
	0);
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"aab4fb7e-b2e6-df3d-1da3-b95cc858ec73",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"91743866-3863-d3a9-7389-4d4569b93f5b",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"91743866-3863-d3a9-7389-4d4569b93f5b");
INSERT INTO R_OIR
	VALUES ("2b094710-d59a-bac2-fb53-72d5fc38e311",
	"421cd316-4237-d02f-6138-15cc9d403a60",
	"91743866-3863-d3a9-7389-4d4569b93f5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("c7a0a9ba-daa4-9bde-3e21-9195a592cb81");
INSERT INTO R_PART
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"48b38ca0-1bf7-b715-a0aa-3be710c7e14e",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"48b38ca0-1bf7-b715-a0aa-3be710c7e14e");
INSERT INTO R_RTO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"48b38ca0-1bf7-b715-a0aa-3be710c7e14e",
	0);
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"48b38ca0-1bf7-b715-a0aa-3be710c7e14e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"025b6d8c-65fa-3eeb-9841-820a4a7ed957",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"025b6d8c-65fa-3eeb-9841-820a4a7ed957");
INSERT INTO R_OIR
	VALUES ("35a498e1-65ea-eff6-8877-a190e6f608ef",
	"c7a0a9ba-daa4-9bde-3e21-9195a592cb81",
	"025b6d8c-65fa-3eeb-9841-820a4a7ed957",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7ebf88a1-05aa-0814-569c-6512baa43631",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7ebf88a1-05aa-0814-569c-6512baa43631",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7ebf88a1-05aa-0814-569c-6512baa43631");
INSERT INTO R_PART
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"ac7f9733-0bfe-a789-7d39-9e1513fd65ca",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"ac7f9733-0bfe-a789-7d39-9e1513fd65ca");
INSERT INTO R_RTO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"ac7f9733-0bfe-a789-7d39-9e1513fd65ca",
	0);
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"ac7f9733-0bfe-a789-7d39-9e1513fd65ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"4998ad62-65e3-bb17-b32b-29bde0510654",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"4998ad62-65e3-bb17-b32b-29bde0510654");
INSERT INTO R_OIR
	VALUES ("396fd2e8-0efa-6094-c2c9-b575c3d3c5ac",
	"7ebf88a1-05aa-0814-569c-6512baa43631",
	"4998ad62-65e3-bb17-b32b-29bde0510654",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("a47144bc-02c5-8702-9ee5-394dfa34ea53",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("a47144bc-02c5-8702-9ee5-394dfa34ea53",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("a47144bc-02c5-8702-9ee5-394dfa34ea53");
INSERT INTO R_FORM
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04");
INSERT INTO R_OIR
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"2d1bee09-f80b-40a4-4be1-e70e20f59b04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("99825e56-d099-9cc7-d041-55e3015c6347",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("7b834a9e-1024-9126-8725-86c26bd00702",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("414c7786-b9ed-5d1c-fe02-cbeeb6198561",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("ac20d837-10c5-4752-77bb-9439bdbecf17",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("d3a47b3d-0d06-ed91-ad50-841d7a6698ea",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("233747a1-4918-9eb0-e569-4f384cb1cca7",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("69e63316-6562-f57f-677f-82aeb7ec0e64",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("078ce8dc-4710-b203-a5f5-3a8509d7fbc3",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("eff8a6e2-4559-e188-fea1-e460eebc3516",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO O_RTIDA
	VALUES ("30ba0381-3bcd-5ae0-6c5e-55786aed4c63",
	"40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	0,
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc");
INSERT INTO R_RTO
	VALUES ("40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	0);
INSERT INTO R_OIR
	VALUES ("40bc8f24-8004-0ba5-4c5c-7188ff8e5fec",
	"a47144bc-02c5-8702-9ee5-394dfa34ea53",
	"98d56f87-3204-68d6-64a7-631e4eaf9fbc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("306e0556-e95b-fbf7-2e85-e300ab42eb39",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("306e0556-e95b-fbf7-2e85-e300ab42eb39",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("306e0556-e95b-fbf7-2e85-e300ab42eb39");
INSERT INTO R_PART
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"1aba7207-6ad2-bb8e-a59c-d3237fac6b31",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("e17a6af4-ece7-61ad-092a-6493a12cb6d9",
	"a2306621-56f0-d9c9-ae78-e27421faf59e",
	0,
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"1aba7207-6ad2-bb8e-a59c-d3237fac6b31");
INSERT INTO R_RTO
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"1aba7207-6ad2-bb8e-a59c-d3237fac6b31",
	0);
INSERT INTO R_OIR
	VALUES ("a2306621-56f0-d9c9-ae78-e27421faf59e",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"1aba7207-6ad2-bb8e-a59c-d3237fac6b31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"d230db49-0b38-abc0-9131-32b611ae25f2",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"d230db49-0b38-abc0-9131-32b611ae25f2");
INSERT INTO R_OIR
	VALUES ("b9576516-defd-6566-d57f-11c030375935",
	"306e0556-e95b-fbf7-2e85-e300ab42eb39",
	"d230db49-0b38-abc0-9131-32b611ae25f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("a601c5de-294c-84bf-2d1c-e783edcb6c71",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("a601c5de-294c-84bf-2d1c-e783edcb6c71",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("a601c5de-294c-84bf-2d1c-e783edcb6c71");
INSERT INTO R_FORM
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"b5d18d57-e37e-136f-fd61-cc95aa64ac91",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"b5d18d57-e37e-136f-fd61-cc95aa64ac91");
INSERT INTO R_OIR
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"b5d18d57-e37e-136f-fd61-cc95aa64ac91",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"5879845f-b8c7-8d16-4795-565fc826064c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("a6b7abed-581b-ed5c-8516-9dc86a80919a",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"5879845f-b8c7-8d16-4795-565fc826064c");
INSERT INTO O_RTIDA
	VALUES ("fecf72e4-8494-4c2a-5ac0-df1bd0ea72ad",
	"dc27a0c5-9aeb-7496-869e-6b56832a6574",
	0,
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"5879845f-b8c7-8d16-4795-565fc826064c");
INSERT INTO R_RTO
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"5879845f-b8c7-8d16-4795-565fc826064c",
	0);
INSERT INTO R_OIR
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"a601c5de-294c-84bf-2d1c-e783edcb6c71",
	"5879845f-b8c7-8d16-4795-565fc826064c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("156916d9-415b-9253-344f-5d37ec5d6b48",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("156916d9-415b-9253-344f-5d37ec5d6b48",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("156916d9-415b-9253-344f-5d37ec5d6b48");
INSERT INTO R_PART
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"2f6267bb-d4e3-4e33-9d24-34cca9569077",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("7a036613-0c9c-77ce-4bff-24a8b681a7b7",
	"7532ef95-569f-de95-2b88-1ef15c79b3ec",
	0,
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"2f6267bb-d4e3-4e33-9d24-34cca9569077");
INSERT INTO R_RTO
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"2f6267bb-d4e3-4e33-9d24-34cca9569077",
	0);
INSERT INTO R_OIR
	VALUES ("7532ef95-569f-de95-2b88-1ef15c79b3ec",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"2f6267bb-d4e3-4e33-9d24-34cca9569077",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"b7d17403-d2fc-3443-b507-4427368d5b1a",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"b7d17403-d2fc-3443-b507-4427368d5b1a");
INSERT INTO R_OIR
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"156916d9-415b-9253-344f-5d37ec5d6b48",
	"b7d17403-d2fc-3443-b507-4427368d5b1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("04afe442-18d1-0495-51d3-58890577bb5b",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("04afe442-18d1-0495-51d3-58890577bb5b",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("04afe442-18d1-0495-51d3-58890577bb5b");
INSERT INTO R_FORM
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"a4c35f9a-c5b4-eaae-38ae-3ca3f3ef5c90",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"a4c35f9a-c5b4-eaae-38ae-3ca3f3ef5c90");
INSERT INTO R_OIR
	VALUES ("dc27a0c5-9aeb-7496-869e-6b56832a6574",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"a4c35f9a-c5b4-eaae-38ae-3ca3f3ef5c90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"57d2faa2-478b-1cef-5147-2772246e2fe2",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("84ddcde4-420a-81bb-0e63-a37ba74b47db",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"57d2faa2-478b-1cef-5147-2772246e2fe2");
INSERT INTO O_RTIDA
	VALUES ("771f345a-930d-d820-9d05-8e6dd803ce09",
	"72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	0,
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"57d2faa2-478b-1cef-5147-2772246e2fe2");
INSERT INTO R_RTO
	VALUES ("72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"57d2faa2-478b-1cef-5147-2772246e2fe2",
	0);
INSERT INTO R_OIR
	VALUES ("72752dbe-9a4b-7bda-3619-adf2b9f2a44b",
	"04afe442-18d1-0495-51d3-58890577bb5b",
	"57d2faa2-478b-1cef-5147-2772246e2fe2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("36237aff-4134-41a8-f262-0986b8f2a716",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("36237aff-4134-41a8-f262-0986b8f2a716",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("36237aff-4134-41a8-f262-0986b8f2a716");
INSERT INTO R_FORM
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"4fc03d1b-938a-d3c3-8537-84ef3f316629",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"4fc03d1b-938a-d3c3-8537-84ef3f316629");
INSERT INTO R_OIR
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"4fc03d1b-938a-d3c3-8537-84ef3f316629",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ff7ecd25-bd9b-7392-67c0-0509cae42510",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d");
INSERT INTO O_RTIDA
	VALUES ("4ac36f79-3a6c-d5d0-26f7-6aa75b937a63",
	"186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	0,
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d");
INSERT INTO R_RTO
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d",
	0);
INSERT INTO R_OIR
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"36237aff-4134-41a8-f262-0986b8f2a716",
	"a7bab041-16d7-3e06-5e58-2a0c15504d6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8");
INSERT INTO R_PART
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"cca18846-092a-91af-a999-d1c1622d8358",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("89957900-cbbb-bb0b-e87f-f5f85a621e05",
	"2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	0,
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"cca18846-092a-91af-a999-d1c1622d8358");
INSERT INTO R_RTO
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"cca18846-092a-91af-a999-d1c1622d8358",
	0);
INSERT INTO R_OIR
	VALUES ("2639b804-d413-9de2-3dbe-e6ab7ba30baf",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"cca18846-092a-91af-a999-d1c1622d8358",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"9dd73d7f-fae3-271f-4142-7c45e997ecb3",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"9dd73d7f-fae3-271f-4142-7c45e997ecb3");
INSERT INTO R_OIR
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"3c8b721d-9b2e-2eeb-e799-c7e0230a7ae8",
	"9dd73d7f-fae3-271f-4142-7c45e997ecb3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1e723725-54ca-477b-5ee6-adbbe46c3777",
	1,
	"96737f3d-962b-efda-68a8-edf9a798aed5",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1e723725-54ca-477b-5ee6-adbbe46c3777",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1e723725-54ca-477b-5ee6-adbbe46c3777");
INSERT INTO R_FORM
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"827a6568-0c53-bd46-aa4b-bf14e624bd29",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"827a6568-0c53-bd46-aa4b-bf14e624bd29");
INSERT INTO R_OIR
	VALUES ("186f8f24-b87e-6bf8-0ddc-5bee03af5b19",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"827a6568-0c53-bd46-aa4b-bf14e624bd29",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("7511b651-e130-959e-d060-a554185901ee",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("13387ff7-0b48-ea08-870a-64b3ae4aa158",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd");
INSERT INTO O_RTIDA
	VALUES ("9c246e7f-266f-f686-937e-814592509dc2",
	"7511b651-e130-959e-d060-a554185901ee",
	0,
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd");
INSERT INTO R_RTO
	VALUES ("7511b651-e130-959e-d060-a554185901ee",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd",
	0);
INSERT INTO R_OIR
	VALUES ("7511b651-e130-959e-d060-a554185901ee",
	"1e723725-54ca-477b-5ee6-adbbe46c3777",
	"ad9cdc92-9244-8c88-d355-3bfce7363edd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("f134585e-4a14-3d50-c9b5-39967e3f04f4",
	1,
	"e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("f134585e-4a14-3d50-c9b5-39967e3f04f4",
	"00000000-0000-0000-0000-000000000000",
	"8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("3352aed3-33bd-0bfc-d811-ce3b17cec9cb",
	112,
	"f134585e-4a14-3d50-c9b5-39967e3f04f4",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("3352aed3-33bd-0bfc-d811-ce3b17cec9cb",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	1,
	"e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	"8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("5809757c-8756-c596-5e2f-f1f43060eead",
	112,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("add0ef5e-e963-1a76-d6ba-a65becfbf809",
	"5809757c-8756-c596-5e2f-f1f43060eead",
	"fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("add0ef5e-e963-1a76-d6ba-a65becfbf809");
INSERT INTO GD_NCS
	VALUES ("add0ef5e-e963-1a76-d6ba-a65becfbf809");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"add0ef5e-e963-1a76-d6ba-a65becfbf809");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"add0ef5e-e963-1a76-d6ba-a65becfbf809",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("add0ef5e-e963-1a76-d6ba-a65becfbf809",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("03650028-0d5c-dea6-e5b4-fddf2fc9203c",
	"5809757c-8756-c596-5e2f-f1f43060eead",
	"30506817-5243-0ab0-bb82-3d3068356918",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("03650028-0d5c-dea6-e5b4-fddf2fc9203c");
INSERT INTO GD_NCS
	VALUES ("03650028-0d5c-dea6-e5b4-fddf2fc9203c");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"03650028-0d5c-dea6-e5b4-fddf2fc9203c");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"03650028-0d5c-dea6-e5b4-fddf2fc9203c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03650028-0d5c-dea6-e5b4-fddf2fc9203c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("11f64798-606c-052a-e2df-e218fdd0bfd7",
	"5809757c-8756-c596-5e2f-f1f43060eead",
	"66fb2f9d-fb62-147a-7a7a-04cc0ba5f938",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("11f64798-606c-052a-e2df-e218fdd0bfd7");
INSERT INTO GD_NCS
	VALUES ("11f64798-606c-052a-e2df-e218fdd0bfd7");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"11f64798-606c-052a-e2df-e218fdd0bfd7");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"11f64798-606c-052a-e2df-e218fdd0bfd7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("11f64798-606c-052a-e2df-e218fdd0bfd7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a51c0993-ac8c-4641-734b-1e2037389b16",
	"5809757c-8756-c596-5e2f-f1f43060eead",
	"612942c3-12a1-70de-d989-6fa6106b281e",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("a51c0993-ac8c-4641-734b-1e2037389b16");
INSERT INTO GD_NCS
	VALUES ("a51c0993-ac8c-4641-734b-1e2037389b16");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"a51c0993-ac8c-4641-734b-1e2037389b16");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"a51c0993-ac8c-4641-734b-1e2037389b16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a51c0993-ac8c-4641-734b-1e2037389b16",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("7ce97982-ace9-7a85-af11-1d394a51e2c8",
	"5809757c-8756-c596-5e2f-f1f43060eead",
	"2ec5d5bc-fe6a-f698-d5d7-db997beddab0",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("7ce97982-ace9-7a85-af11-1d394a51e2c8");
INSERT INTO GD_NCS
	VALUES ("7ce97982-ace9-7a85-af11-1d394a51e2c8");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"7ce97982-ace9-7a85-af11-1d394a51e2c8");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"7ce97982-ace9-7a85-af11-1d394a51e2c8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ce97982-ace9-7a85-af11-1d394a51e2c8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("5809757c-8756-c596-5e2f-f1f43060eead",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	1,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("fdbcf495-5bf5-e590-4cc6-84d98e6c6573",
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("30506817-5243-0ab0-bb82-3d3068356918",
	1,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("30506817-5243-0ab0-bb82-3d3068356918",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("30506817-5243-0ab0-bb82-3d3068356918",
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("66fb2f9d-fb62-147a-7a7a-04cc0ba5f938",
	1,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("66fb2f9d-fb62-147a-7a7a-04cc0ba5f938",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("66fb2f9d-fb62-147a-7a7a-04cc0ba5f938",
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("612942c3-12a1-70de-d989-6fa6106b281e",
	1,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("612942c3-12a1-70de-d989-6fa6106b281e",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("612942c3-12a1-70de-d989-6fa6106b281e",
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("2ec5d5bc-fe6a-f698-d5d7-db997beddab0",
	1,
	"69a93bd5-f9a8-9d61-a8a0-fec92a5e3b7f",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("2ec5d5bc-fe6a-f698-d5d7-db997beddab0",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("2ec5d5bc-fe6a-f698-d5d7-db997beddab0",
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'');
INSERT INTO PE_PE
	VALUES ("e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("d2f96273-d524-783c-f5c6-629c9727bf9c",
	"c942a37c-714a-b991-3adc-56b7f622166b",
	"e9f510fa-8eeb-2449-945b-c2e3d3641ae7",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("d2f96273-d524-783c-f5c6-629c9727bf9c");
INSERT INTO GD_NCS
	VALUES ("d2f96273-d524-783c-f5c6-629c9727bf9c");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"d2f96273-d524-783c-f5c6-629c9727bf9c");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"d2f96273-d524-783c-f5c6-629c9727bf9c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d2f96273-d524-783c-f5c6-629c9727bf9c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("8b17393e-9de6-2bae-484c-6fe3b8e9e5a9",
	'org.xtuml.bp.io.mdl.test',
	1,
	'../org.xtuml.bp.io.mdl.test.xtuml');
