//=====================================================================
//
// NOTE: This file was generated, but is maintained by hand.
// Generated by: UnitTestGenerator.pl
// Version:      1.15
// Matrix:       9761_9762_find_declarations_matrix.txt
//
//=====================================================================

package org.xtuml.bp.ui.text.test.opendeclarations;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.jface.text.Document;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.IRegion;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.text.Region;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IEditorActionDelegate;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.junit.After;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.xtuml.bp.core.ActionHome_c;
import org.xtuml.bp.core.Action_c;
import org.xtuml.bp.core.Association_c;
import org.xtuml.bp.core.Attribute_c;
import org.xtuml.bp.core.Body_c;
import org.xtuml.bp.core.BridgeBody_c;
import org.xtuml.bp.core.BridgeParameter_c;
import org.xtuml.bp.core.Bridge_c;
import org.xtuml.bp.core.Component_c;
import org.xtuml.bp.core.CorePlugin;
import org.xtuml.bp.core.CreationTransition_c;
import org.xtuml.bp.core.DerivedAttributeBody_c;
import org.xtuml.bp.core.DerivedBaseAttribute_c;
import org.xtuml.bp.core.ExecutableProperty_c;
import org.xtuml.bp.core.ExternalEntity_c;
import org.xtuml.bp.core.FunctionBody_c;
import org.xtuml.bp.core.FunctionParameter_c;
import org.xtuml.bp.core.Function_c;
import org.xtuml.bp.core.InstanceStateMachine_c;
import org.xtuml.bp.core.InterfaceReference_c;
import org.xtuml.bp.core.LocalEvent_c;
import org.xtuml.bp.core.ModelClass_c;
import org.xtuml.bp.core.MooreActionHome_c;
import org.xtuml.bp.core.NewStateTransition_c;
import org.xtuml.bp.core.NonLocalEvent_c;
import org.xtuml.bp.core.Ooaofooa;
import org.xtuml.bp.core.OperationBody_c;
import org.xtuml.bp.core.OperationParameter_c;
import org.xtuml.bp.core.Operation_c;
import org.xtuml.bp.core.Package_c;
import org.xtuml.bp.core.PackageableElement_c;
import org.xtuml.bp.core.PolymorphicEvent_c;
import org.xtuml.bp.core.Port_c;
import org.xtuml.bp.core.PropertyParameter_c;
import org.xtuml.bp.core.ProvidedExecutableProperty_c;
import org.xtuml.bp.core.ProvidedOperationBody_c;
import org.xtuml.bp.core.ProvidedOperation_c;
import org.xtuml.bp.core.ProvidedSignalBody_c;
import org.xtuml.bp.core.ProvidedSignal_c;
import org.xtuml.bp.core.Provision_c;
import org.xtuml.bp.core.RequiredExecutableProperty_c;
import org.xtuml.bp.core.RequiredOperationBody_c;
import org.xtuml.bp.core.RequiredOperation_c;
import org.xtuml.bp.core.RequiredSignalBody_c;
import org.xtuml.bp.core.RequiredSignal_c;
import org.xtuml.bp.core.Requirement_c;
import org.xtuml.bp.core.SemEvent_c;
import org.xtuml.bp.core.StateActionBody_c;
import org.xtuml.bp.core.StateEventMatrixEntry_c;
import org.xtuml.bp.core.StateMachineEventDataItem_c;
import org.xtuml.bp.core.StateMachineEvent_c;
import org.xtuml.bp.core.StateMachineState_c;
import org.xtuml.bp.core.StateMachine_c;
import org.xtuml.bp.core.TransitionActionBody_c;
import org.xtuml.bp.core.TransitionActionHome_c;
import org.xtuml.bp.core.Transition_c;
import org.xtuml.bp.core.common.BridgePointPreferencesStore;
import org.xtuml.bp.core.common.ClassQueryInterface_c;
import org.xtuml.bp.core.common.MultipleOccurrenceElement;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.core.ui.Selection;
import org.xtuml.bp.core.util.ActionLanguageDescriptionUtil;
import org.xtuml.bp.core.util.DocumentUtil;
import org.xtuml.bp.test.common.BaseTest;
import org.xtuml.bp.test.common.CanvasEditorUtils;
import org.xtuml.bp.test.common.CanvasTestUtils;
import org.xtuml.bp.test.common.ExplorerUtil;
import org.xtuml.bp.test.common.OrderedRunner;
import org.xtuml.bp.test.common.UITestingUtilities;
import org.xtuml.bp.ui.canvas.Connector_c;
import org.xtuml.bp.ui.canvas.GraphicalElement_c;
import org.xtuml.bp.ui.canvas.test.CanvasTest;
import org.xtuml.bp.ui.graphics.editor.GraphicalEditor;
import org.xtuml.bp.ui.graphics.editor.ModelEditor;
import org.xtuml.bp.ui.graphics.parts.ConnectorEditPart;
import org.xtuml.bp.ui.graphics.parts.ShapeEditPart;
import org.xtuml.bp.ui.text.activity.ActivityEditor;
import org.xtuml.bp.ui.text.activity.ParseAllActivitiesAction;

import junit.framework.TestCase;

@RunWith(OrderedRunner.class)
public class OpenDeclarationsTests extends CanvasTest {
    
    protected static boolean generateResults;
    
    // OpenDeclarationAction instance
    private static IEditorActionDelegate openDeclarationAction = null;

    String test_id = "";
    protected String getResultName() {
        return getClass().getSimpleName() + "_" + test_id;
    }

    // private testing fields
    private GraphicalEditor fActiveEditor;
    private Body_c testBody;
    private Object testElement;
    private NonRootModelElement activityElement;
    private IDocument testDocument;
    private IRegion wordRegion;
    private IRegion cursorPosition;
    
    // constructor
    public OpenDeclarationsTests(String subTypeClassName, String subTypeArg0) {
        super(null, subTypeArg0);
    }

    protected GraphicalEditor getActiveEditor() {
        return fActiveEditor;
    }

    protected String getTestId(String src, String dest, String count) {
        return "test_" + count;
    }

    @Override
    protected void initialSetup() throws Exception {
        // enable parsing invocations in where clauses
        CorePlugin.getDefault().getPreferenceStore().setValue(BridgePointPreferencesStore.ALLOW_OPERATIONS_IN_WHERE, true);
        // load the test model
        loadProject("oal_open_declarations");
        m_sys = getSystemModel("oal_open_declarations");
        modelRoot = Ooaofooa.getInstance("/oal_open_declarations/models/oal_open_declarations/MainPackage/MainPackage.xtuml");
        // parse all activities
        Selection.getInstance().clear(); Selection.getInstance().addToSelection(m_sys);
        ParseAllActivitiesAction action = new ParseAllActivitiesAction();
        action.run(null);
        // use reflection to get the open declaration action
        Class<?> openDeclarationActionClass = Class.forName( "org.xtuml.bp.ui.text.activity.OpenDeclarationAction" );
        if ( null != openDeclarationActionClass ) {
            openDeclarationAction = (IEditorActionDelegate) openDeclarationActionClass.newInstance();
        }
    };

    @Before
    public void setUp() throws Exception {
        super.setUp();
        assertNotNull( "Open declarations is not implemented for the OAL editor", openDeclarationAction );
    }

    // example of test name: testP01M01C01_L01T01E01
    private Object getTestElement( String element ) {
        String t = element.substring( 3, 6 );
        String e = element.substring( 6, 9 );
        Component_c containing_component = Component_c.ComponentInstance( modelRoot, new ClassQueryInterface_c() {
              @Override
              public boolean evaluate(Object candidate) {
                  return ((Component_c)candidate).getId().equals( testBody.Getcontainingcomponentid() );
              }
        });
        switch (t) {
        case "T01":
            // return the first Variable location as offset
            String documentText = testDocument.get();
            return documentText.indexOf( t + e );
        case "T02":
            return ModelClass_c.ModelClassInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((ModelClass_c) candidate).getName().equals(t + e);
                }
            });
        case "T03":
            return Function_c.FunctionInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Function_c) candidate).getName().equals(t + e);
                }
            });
        case "T04":
            return ExternalEntity_c.ExternalEntityInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((ExternalEntity_c) candidate).getName().equals(t + e);
                }
            });
        case "T05":
            return Port_c.getOneC_POOnR4010( containing_component, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Port_c) candidate).getName().equals(t + e);
                }
            });
        case "T06":
            return StateMachineEvent_c.StateMachineEventInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((StateMachineEvent_c) candidate).getMning().equals(t + e);
                }
            });
        case "T07":
            return Operation_c.OperationInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Operation_c) candidate).getName().equals(t + e);
                }
            });
        case "T08":
            return Bridge_c.BridgeInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Bridge_c) candidate).getName().equals(t + e);
                }
            });
        case "T09":
            ProvidedOperation_c spr_po = ProvidedOperation_c.getOneSPR_POOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(
                    Provision_c.getManyC_PsOnR4009(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(containing_component)))), new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((ProvidedOperation_c) candidate).getName().equals(t + e);
                }
            });
            if ( null != spr_po ) return spr_po;
            else return RequiredOperation_c.getOneSPR_ROOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(
                    Requirement_c.getManyC_RsOnR4009(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(containing_component)))), new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((RequiredOperation_c) candidate).getName().equals(t + e);
                }
            });
        case "T10":
            ProvidedSignal_c spr_ps = ProvidedSignal_c.getOneSPR_PSOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(
                    Provision_c.getManyC_PsOnR4009(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(containing_component)))), new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((ProvidedSignal_c) candidate).getName().equals(t + e);
                }
            });
            if ( null != spr_ps ) return spr_ps;
            else return RequiredSignal_c.getOneSPR_RSOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(
                    Requirement_c.getManyC_RsOnR4009(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(containing_component)))), new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((RequiredSignal_c) candidate).getName().equals(t + e);
                }
            });
        case "T11":
            if (activityElement instanceof Operation_c) {
                return OperationParameter_c.getOneO_TPARMOnR117((Operation_c) activityElement, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((OperationParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof Bridge_c) {
                return BridgeParameter_c.getOneS_BPARMOnR21((Bridge_c) activityElement, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((BridgeParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof Function_c) {
                return FunctionParameter_c.getOneS_SPARMOnR24((Function_c) activityElement, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((FunctionParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof ProvidedSignal_c) {
                return PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4501(
                        ProvidedExecutableProperty_c.getManySPR_PEPsOnR4503((ProvidedSignal_c) activityElement)), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((PropertyParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof ProvidedOperation_c) {
                return PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4501(
                        ProvidedExecutableProperty_c.getManySPR_PEPsOnR4503((ProvidedOperation_c) activityElement)), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((PropertyParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof RequiredSignal_c) {
                return PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4500(
                        RequiredExecutableProperty_c.getManySPR_REPsOnR4502((RequiredSignal_c) activityElement)), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((PropertyParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof RequiredOperation_c) {
                return PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4500(
                        RequiredExecutableProperty_c.getManySPR_REPsOnR4502((RequiredOperation_c) activityElement)), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((PropertyParameter_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof Transition_c) {
                return getParameterForTransition( (Transition_c)activityElement, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((StateMachineEventDataItem_c) candidate).getName().equals(t + e);
                    }
                });
            }
            if (activityElement instanceof StateMachineState_c) {
                return getParameterForTransition( Transition_c.getOneSM_TXNOnR506((StateMachineState_c)activityElement), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((StateMachineEventDataItem_c) candidate).getName().equals(t + e);
                    }
                });
            }
        case "T12":
            // in this section, because of the inability to name
            // relationships freeform, relationships have been
            // numbered such that in each case, if 'R99' is replaced
            // by 'T12E', the relationship specification will match
            // the desired DOF selection
            return Association_c.AssociationInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Association_c) candidate).getNumb() == 9900 + Integer.parseInt(e.substring(1));
                }
            });
        case "T13":
            return Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {
                @Override
                public boolean evaluate(Object candidate) {
                    return ((Attribute_c) candidate).getName().equals(t + e);
                }
            });
        default:
            break;
        }
        return null;
    }

    // example of test name: testP01M01C01_L01T01E01
    private NonRootModelElement getActivityElement( String element ) {
        NonRootModelElement activityElement = null;
        final String l = element.substring( 0, 3 );
        switch ( l ) {
            case "L01":
                RequiredSignal_c rs = RequiredSignal_c.getOneSPR_RSOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(Requirement_c.getManyC_RsOnR4009(
                        InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(Component_c.getOneC_COnR8001(PackageableElement_c.getOnePE_PEOnR8000(
                        Package_c.getOneEP_PKGOnR1405( m_sys, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Package_c)candidate).getName().equals( l );
                    }
                        }))))))), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((RequiredSignal_c)candidate).getName().equals( l );
                    }
                });
                activityElement = rs;
                testBody = Body_c.getOneACT_ACTOnR698(RequiredSignalBody_c.getOneACT_RSBOnR684(rs));
                break;
            case "L02":
                RequiredOperation_c ro = RequiredOperation_c.getOneSPR_ROOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(Requirement_c.getManyC_RsOnR4009(
                        InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(Component_c.getOneC_COnR8001(PackageableElement_c.getOnePE_PEOnR8000(
                        Package_c.getOneEP_PKGOnR1405( m_sys, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Package_c)candidate).getName().equals( l );
                    }
                        }))))))), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((RequiredOperation_c)candidate).getName().equals( l );
                    }
                });
                activityElement = ro;
                testBody = Body_c.getOneACT_ACTOnR698(RequiredOperationBody_c.getOneACT_ROBOnR685(ro));
                break;
            case "L03":
                ProvidedSignal_c ps = ProvidedSignal_c.getOneSPR_PSOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(Provision_c.getManyC_PsOnR4009(
                        InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(Component_c.getOneC_COnR8001(PackageableElement_c.getOnePE_PEOnR8000(
                        Package_c.getOneEP_PKGOnR1405( m_sys, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Package_c)candidate).getName().equals( l );
                    }
                        }))))))), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((ProvidedSignal_c)candidate).getName().equals( l );
                    }
                });
                activityElement = ps;
                testBody = Body_c.getOneACT_ACTOnR698(ProvidedSignalBody_c.getOneACT_PSBOnR686(ps));
                break;
            case "L04":
                ProvidedOperation_c po = ProvidedOperation_c.getOneSPR_POOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(Provision_c.getManyC_PsOnR4009(
                        InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(Component_c.getOneC_COnR8001(PackageableElement_c.getOnePE_PEOnR8000(
                        Package_c.getOneEP_PKGOnR1405( m_sys, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Package_c)candidate).getName().equals( l );
                    }
                        }))))))), new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((ProvidedOperation_c)candidate).getName().equals( l );
                    }
                });
                activityElement = po;
                testBody = Body_c.getOneACT_ACTOnR698(ProvidedOperationBody_c.getOneACT_POBOnR687(po));
                break;
            case "L05":
                // For transitions, since transitions dont have names, select through the model class name
                ModelClass_c l05class = ModelClass_c.ModelClassInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((ModelClass_c)candidate).getName().equals( l );
                    }
                });
                Transition_c transition = Transition_c.getOneSM_TXNOnR505(StateMachine_c.getOneSM_SMOnR517(InstanceStateMachine_c.getOneSM_ISMOnR518(l05class)));
                activityElement = transition;
                testBody = Body_c.getOneACT_ACTOnR698(TransitionActionBody_c.getOneACT_TABOnR688(Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(TransitionActionHome_c.getOneSM_TAHOnR530(transition)))));
                break;
            case "L06":
                StateMachineState_c state = StateMachineState_c.StateMachineStateInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((StateMachineState_c)candidate).getName().equals( l );
                    }
                });
                activityElement = state;
                testBody = Body_c.getOneACT_ACTOnR698(StateActionBody_c.getOneACT_SABOnR691(Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(MooreActionHome_c.getOneSM_MOAHOnR511(state)))));
                break;
            case "L07":
                DerivedBaseAttribute_c dba = DerivedBaseAttribute_c.DerivedBaseAttributeInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((DerivedBaseAttribute_c)candidate).getName().equals( l );
                    }
                });
                activityElement = dba;
                testBody = Body_c.getOneACT_ACTOnR698(DerivedAttributeBody_c.getOneACT_DABOnR693(dba));
                break;
            case "L08":
                Function_c function = Function_c.FunctionInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Function_c)candidate).getName().equals( l );
                    }
                });
                activityElement = function;
                testBody = Body_c.getOneACT_ACTOnR698(FunctionBody_c.getOneACT_FNBOnR695(function));
                break;
            case "L09":
                Operation_c operation = Operation_c.OperationInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Operation_c)candidate).getName().equals( l );
                    }
                });
                activityElement = operation;
                testBody = Body_c.getOneACT_ACTOnR698(OperationBody_c.getOneACT_OPBOnR696(operation));
                break;
            case "L10":
                Bridge_c bridge = Bridge_c.BridgeInstance( modelRoot, new ClassQueryInterface_c() {
                    @Override
                    public boolean evaluate(Object candidate) {
                        return ((Bridge_c)candidate).getName().equals( l );
                    }
                });
                activityElement = bridge;
                testBody = Body_c.getOneACT_ACTOnR698(BridgeBody_c.getOneACT_BRBOnR697(bridge));
                break;
            default:
                break;
        }
        return activityElement;
    }
    
    private IRegion getTestWord( String element ) {
        String documentText = testDocument.get();
        String t = element.substring( 3, 6 );
        String e = element.substring( 6, 9 );
        Matcher commentMatcher = Pattern.compile( "\\/\\/ (" + t + " " + e + ")" ).matcher( documentText );
        assertTrue( "No test in the model for '" + element + "'", commentMatcher.find() );
        int commentLine = DocumentUtil.positionToLine( commentMatcher.start( 1 ), testDocument );
        String testLine = documentText.substring( DocumentUtil.lineAndColumnToPosition( commentLine + 1, 1, testDocument),
                                                  DocumentUtil.lineAndColumnToPosition( commentLine + 2, 1, testDocument) );
        int lineOffset = 0;
        int wordLength = 0;
        // for T06 we want to select the entire event
        // spec, not just the event Mning
        if ( element.contains("T06") ) {
            Matcher matcher = Pattern.compile( "\\s(\\S*:" + t + e + ")" ).matcher( testLine );
            if ( matcher.find() ) {
                lineOffset = matcher.start( 1 );
                wordLength = matcher.group( 1 ).length();
            }
        }
        // for T02E09 and T02E12, the name of the class
        // is in the event label, so we must grab the last
        // occurrence of it on the line
        else if ( element.contains("T02") && ( element.contains("E09") || element.contains("E12") ) ) {
            lineOffset = testLine.lastIndexOf( t + e );
            wordLength = (t + e).length();
        }
        else if ( element.contains("T12") ) {
            // in this section, because of the inability to name
            // relationships freeform, relationships have been
            // numbered such that in each case, if 'R99' is replaced
            // by 'T12E', the relationship specification will match
            // the desired DOF selection
            lineOffset = testLine.indexOf( "R99" + e.substring( 1 ) );
            wordLength = ( "R99" + e.substring( 1 ) ).length();
        }
        else {
            lineOffset = testLine.indexOf( t + e );
            wordLength = (t + e).length();
        }
        return new Region( DocumentUtil.lineAndColumnToPosition( commentLine + 1, 1, testDocument) + lineOffset, wordLength );
    }
    
    private IRegion getCursorPosition( String element, IRegion region ) {
        if ( element.contains("P01") ) {
            // set the cursor at the beginning of the word
            return new Region( region.getOffset(), 0 );
        }
        else if ( element.contains("P02") ) {
            // set the cursor somewhere in the middle of the word
            return new Region( region.getOffset() + 1, 0 );
        }
        else if ( element.contains("P03") ) {
            // set the cursor at the end of the word
            return new Region( region.getOffset() + region.getLength(), 0 );
        }
        else return null;
    }

    private void setupCanvas( String element ) {
        if (element.contains("C2")) {
            // open the canvas editor for this test
            fActiveEditor = CanvasEditorUtils.openEditorWithShapeOf(testBody);
        } else {
            // nothing to do as the tear down makes sure
            // only the editor for the OAL is opened
        }
    }

    private void setupModelExplorer( String element ) {
        if (element.contains("M2")) {
            // open model explorer view
            try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
                        .showView("org.xtuml.bp.ui.explorer.ExplorerView");
            } catch (PartInitException e) {
                TestCase.fail("Unable to open Model Explorer.");
            }
        } else {
            // nothing to do as the tear down makes sure
            // only the editor for the OAL is opened
        }
    }

    @After
    public void tearDown() throws Exception {
        // close all editors
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().closeAllEditors(false);
        ExplorerUtil.getTreeViewer().setSelection(StructuredSelection.EMPTY);
        super.tearDown();
    }

    /**
     * "PMC" is one of the degrees of freedom as specified in this issues test
     * matrix. This routine gets the "PMC" instance from the given name.
     * 
     * @param element
     *            The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectPMC(String element) {
        return selectPMC(element, null);
    }

    /**
     * "PMC" is one of the degrees of freedom as specified in this issues test
     * matrix. This routine gets the "PMC" instance from the given name.
     * 
     * @param element
     *            The degree of freedom instance to retrieve
     * @param extraData
     *            Extra data needed for selection
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectPMC(String element, Object extraData) {
        // get the cursor position in the document based on the P value and selected test word
        cursorPosition = getCursorPosition( element, wordRegion );
        // set up model explorer based on the M value
        setupModelExplorer( element );
        // set up the canvas based on the C value
        setupCanvas( element );
        return null;
    }

    /**
     * "LTE" is one of the degrees of freedom as specified in this issues test
     * matrix. This routine gets the "LTE" instance from the given name.
     * 
     * @param element
     *            The degree of freedom instance to retrieve
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectLTE(String element) {
        return selectLTE(element, null);
    }

    /**
     * "LTE" is one of the degrees of freedom as specified in this issues test
     * matrix. This routine gets the "LTE" instance from the given name.
     * 
     * @param element
     *            The degree of freedom instance to retrieve
     * @param extraData
     *            Extra data needed for selection
     * @return A model element used in the test as specified by the test matrix
     */
    NonRootModelElement selectLTE(String element, Object extraData) {
        // get the activity element and body from the L value
        activityElement = getActivityElement( element );
        assertNotNull("Could not locate test body.", activityElement);
        testDocument = new Document(getActionLanguageFromElement(activityElement));
        wordRegion = getTestWord( element );
        // get the test element from the T and E values
        testElement = getTestElement( element );
        assertNotNull("Could not locate test element.", testElement);
        return null;
    }

    /**
     * This routine performs the action associated with a matrix cell. The
     * parameters represent model instances aquired based on the specifed column
     * instance and row instance.
     * 
     * @param columnInstance
     *            Model instance from the column
     * @param rowInstance
     *            Model instance from the row
     */
    void PMC_LTE_Action(NonRootModelElement columnInstance, NonRootModelElement rowInstance) {
        // make sure the activity editor is open
        CanvasTestUtils.openActivityEditor(activityElement);
        // get editor and set cursor position
        ActivityEditor editor = (ActivityEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        assertFalse( "There are error markers in the body", editor.getDocumentProvider().getAnnotationModel(editor.getEditorInput()).getAnnotationIterator().hasNext() );
        editor.getTextViewer().setSelection(new TextSelection(cursorPosition.getOffset(), cursorPosition.getLength()));
        // execute the open declaration action
        openDeclarationAction.setActiveEditor(null, PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor());
        openDeclarationAction.run(null);
    }

    

    /**
     * This function verifies an expected result.
     *
     * @param source
     *            A model element instance aquired through a action taken on a
     *            column of the matrix.
     * @param destination
     *            A model element instance aquired through a action taken taken
     *            on a row of the matrix.
     * @return true if the test succeeds, false if it fails
     */
    boolean checkResult_elementShownInMEandCanvas(NonRootModelElement source, NonRootModelElement destination) {
        BaseTest.dispatchEvents();
        // locate selection in ME, assure diagram is opened
        IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        boolean diagramOpened = editor != null && ( editor instanceof GraphicalEditor || editor instanceof ModelEditor );
        if(!diagramOpened) {
            return false;
        }
        IStructuredSelection selection = ((StructuredSelection) ExplorerUtil.getTreeViewer().getSelection());
        IStructuredSelection canvasSelection = ((StructuredSelection) UITestingUtilities.getActiveEditor().getSite().getSelectionProvider().getSelection());
        return getElementFromTreeSelection( selection ) == testElement && getElementFromCanvasSelection( canvasSelection ) == testElement;
    }

    /**
     * This function verifies an expected result.
     *
     * @param source
     *            A model element instance aquired through a action taken on a
     *            column of the matrix.
     * @param destination
     *            A model element instance aquired through a action taken taken
     *            on a row of the matrix.
     * @return true if the test succeeds, false if it fails
     */
    boolean checkResult_transientDeclarationShown(NonRootModelElement source, NonRootModelElement destination) {
        BaseTest.dispatchEvents();
        ActivityEditor editor = (ActivityEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        ITextSelection selection = (ITextSelection) editor.getSelectionProvider().getSelection();
        if ( testElement instanceof Integer ) {
            return ((Integer)testElement).equals(selection.getOffset());
        }
        else return false;
    }

    /**
     * This function verifies an expected result.
     *
     * @param source
     *            A model element instance aquired through a action taken on a
     *            column of the matrix.
     * @param destination
     *            A model element instance aquired through a action taken taken
     *            on a row of the matrix.
     * @return true if the test succeeds, false if it fails
     */
    boolean checkResult_elementShownInMENotCanvas(NonRootModelElement source, NonRootModelElement destination) {
        BaseTest.dispatchEvents();
        // locate selection in ME, assure no diagram is opened
        IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        boolean diagramOpened = editor != null && ( editor instanceof GraphicalEditor || editor instanceof ModelEditor );
        if(diagramOpened) {
            return false;
        }
        IStructuredSelection selection = ((StructuredSelection) ExplorerUtil.getTreeViewer().getSelection());
        return getElementFromTreeSelection( selection ) == testElement;
    }

    /**
     * This function verifies an expected result.
     *
     * @param source
     *            A model element instance aquired through a action taken on a
     *            column of the matrix.
     * @param destination
     *            A model element instance aquired through a action taken taken
     *            on a row of the matrix.
     * @return true if the test succeeds, false if it fails
     */
    boolean checkResult_elementShownInCanvasNotME(NonRootModelElement source, NonRootModelElement destination) {
        BaseTest.dispatchEvents();
        // locate selection in ME, assure no diagram is opened
        IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        boolean diagramOpened = editor != null && ( editor instanceof GraphicalEditor || editor instanceof ModelEditor );
        if (!diagramOpened) {
            return false;
        }
        IStructuredSelection selection = ((StructuredSelection) UITestingUtilities.getActiveEditor().getSite()
                .getSelectionProvider().getSelection());
        return getElementFromCanvasSelection( selection ) == testElement;
    }

    /**
     * This function verifies an expected result.
     *
     * @param source
     *            A model element instance aquired through a action taken on a
     *            column of the matrix.
     * @param destination
     *            A model element instance aquired through a action taken taken
     *            on a row of the matrix.
     * @return true if the test succeeds, false if it fails
     */
    boolean checkResult_invalidSelection(NonRootModelElement source, NonRootModelElement destination) {
        BaseTest.dispatchEvents();
        // no selection should be made in either canvas or ME
        // locate selection in ME, assure no diagram is opened
        IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
        boolean diagramOpened = editor != null && ( editor instanceof GraphicalEditor || editor instanceof ModelEditor );
        if(diagramOpened) {
            return false;
        }
        IStructuredSelection selection = ((StructuredSelection) ExplorerUtil.getTreeViewer().getSelection());
        return selection.getFirstElement() != testElement;

    }
    
    private NonRootModelElement getElementFromCanvasSelection( IStructuredSelection canvasSelection ) {
        assertTrue( "Selected element on canvas is not a shape or connector.", ( canvasSelection.getFirstElement() instanceof ShapeEditPart ||
                                                                                 canvasSelection.getFirstElement() instanceof ConnectorEditPart ) );
        if ( canvasSelection.getFirstElement() instanceof ShapeEditPart ) {
            return (NonRootModelElement)((ShapeEditPart)canvasSelection.getFirstElement()).getGraphicalElement().getRepresents();
        }
        else {
            NonRootModelElement connectorElement = (NonRootModelElement)GraphicalElement_c.getOneGD_GEOnR2(((Connector_c)((ConnectorEditPart)canvasSelection.getFirstElement()).getModel())).getRepresents();
            if ( connectorElement instanceof Provision_c ) {
                connectorElement = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009((Provision_c)connectorElement));
            }
            else if ( connectorElement instanceof Requirement_c ) {
                connectorElement = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009((Requirement_c)connectorElement));
            }
            return connectorElement;
        }
    }

    private NonRootModelElement getElementFromTreeSelection( IStructuredSelection selection ) {
        if ( selection.getFirstElement() instanceof MultipleOccurrenceElement ) return ((MultipleOccurrenceElement)selection.getFirstElement()).getElement();
        else return (NonRootModelElement)selection.getFirstElement();
    }
    
    private StateMachineEventDataItem_c getParameterForTransition( Transition_c transition, ClassQueryInterface_c where ) {
        StateMachineEventDataItem_c v_sm_act_param = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532(StateMachineEvent_c.getManySM_EVTsOnR525(SemEvent_c.getManySM_SEVTsOnR526(LocalEvent_c.getManySM_LEVTsOnR509(CreationTransition_c.getManySM_CRTXNsOnR507(transition)))), where );
        if ( null == v_sm_act_param ) {
            v_sm_act_param = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532(StateMachineEvent_c.getManySM_EVTsOnR525(SemEvent_c.getManySM_SEVTsOnR503(StateEventMatrixEntry_c.getManySM_SEMEsOnR504(NewStateTransition_c.getManySM_NSTXNsOnR507(transition)))), where );
                if ( null == v_sm_act_param ) {
                v_sm_act_param = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532(StateMachineEvent_c.getManySM_EVTsOnR525(PolymorphicEvent_c.getManySM_PEVTsOnR527(NonLocalEvent_c.getManySM_NLEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR503(StateEventMatrixEntry_c.getManySM_SEMEsOnR504(NewStateTransition_c.getManySM_NSTXNsOnR507(transition)))))), where );
            }
        }
        return v_sm_act_param;
    }
    
    private String getActionLanguageFromElement( NonRootModelElement element ) {
        NonRootModelElement baseElement = element;
        if ( element instanceof Transition_c ) {
            baseElement = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(TransitionActionHome_c.getOneSM_TAHOnR530((Transition_c)element)));
        }
        else if ( element instanceof StateMachineState_c ) {
            baseElement = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(MooreActionHome_c.getOneSM_MOAHOnR511((StateMachineState_c)element)));
        }
        return ActionLanguageDescriptionUtil.getActionLanguageAttributeValue( baseElement );
    }

}
