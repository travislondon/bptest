module org.xtuml.bp.xtext.masl.GenerateMASL

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.xtuml.bp.xtext.generator.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.mwe2.ecore.*
var rootPath = ".."

Workflow {
	// generate the MaslBase Ecore package first
	bean = StandaloneSetup {
		platformUri = '..'
	}
	
	// now generate the MASL language
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.xtuml.bp.xtext.masl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true 
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			referencedResource = "platform:/resource/org.xtuml.bp.xtext.masl/model/MaslBehavior.xcore"
			referencedResource = "platform:/resource/org.xtuml.bp.xtext.masl/model/MaslStructure.xcore"
			referencedResource = "platform:/resource/org.xtuml.bp.xtext.masl/model/MaslTypes.xcore"
			name = "org.xtuml.bp.xtext.masl.MASL"
			fileExtensions = "mod,tr,ext,scn,al,int,svc,prj,fn,masl"
			serializer = {
				generateStub = false
			}
			parserGenerator = {
				debugGrammar=true
				// needed for custom lexer
				combinedGrammar = false
				options = {
					// avoids syntactic analysis of abstract rules
					skipUnusedRules = true
				}
			}
			formatter = {
				generateStub=true
			}
			junitSupport = {
				generateStub = false
			}
			generator = {
				generateStub = false
			}
			// custom lexer
			fragment = JFlexFragment {}
		}
	}
}
