/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.types.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtuml.bp.xtext.masl.masl.structure.TerminatorDefinition;

import org.xtuml.bp.xtext.masl.masl.types.TerminatorTypeReference;
import org.xtuml.bp.xtext.masl.masl.types.TypesPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminator Type Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.types.impl.TerminatorTypeReferenceImpl#getTerminator <em>Terminator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminatorTypeReferenceImpl extends AbstractTypeReferenceImpl implements TerminatorTypeReference {
	/**
	 * The cached value of the '{@link #getTerminator() <em>Terminator</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTerminator()
	 * @generated
	 * @ordered
	 */
	protected TerminatorDefinition terminator;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminatorTypeReferenceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return TypesPackage.Literals.TERMINATOR_TYPE_REFERENCE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TerminatorDefinition getTerminator() {
		if (terminator != null && terminator.eIsProxy()) {
			InternalEObject oldTerminator = (InternalEObject)terminator;
			terminator = (TerminatorDefinition)eResolveProxy(oldTerminator);
			if (terminator != oldTerminator) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR, oldTerminator, terminator));
			}
		}
		return terminator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TerminatorDefinition basicGetTerminator() {
		return terminator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTerminator(TerminatorDefinition newTerminator) {
		TerminatorDefinition oldTerminator = terminator;
		terminator = newTerminator;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR, oldTerminator, terminator));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR:
				if (resolve) return getTerminator();
				return basicGetTerminator();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR:
				setTerminator((TerminatorDefinition)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR:
				setTerminator((TerminatorDefinition)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case TypesPackage.TERMINATOR_TYPE_REFERENCE__TERMINATOR:
				return terminator != null;
		}
		return super.eIsSet(featureID);
	}

} //TerminatorTypeReferenceImpl
