/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.masl.structure.Characteristic;
import org.xtuml.bp.xtext.masl.masl.structure.StructurePackage;
import org.xtuml.bp.xtext.masl.masl.structure.TypeParameter;

import org.xtuml.bp.xtext.masl.masl.types.AbstractTypeReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Characteristic</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.CharacteristicImpl#isForValue <em>For Value</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.CharacteristicImpl#getTypeParams <em>Type Params</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.CharacteristicImpl#getReceiverType <em>Receiver Type</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.CharacteristicImpl#getReturnType <em>Return Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CharacteristicImpl extends ParameterizedImpl implements Characteristic {
	/**
	 * The default value of the '{@link #isForValue() <em>For Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isForValue()
	 * @generated
	 * @ordered
	 */
	protected static final boolean FOR_VALUE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isForValue() <em>For Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isForValue()
	 * @generated
	 * @ordered
	 */
	protected boolean forValue = FOR_VALUE_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTypeParams() <em>Type Params</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTypeParams()
	 * @generated
	 * @ordered
	 */
	protected EList<TypeParameter> typeParams;

	/**
	 * The cached value of the '{@link #getReceiverType() <em>Receiver Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReceiverType()
	 * @generated
	 * @ordered
	 */
	protected AbstractTypeReference receiverType;

	/**
	 * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReturnType()
	 * @generated
	 * @ordered
	 */
	protected AbstractTypeReference returnType;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacteristicImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return StructurePackage.Literals.CHARACTERISTIC;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isForValue() {
		return forValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setForValue(boolean newForValue) {
		boolean oldForValue = forValue;
		forValue = newForValue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.CHARACTERISTIC__FOR_VALUE, oldForValue, forValue));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TypeParameter> getTypeParams() {
		if (typeParams == null) {
			typeParams = new EObjectContainmentEList<TypeParameter>(TypeParameter.class, this, StructurePackage.CHARACTERISTIC__TYPE_PARAMS);
		}
		return typeParams;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractTypeReference getReceiverType() {
		return receiverType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetReceiverType(AbstractTypeReference newReceiverType, NotificationChain msgs) {
		AbstractTypeReference oldReceiverType = receiverType;
		receiverType = newReceiverType;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StructurePackage.CHARACTERISTIC__RECEIVER_TYPE, oldReceiverType, newReceiverType);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setReceiverType(AbstractTypeReference newReceiverType) {
		if (newReceiverType != receiverType) {
			NotificationChain msgs = null;
			if (receiverType != null)
				msgs = ((InternalEObject)receiverType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StructurePackage.CHARACTERISTIC__RECEIVER_TYPE, null, msgs);
			if (newReceiverType != null)
				msgs = ((InternalEObject)newReceiverType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StructurePackage.CHARACTERISTIC__RECEIVER_TYPE, null, msgs);
			msgs = basicSetReceiverType(newReceiverType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.CHARACTERISTIC__RECEIVER_TYPE, newReceiverType, newReceiverType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractTypeReference getReturnType() {
		return returnType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetReturnType(AbstractTypeReference newReturnType, NotificationChain msgs) {
		AbstractTypeReference oldReturnType = returnType;
		returnType = newReturnType;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StructurePackage.CHARACTERISTIC__RETURN_TYPE, oldReturnType, newReturnType);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setReturnType(AbstractTypeReference newReturnType) {
		if (newReturnType != returnType) {
			NotificationChain msgs = null;
			if (returnType != null)
				msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StructurePackage.CHARACTERISTIC__RETURN_TYPE, null, msgs);
			if (newReturnType != null)
				msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StructurePackage.CHARACTERISTIC__RETURN_TYPE, null, msgs);
			msgs = basicSetReturnType(newReturnType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.CHARACTERISTIC__RETURN_TYPE, newReturnType, newReturnType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case StructurePackage.CHARACTERISTIC__TYPE_PARAMS:
				return ((InternalEList<?>)getTypeParams()).basicRemove(otherEnd, msgs);
			case StructurePackage.CHARACTERISTIC__RECEIVER_TYPE:
				return basicSetReceiverType(null, msgs);
			case StructurePackage.CHARACTERISTIC__RETURN_TYPE:
				return basicSetReturnType(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case StructurePackage.CHARACTERISTIC__FOR_VALUE:
				return isForValue();
			case StructurePackage.CHARACTERISTIC__TYPE_PARAMS:
				return getTypeParams();
			case StructurePackage.CHARACTERISTIC__RECEIVER_TYPE:
				return getReceiverType();
			case StructurePackage.CHARACTERISTIC__RETURN_TYPE:
				return getReturnType();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case StructurePackage.CHARACTERISTIC__FOR_VALUE:
				setForValue((Boolean)newValue);
				return;
			case StructurePackage.CHARACTERISTIC__TYPE_PARAMS:
				getTypeParams().clear();
				getTypeParams().addAll((Collection<? extends TypeParameter>)newValue);
				return;
			case StructurePackage.CHARACTERISTIC__RECEIVER_TYPE:
				setReceiverType((AbstractTypeReference)newValue);
				return;
			case StructurePackage.CHARACTERISTIC__RETURN_TYPE:
				setReturnType((AbstractTypeReference)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case StructurePackage.CHARACTERISTIC__FOR_VALUE:
				setForValue(FOR_VALUE_EDEFAULT);
				return;
			case StructurePackage.CHARACTERISTIC__TYPE_PARAMS:
				getTypeParams().clear();
				return;
			case StructurePackage.CHARACTERISTIC__RECEIVER_TYPE:
				setReceiverType((AbstractTypeReference)null);
				return;
			case StructurePackage.CHARACTERISTIC__RETURN_TYPE:
				setReturnType((AbstractTypeReference)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case StructurePackage.CHARACTERISTIC__FOR_VALUE:
				return forValue != FOR_VALUE_EDEFAULT;
			case StructurePackage.CHARACTERISTIC__TYPE_PARAMS:
				return typeParams != null && !typeParams.isEmpty();
			case StructurePackage.CHARACTERISTIC__RECEIVER_TYPE:
				return receiverType != null;
			case StructurePackage.CHARACTERISTIC__RETURN_TYPE:
				return returnType != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (forValue: ");
		result.append(forValue);
		result.append(')');
		return result.toString();
	}

} //CharacteristicImpl
