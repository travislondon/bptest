/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtuml.bp.xtext.masl.masl.structure.EventDefinition;
import org.xtuml.bp.xtext.masl.masl.structure.StateDeclaration;
import org.xtuml.bp.xtext.masl.masl.structure.StructurePackage;
import org.xtuml.bp.xtext.masl.masl.structure.TransitionOption;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Transition Option</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.TransitionOptionImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.TransitionOptionImpl#getEndState <em>End State</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.TransitionOptionImpl#isIgnore <em>Ignore</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.TransitionOptionImpl#isCannotHappen <em>Cannot Happen</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TransitionOptionImpl extends MinimalEObjectImpl.Container implements TransitionOption {
	/**
	 * The cached value of the '{@link #getEvent() <em>Event</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEvent()
	 * @generated
	 * @ordered
	 */
	protected EventDefinition event;

	/**
	 * The cached value of the '{@link #getEndState() <em>End State</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEndState()
	 * @generated
	 * @ordered
	 */
	protected StateDeclaration endState;

	/**
	 * The default value of the '{@link #isIgnore() <em>Ignore</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIgnore()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IGNORE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIgnore() <em>Ignore</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIgnore()
	 * @generated
	 * @ordered
	 */
	protected boolean ignore = IGNORE_EDEFAULT;

	/**
	 * The default value of the '{@link #isCannotHappen() <em>Cannot Happen</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isCannotHappen()
	 * @generated
	 * @ordered
	 */
	protected static final boolean CANNOT_HAPPEN_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isCannotHappen() <em>Cannot Happen</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isCannotHappen()
	 * @generated
	 * @ordered
	 */
	protected boolean cannotHappen = CANNOT_HAPPEN_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionOptionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return StructurePackage.Literals.TRANSITION_OPTION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EventDefinition getEvent() {
		if (event != null && event.eIsProxy()) {
			InternalEObject oldEvent = (InternalEObject)event;
			event = (EventDefinition)eResolveProxy(oldEvent);
			if (event != oldEvent) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StructurePackage.TRANSITION_OPTION__EVENT, oldEvent, event));
			}
		}
		return event;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EventDefinition basicGetEvent() {
		return event;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEvent(EventDefinition newEvent) {
		EventDefinition oldEvent = event;
		event = newEvent;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.TRANSITION_OPTION__EVENT, oldEvent, event));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateDeclaration getEndState() {
		if (endState != null && endState.eIsProxy()) {
			InternalEObject oldEndState = (InternalEObject)endState;
			endState = (StateDeclaration)eResolveProxy(oldEndState);
			if (endState != oldEndState) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StructurePackage.TRANSITION_OPTION__END_STATE, oldEndState, endState));
			}
		}
		return endState;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateDeclaration basicGetEndState() {
		return endState;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEndState(StateDeclaration newEndState) {
		StateDeclaration oldEndState = endState;
		endState = newEndState;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.TRANSITION_OPTION__END_STATE, oldEndState, endState));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isIgnore() {
		return ignore;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIgnore(boolean newIgnore) {
		boolean oldIgnore = ignore;
		ignore = newIgnore;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.TRANSITION_OPTION__IGNORE, oldIgnore, ignore));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isCannotHappen() {
		return cannotHappen;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setCannotHappen(boolean newCannotHappen) {
		boolean oldCannotHappen = cannotHappen;
		cannotHappen = newCannotHappen;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.TRANSITION_OPTION__CANNOT_HAPPEN, oldCannotHappen, cannotHappen));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case StructurePackage.TRANSITION_OPTION__EVENT:
				if (resolve) return getEvent();
				return basicGetEvent();
			case StructurePackage.TRANSITION_OPTION__END_STATE:
				if (resolve) return getEndState();
				return basicGetEndState();
			case StructurePackage.TRANSITION_OPTION__IGNORE:
				return isIgnore();
			case StructurePackage.TRANSITION_OPTION__CANNOT_HAPPEN:
				return isCannotHappen();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case StructurePackage.TRANSITION_OPTION__EVENT:
				setEvent((EventDefinition)newValue);
				return;
			case StructurePackage.TRANSITION_OPTION__END_STATE:
				setEndState((StateDeclaration)newValue);
				return;
			case StructurePackage.TRANSITION_OPTION__IGNORE:
				setIgnore((Boolean)newValue);
				return;
			case StructurePackage.TRANSITION_OPTION__CANNOT_HAPPEN:
				setCannotHappen((Boolean)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case StructurePackage.TRANSITION_OPTION__EVENT:
				setEvent((EventDefinition)null);
				return;
			case StructurePackage.TRANSITION_OPTION__END_STATE:
				setEndState((StateDeclaration)null);
				return;
			case StructurePackage.TRANSITION_OPTION__IGNORE:
				setIgnore(IGNORE_EDEFAULT);
				return;
			case StructurePackage.TRANSITION_OPTION__CANNOT_HAPPEN:
				setCannotHappen(CANNOT_HAPPEN_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case StructurePackage.TRANSITION_OPTION__EVENT:
				return event != null;
			case StructurePackage.TRANSITION_OPTION__END_STATE:
				return endState != null;
			case StructurePackage.TRANSITION_OPTION__IGNORE:
				return ignore != IGNORE_EDEFAULT;
			case StructurePackage.TRANSITION_OPTION__CANNOT_HAPPEN:
				return cannotHappen != CANNOT_HAPPEN_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (ignore: ");
		result.append(ignore);
		result.append(", cannotHappen: ");
		result.append(cannotHappen);
		result.append(')');
		return result.toString();
	}

} //TransitionOptionImpl
