/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtuml.bp.xtext.masl.masl.structure.ObjectDeclaration;
import org.xtuml.bp.xtext.masl.masl.structure.StructurePackage;
import org.xtuml.bp.xtext.masl.masl.structure.SubtypeRelationshipDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subtype Relationship Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.SubtypeRelationshipDefinitionImpl#getSupertype <em>Supertype</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.SubtypeRelationshipDefinitionImpl#getSubtypes <em>Subtypes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubtypeRelationshipDefinitionImpl extends RelationshipDefinitionImpl implements SubtypeRelationshipDefinition {
	/**
	 * The cached value of the '{@link #getSupertype() <em>Supertype</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSupertype()
	 * @generated
	 * @ordered
	 */
	protected ObjectDeclaration supertype;

	/**
	 * The cached value of the '{@link #getSubtypes() <em>Subtypes</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSubtypes()
	 * @generated
	 * @ordered
	 */
	protected EList<ObjectDeclaration> subtypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtypeRelationshipDefinitionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return StructurePackage.Literals.SUBTYPE_RELATIONSHIP_DEFINITION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectDeclaration getSupertype() {
		if (supertype != null && supertype.eIsProxy()) {
			InternalEObject oldSupertype = (InternalEObject)supertype;
			supertype = (ObjectDeclaration)eResolveProxy(oldSupertype);
			if (supertype != oldSupertype) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE, oldSupertype, supertype));
			}
		}
		return supertype;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectDeclaration basicGetSupertype() {
		return supertype;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSupertype(ObjectDeclaration newSupertype) {
		ObjectDeclaration oldSupertype = supertype;
		supertype = newSupertype;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE, oldSupertype, supertype));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ObjectDeclaration> getSubtypes() {
		if (subtypes == null) {
			subtypes = new EObjectResolvingEList<ObjectDeclaration>(ObjectDeclaration.class, this, StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUBTYPES);
		}
		return subtypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE:
				if (resolve) return getSupertype();
				return basicGetSupertype();
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUBTYPES:
				return getSubtypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE:
				setSupertype((ObjectDeclaration)newValue);
				return;
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUBTYPES:
				getSubtypes().clear();
				getSubtypes().addAll((Collection<? extends ObjectDeclaration>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE:
				setSupertype((ObjectDeclaration)null);
				return;
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUBTYPES:
				getSubtypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUPERTYPE:
				return supertype != null;
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION__SUBTYPES:
				return subtypes != null && !subtypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //SubtypeRelationshipDefinitionImpl
