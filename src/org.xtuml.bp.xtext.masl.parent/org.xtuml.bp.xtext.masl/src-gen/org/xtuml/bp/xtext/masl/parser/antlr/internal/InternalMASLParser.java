package org.xtuml.bp.xtext.masl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.bp.xtext.masl.services.MASLGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalMASLParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Reverse_ordered_by", "Unconditionally", "Cannot_Happen", "Current_State", "Cannot_happen", "Conditionally", "Non_Existant", "Non_Existent", "Intersection", "Non_existant", "Non_existent", "Relationship", "Referential", "Dictionary", "Identifier", "Ordered_by", "Terminator", "Transition", "Anonymous", "Exception", "Find_only", "Preferred", "Structure", "Assigner", "Creation", "Deferred", "Disunion", "Find_all", "Find_one", "Function", "Generate", "Instance", "Readonly", "Schedule", "Sequence", "Terminal", "Builtin", "Console", "Declare", "Private", "Project", "Reverse", "Service", "Subtype", "FILE", "LINE", "Ignore", "Cancel", "Create", "Delete", "Digits", "Domain", "Not_in", "Object", "Others", "Pragma", "Public", "Return", "Unique", "Unlink", "Array", "Begin", "Delay", "Delta", "Elsif", "Erase", "Event", "False", "Flush", "Raise", "Range", "Start", "State", "Union", "Using", "While", "Case", "Else", "Endl", "Enum", "Exit", "Find", "Is_a", "Link", "Loop", "Many", "Null", "Then", "This", "True", "Type", "When", "With", "LessThanSignLessThanSignLessThanSign", "GreaterThanSignGreaterThanSignGreaterThanSign", "Abs", "And", "Bag", "End", "For", "Mod", "Not", "One", "Out", "Rem", "Set", "Xor", "AsteriskAsterisk", "HyphenMinusGreaterThanSign", "FullStopFullStop", "SolidusEqualsSign", "ColonColon", "ColonEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "GreaterThanSignGreaterThanSign", "At", "If", "In", "Is", "Of", "Or", "To", "TildeGreaterThanSign", "Ampersand", "Apostrophe", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "LeftSquareBracket", "RightSquareBracket", "VerticalLine", "RULE_ID", "RULE_INT", "RULE_REAL", "RULE_STRING", "RULE_CHAR", "RULE_DURATION", "RULE_TIMESTAMP", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Delete=53;
    public static final int Enum=83;
    public static final int LessThanSignGreaterThanSign=119;
    public static final int Or=128;
    public static final int Reverse=45;
    public static final int EqualsSignGreaterThanSign=120;
    public static final int Conditionally=9;
    public static final int Digits=54;
    public static final int False=71;
    public static final int LessThanSign=143;
    public static final int LeftParenthesis=133;
    public static final int Private=43;
    public static final int Then=91;
    public static final int Exit=84;
    public static final int GreaterThanSign=145;
    public static final int Cannot_Happen=6;
    public static final int RULE_ID=149;
    public static final int RULE_REAL=151;
    public static final int Cannot_happen=8;
    public static final int Out=107;
    public static final int GreaterThanSignEqualsSign=121;
    public static final int Preferred=25;
    public static final int Endl=82;
    public static final int ColonColon=115;
    public static final int Project=44;
    public static final int Assigner=27;
    public static final int VerticalLine=148;
    public static final int PlusSign=136;
    public static final int RULE_INT=150;
    public static final int Object=57;
    public static final int Xor=110;
    public static final int LeftSquareBracket=146;
    public static final int LessThanSignLessThanSign=117;
    public static final int If=124;
    public static final int Disunion=30;
    public static final int Link=87;
    public static final int Intersection=12;
    public static final int Find_only=24;
    public static final int Set=109;
    public static final int Instance=35;
    public static final int Cancel=51;
    public static final int In=125;
    public static final int One=106;
    public static final int Terminator=20;
    public static final int Is=126;
    public static final int Union=77;
    public static final int Case=80;
    public static final int Non_existent=14;
    public static final int Comma=137;
    public static final int HyphenMinus=138;
    public static final int Readonly=36;
    public static final int Abs=99;
    public static final int At=123;
    public static final int Non_existant=13;
    public static final int Elsif=68;
    public static final int Generate=34;
    public static final int Find_all=31;
    public static final int Begin=65;
    public static final int Many=89;
    public static final int LessThanSignEqualsSign=118;
    public static final int Solidus=140;
    public static final int Structure=26;
    public static final int FILE=48;
    public static final int Not_in=56;
    public static final int Apostrophe=132;
    public static final int FullStop=139;
    public static final int Find_one=32;
    public static final int Declare=42;
    public static final int Semicolon=142;
    public static final int Type=94;
    public static final int When=95;
    public static final int Delta=67;
    public static final int Relationship=15;
    public static final int Transition=21;
    public static final int Else=81;
    public static final int Event=70;
    public static final int Rem=108;
    public static final int HyphenMinusGreaterThanSign=112;
    public static final int Raise=73;
    public static final int Unlink=63;
    public static final int Ignore=50;
    public static final int Null=90;
    public static final int RULE_DURATION=154;
    public static final int Reverse_ordered_by=4;
    public static final int Start=75;
    public static final int Unconditionally=5;
    public static final int SolidusEqualsSign=114;
    public static final int Deferred=29;
    public static final int Erase=69;
    public static final int Using=78;
    public static final int TildeGreaterThanSign=130;
    public static final int True=93;
    public static final int Delay=66;
    public static final int Is_a=86;
    public static final int Non_Existant=10;
    public static final int Referential=16;
    public static final int Identifier=18;
    public static final int Non_Existent=11;
    public static final int FullStopFullStop=113;
    public static final int RULE_CHAR=153;
    public static final int This=92;
    public static final int Ampersand=131;
    public static final int To=129;
    public static final int RightSquareBracket=147;
    public static final int Creation=28;
    public static final int GreaterThanSignGreaterThanSignGreaterThanSign=98;
    public static final int For=103;
    public static final int RightParenthesis=134;
    public static final int Sequence=38;
    public static final int Pragma=59;
    public static final int Public=60;
    public static final int Range=74;
    public static final int ColonEqualsSign=116;
    public static final int Not=105;
    public static final int State=76;
    public static final int And=100;
    public static final int AsteriskAsterisk=111;
    public static final int Unique=62;
    public static final int End=102;
    public static final int Domain=55;
    public static final int Ordered_by=19;
    public static final int Subtype=47;
    public static final int Dictionary=17;
    public static final int RULE_STRING=152;
    public static final int Anonymous=22;
    public static final int With=96;
    public static final int RULE_SL_COMMENT=156;
    public static final int Function=33;
    public static final int EqualsSign=144;
    public static final int Create=52;
    public static final int LINE=49;
    public static final int Console=41;
    public static final int Colon=141;
    public static final int EOF=-1;
    public static final int Asterisk=135;
    public static final int Loop=88;
    public static final int Others=58;
    public static final int Return=61;
    public static final int Mod=104;
    public static final int RULE_WS=157;
    public static final int Service=46;
    public static final int Flush=72;
    public static final int Bag=101;
    public static final int While=79;
    public static final int RULE_ANY_OTHER=158;
    public static final int GreaterThanSignGreaterThanSign=122;
    public static final int Terminal=39;
    public static final int LessThanSignLessThanSignLessThanSign=97;
    public static final int Exception=23;
    public static final int Array=64;
    public static final int Current_State=7;
    public static final int Schedule=37;
    public static final int Of=127;
    public static final int Find=85;
    public static final int RULE_TIMESTAMP=155;
    public static final int Builtin=40;

    // delegates
    // delegators


        public InternalMASLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalMASLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalMASLParser.tokenNames; }
    public String getGrammarFileName() { return "InternalMASLParser.g"; }



     	private MASLGrammarAccess grammarAccess;

        public InternalMASLParser(TokenStream input, MASLGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "MaslModel";
       	}

       	@Override
       	protected MASLGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleMaslModel"
    // InternalMASLParser.g:58:1: entryRuleMaslModel returns [EObject current=null] : iv_ruleMaslModel= ruleMaslModel EOF ;
    public final EObject entryRuleMaslModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMaslModel = null;


        try {
            // InternalMASLParser.g:58:50: (iv_ruleMaslModel= ruleMaslModel EOF )
            // InternalMASLParser.g:59:2: iv_ruleMaslModel= ruleMaslModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMaslModelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMaslModel=ruleMaslModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMaslModel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMaslModel"


    // $ANTLR start "ruleMaslModel"
    // InternalMASLParser.g:65:1: ruleMaslModel returns [EObject current=null] : (this_BuiltinLibraryDefinition_0= ruleBuiltinLibraryDefinition | ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* ) ) ;
    public final EObject ruleMaslModel() throws RecognitionException {
        EObject current = null;

        EObject this_BuiltinLibraryDefinition_0 = null;

        EObject lv_elements_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:71:2: ( (this_BuiltinLibraryDefinition_0= ruleBuiltinLibraryDefinition | ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* ) ) )
            // InternalMASLParser.g:72:2: (this_BuiltinLibraryDefinition_0= ruleBuiltinLibraryDefinition | ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* ) )
            {
            // InternalMASLParser.g:72:2: (this_BuiltinLibraryDefinition_0= ruleBuiltinLibraryDefinition | ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* ) )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==Builtin) ) {
                alt2=1;
            }
            else if ( (LA2_0==EOF||(LA2_0>=Assigner && LA2_0<=Deferred)||LA2_0==Function||LA2_0==Instance||LA2_0==Terminal||(LA2_0>=Private && LA2_0<=Project)||LA2_0==Service||LA2_0==Domain||LA2_0==Public||LA2_0==State) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // InternalMASLParser.g:73:3: this_BuiltinLibraryDefinition_0= ruleBuiltinLibraryDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getMaslModelAccess().getBuiltinLibraryDefinitionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BuiltinLibraryDefinition_0=ruleBuiltinLibraryDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BuiltinLibraryDefinition_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:82:3: ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* )
                    {
                    // InternalMASLParser.g:82:3: ( () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )* )
                    // InternalMASLParser.g:83:4: () ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )*
                    {
                    // InternalMASLParser.g:83:4: ()
                    // InternalMASLParser.g:84:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getMaslModelAccess().getMaslModelAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:90:4: ( (lv_elements_2_0= ruleAbstractTopLevelElement ) )*
                    loop1:
                    do {
                        int alt1=2;
                        int LA1_0 = input.LA(1);

                        if ( ((LA1_0>=Assigner && LA1_0<=Deferred)||LA1_0==Function||LA1_0==Instance||LA1_0==Terminal||(LA1_0>=Private && LA1_0<=Project)||LA1_0==Service||LA1_0==Domain||LA1_0==Public||LA1_0==State) ) {
                            alt1=1;
                        }


                        switch (alt1) {
                    	case 1 :
                    	    // InternalMASLParser.g:91:5: (lv_elements_2_0= ruleAbstractTopLevelElement )
                    	    {
                    	    // InternalMASLParser.g:91:5: (lv_elements_2_0= ruleAbstractTopLevelElement )
                    	    // InternalMASLParser.g:92:6: lv_elements_2_0= ruleAbstractTopLevelElement
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getMaslModelAccess().getElementsAbstractTopLevelElementParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_3);
                    	    lv_elements_2_0=ruleAbstractTopLevelElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getMaslModelRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"elements",
                    	      							lv_elements_2_0,
                    	      							"org.xtuml.bp.xtext.masl.MASL.AbstractTopLevelElement");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop1;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMaslModel"


    // $ANTLR start "entryRuleAbstractTopLevelElement"
    // InternalMASLParser.g:114:1: entryRuleAbstractTopLevelElement returns [EObject current=null] : iv_ruleAbstractTopLevelElement= ruleAbstractTopLevelElement EOF ;
    public final EObject entryRuleAbstractTopLevelElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTopLevelElement = null;


        try {
            // InternalMASLParser.g:114:64: (iv_ruleAbstractTopLevelElement= ruleAbstractTopLevelElement EOF )
            // InternalMASLParser.g:115:2: iv_ruleAbstractTopLevelElement= ruleAbstractTopLevelElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTopLevelElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTopLevelElement=ruleAbstractTopLevelElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTopLevelElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTopLevelElement"


    // $ANTLR start "ruleAbstractTopLevelElement"
    // InternalMASLParser.g:121:1: ruleAbstractTopLevelElement returns [EObject current=null] : (this_ProjectDefinition_0= ruleProjectDefinition | this_DomainDefinition_1= ruleDomainDefinition | this_DomainServiceDefinition_2= ruleDomainServiceDefinition | this_ObjectServiceDefinition_3= ruleObjectServiceDefinition | this_StateDefinition_4= ruleStateDefinition | this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition ) ;
    public final EObject ruleAbstractTopLevelElement() throws RecognitionException {
        EObject current = null;

        EObject this_ProjectDefinition_0 = null;

        EObject this_DomainDefinition_1 = null;

        EObject this_DomainServiceDefinition_2 = null;

        EObject this_ObjectServiceDefinition_3 = null;

        EObject this_StateDefinition_4 = null;

        EObject this_TerminatorServiceDefinition_5 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:127:2: ( (this_ProjectDefinition_0= ruleProjectDefinition | this_DomainDefinition_1= ruleDomainDefinition | this_DomainServiceDefinition_2= ruleDomainServiceDefinition | this_ObjectServiceDefinition_3= ruleObjectServiceDefinition | this_StateDefinition_4= ruleStateDefinition | this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition ) )
            // InternalMASLParser.g:128:2: (this_ProjectDefinition_0= ruleProjectDefinition | this_DomainDefinition_1= ruleDomainDefinition | this_DomainServiceDefinition_2= ruleDomainServiceDefinition | this_ObjectServiceDefinition_3= ruleObjectServiceDefinition | this_StateDefinition_4= ruleStateDefinition | this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition )
            {
            // InternalMASLParser.g:128:2: (this_ProjectDefinition_0= ruleProjectDefinition | this_DomainDefinition_1= ruleDomainDefinition | this_DomainServiceDefinition_2= ruleDomainServiceDefinition | this_ObjectServiceDefinition_3= ruleObjectServiceDefinition | this_StateDefinition_4= ruleStateDefinition | this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition )
            int alt3=6;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    // InternalMASLParser.g:129:3: this_ProjectDefinition_0= ruleProjectDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getProjectDefinitionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ProjectDefinition_0=ruleProjectDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ProjectDefinition_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:138:3: this_DomainDefinition_1= ruleDomainDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getDomainDefinitionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DomainDefinition_1=ruleDomainDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DomainDefinition_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:147:3: this_DomainServiceDefinition_2= ruleDomainServiceDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getDomainServiceDefinitionParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DomainServiceDefinition_2=ruleDomainServiceDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DomainServiceDefinition_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:156:3: this_ObjectServiceDefinition_3= ruleObjectServiceDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getObjectServiceDefinitionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectServiceDefinition_3=ruleObjectServiceDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectServiceDefinition_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalMASLParser.g:165:3: this_StateDefinition_4= ruleStateDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getStateDefinitionParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StateDefinition_4=ruleStateDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StateDefinition_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalMASLParser.g:174:3: this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getTerminatorServiceDefinitionParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TerminatorServiceDefinition_5=ruleTerminatorServiceDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TerminatorServiceDefinition_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTopLevelElement"


    // $ANTLR start "entryRuleScopedName"
    // InternalMASLParser.g:186:1: entryRuleScopedName returns [String current=null] : iv_ruleScopedName= ruleScopedName EOF ;
    public final String entryRuleScopedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleScopedName = null;


        try {
            // InternalMASLParser.g:186:50: (iv_ruleScopedName= ruleScopedName EOF )
            // InternalMASLParser.g:187:2: iv_ruleScopedName= ruleScopedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScopedNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScopedName=ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScopedName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScopedName"


    // $ANTLR start "ruleScopedName"
    // InternalMASLParser.g:193:1: ruleScopedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_ID_0= RULE_ID kw= ColonColon )? this_ID_2= RULE_ID ) ;
    public final AntlrDatatypeRuleToken ruleScopedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;
        Token this_ID_2=null;


        	enterRule();

        try {
            // InternalMASLParser.g:199:2: ( ( (this_ID_0= RULE_ID kw= ColonColon )? this_ID_2= RULE_ID ) )
            // InternalMASLParser.g:200:2: ( (this_ID_0= RULE_ID kw= ColonColon )? this_ID_2= RULE_ID )
            {
            // InternalMASLParser.g:200:2: ( (this_ID_0= RULE_ID kw= ColonColon )? this_ID_2= RULE_ID )
            // InternalMASLParser.g:201:3: (this_ID_0= RULE_ID kw= ColonColon )? this_ID_2= RULE_ID
            {
            // InternalMASLParser.g:201:3: (this_ID_0= RULE_ID kw= ColonColon )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==RULE_ID) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ColonColon) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // InternalMASLParser.g:202:4: this_ID_0= RULE_ID kw= ColonColon
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_ID_0);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_ID_0, grammarAccess.getScopedNameAccess().getIDTerminalRuleCall_0_0());
                      			
                    }
                    kw=(Token)match(input,ColonColon,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getScopedNameAccess().getColonColonKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            this_ID_2=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_ID_2);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_2, grammarAccess.getScopedNameAccess().getIDTerminalRuleCall_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScopedName"


    // $ANTLR start "rulePragmaList"
    // InternalMASLParser.g:227:1: rulePragmaList[EObject in_current] returns [EObject current=in_current] : ( ( (lv_pragmas_0_0= rulePragma ) ) otherlv_1= Semicolon )* ;
    public final EObject rulePragmaList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_pragmas_0_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:233:2: ( ( ( (lv_pragmas_0_0= rulePragma ) ) otherlv_1= Semicolon )* )
            // InternalMASLParser.g:234:2: ( ( (lv_pragmas_0_0= rulePragma ) ) otherlv_1= Semicolon )*
            {
            // InternalMASLParser.g:234:2: ( ( (lv_pragmas_0_0= rulePragma ) ) otherlv_1= Semicolon )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==Pragma) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // InternalMASLParser.g:235:3: ( (lv_pragmas_0_0= rulePragma ) ) otherlv_1= Semicolon
            	    {
            	    // InternalMASLParser.g:235:3: ( (lv_pragmas_0_0= rulePragma ) )
            	    // InternalMASLParser.g:236:4: (lv_pragmas_0_0= rulePragma )
            	    {
            	    // InternalMASLParser.g:236:4: (lv_pragmas_0_0= rulePragma )
            	    // InternalMASLParser.g:237:5: lv_pragmas_0_0= rulePragma
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPragmaListAccess().getPragmasPragmaParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_pragmas_0_0=rulePragma();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPragmaListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"pragmas",
            	      						lv_pragmas_0_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.Pragma");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }

            	    otherlv_1=(Token)match(input,Semicolon,FOLLOW_7); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			newLeafNode(otherlv_1, grammarAccess.getPragmaListAccess().getSemicolonKeyword_1());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePragmaList"


    // $ANTLR start "entryRulePragma"
    // InternalMASLParser.g:262:1: entryRulePragma returns [EObject current=null] : iv_rulePragma= rulePragma EOF ;
    public final EObject entryRulePragma() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePragma = null;


        try {
            // InternalMASLParser.g:262:47: (iv_rulePragma= rulePragma EOF )
            // InternalMASLParser.g:263:2: iv_rulePragma= rulePragma EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPragmaRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePragma=rulePragma();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePragma; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePragma"


    // $ANTLR start "rulePragma"
    // InternalMASLParser.g:269:1: rulePragma returns [EObject current=null] : (otherlv_0= Pragma ( (lv_name_1_0= RULE_ID ) ) otherlv_2= LeftParenthesis ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )? otherlv_6= RightParenthesis ) ;
    public final EObject rulePragma() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_values_3_0 = null;

        EObject lv_values_5_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:275:2: ( (otherlv_0= Pragma ( (lv_name_1_0= RULE_ID ) ) otherlv_2= LeftParenthesis ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )? otherlv_6= RightParenthesis ) )
            // InternalMASLParser.g:276:2: (otherlv_0= Pragma ( (lv_name_1_0= RULE_ID ) ) otherlv_2= LeftParenthesis ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )? otherlv_6= RightParenthesis )
            {
            // InternalMASLParser.g:276:2: (otherlv_0= Pragma ( (lv_name_1_0= RULE_ID ) ) otherlv_2= LeftParenthesis ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )? otherlv_6= RightParenthesis )
            // InternalMASLParser.g:277:3: otherlv_0= Pragma ( (lv_name_1_0= RULE_ID ) ) otherlv_2= LeftParenthesis ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )? otherlv_6= RightParenthesis
            {
            otherlv_0=(Token)match(input,Pragma,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPragmaAccess().getPragmaKeyword_0());
              		
            }
            // InternalMASLParser.g:281:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:282:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:282:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:283:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getPragmaAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getPragmaRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPragmaAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalMASLParser.g:303:3: ( ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )* )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==Console||(LA7_0>=FILE && LA7_0<=LINE)||(LA7_0>=False && LA7_0<=Flush)||LA7_0==Endl||LA7_0==Null||(LA7_0>=This && LA7_0<=True)||(LA7_0>=RULE_ID && LA7_0<=RULE_TIMESTAMP)) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // InternalMASLParser.g:304:4: ( (lv_values_3_0= rulePragmaValue ) ) (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )*
                    {
                    // InternalMASLParser.g:304:4: ( (lv_values_3_0= rulePragmaValue ) )
                    // InternalMASLParser.g:305:5: (lv_values_3_0= rulePragmaValue )
                    {
                    // InternalMASLParser.g:305:5: (lv_values_3_0= rulePragmaValue )
                    // InternalMASLParser.g:306:6: lv_values_3_0= rulePragmaValue
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPragmaAccess().getValuesPragmaValueParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_values_3_0=rulePragmaValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPragmaRule());
                      						}
                      						add(
                      							current,
                      							"values",
                      							lv_values_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.PragmaValue");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:323:4: (otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) ) )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==Comma) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // InternalMASLParser.g:324:5: otherlv_4= Comma ( (lv_values_5_0= rulePragmaValue ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getPragmaAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:328:5: ( (lv_values_5_0= rulePragmaValue ) )
                    	    // InternalMASLParser.g:329:6: (lv_values_5_0= rulePragmaValue )
                    	    {
                    	    // InternalMASLParser.g:329:6: (lv_values_5_0= rulePragmaValue )
                    	    // InternalMASLParser.g:330:7: lv_values_5_0= rulePragmaValue
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPragmaAccess().getValuesPragmaValueParserRuleCall_3_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_values_5_0=rulePragmaValue();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPragmaRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"values",
                    	      								lv_values_5_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.PragmaValue");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPragmaAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePragma"


    // $ANTLR start "entryRulePragmaValue"
    // InternalMASLParser.g:357:1: entryRulePragmaValue returns [EObject current=null] : iv_rulePragmaValue= rulePragmaValue EOF ;
    public final EObject entryRulePragmaValue() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePragmaValue = null;


        try {
            // InternalMASLParser.g:357:52: (iv_rulePragmaValue= rulePragmaValue EOF )
            // InternalMASLParser.g:358:2: iv_rulePragmaValue= rulePragmaValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPragmaValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePragmaValue=rulePragmaValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePragmaValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePragmaValue"


    // $ANTLR start "rulePragmaValue"
    // InternalMASLParser.g:364:1: rulePragmaValue returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) | ( (lv_value_1_0= ruleLiteral ) ) ) ;
    public final EObject rulePragmaValue() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:370:2: ( ( ( (lv_name_0_0= RULE_ID ) ) | ( (lv_value_1_0= ruleLiteral ) ) ) )
            // InternalMASLParser.g:371:2: ( ( (lv_name_0_0= RULE_ID ) ) | ( (lv_value_1_0= ruleLiteral ) ) )
            {
            // InternalMASLParser.g:371:2: ( ( (lv_name_0_0= RULE_ID ) ) | ( (lv_value_1_0= ruleLiteral ) ) )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==RULE_ID) ) {
                alt8=1;
            }
            else if ( (LA8_0==Console||(LA8_0>=FILE && LA8_0<=LINE)||(LA8_0>=False && LA8_0<=Flush)||LA8_0==Endl||LA8_0==Null||(LA8_0>=This && LA8_0<=True)||(LA8_0>=RULE_INT && LA8_0<=RULE_TIMESTAMP)) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // InternalMASLParser.g:372:3: ( (lv_name_0_0= RULE_ID ) )
                    {
                    // InternalMASLParser.g:372:3: ( (lv_name_0_0= RULE_ID ) )
                    // InternalMASLParser.g:373:4: (lv_name_0_0= RULE_ID )
                    {
                    // InternalMASLParser.g:373:4: (lv_name_0_0= RULE_ID )
                    // InternalMASLParser.g:374:5: lv_name_0_0= RULE_ID
                    {
                    lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_name_0_0, grammarAccess.getPragmaValueAccess().getNameIDTerminalRuleCall_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPragmaValueRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"name",
                      						lv_name_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.ID");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:391:3: ( (lv_value_1_0= ruleLiteral ) )
                    {
                    // InternalMASLParser.g:391:3: ( (lv_value_1_0= ruleLiteral ) )
                    // InternalMASLParser.g:392:4: (lv_value_1_0= ruleLiteral )
                    {
                    // InternalMASLParser.g:392:4: (lv_value_1_0= ruleLiteral )
                    // InternalMASLParser.g:393:5: lv_value_1_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPragmaValueAccess().getValueLiteralParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_1_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPragmaValueRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_1_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Literal");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePragmaValue"


    // $ANTLR start "ruleParameterList"
    // InternalMASLParser.g:415:1: ruleParameterList[EObject in_current] returns [EObject current=in_current] : (otherlv_0= LeftParenthesis ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )? otherlv_4= RightParenthesis ) ;
    public final EObject ruleParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_parameters_1_0 = null;

        EObject lv_parameters_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:421:2: ( (otherlv_0= LeftParenthesis ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )? otherlv_4= RightParenthesis ) )
            // InternalMASLParser.g:422:2: (otherlv_0= LeftParenthesis ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )? otherlv_4= RightParenthesis )
            {
            // InternalMASLParser.g:422:2: (otherlv_0= LeftParenthesis ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )? otherlv_4= RightParenthesis )
            // InternalMASLParser.g:423:3: otherlv_0= LeftParenthesis ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )? otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalMASLParser.g:427:3: ( ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )* )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==RULE_ID) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalMASLParser.g:428:4: ( (lv_parameters_1_0= ruleParameter ) ) (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )*
                    {
                    // InternalMASLParser.g:428:4: ( (lv_parameters_1_0= ruleParameter ) )
                    // InternalMASLParser.g:429:5: (lv_parameters_1_0= ruleParameter )
                    {
                    // InternalMASLParser.g:429:5: (lv_parameters_1_0= ruleParameter )
                    // InternalMASLParser.g:430:6: lv_parameters_1_0= ruleParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_parameters_1_0=ruleParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getParameterListRule());
                      						}
                      						add(
                      							current,
                      							"parameters",
                      							lv_parameters_1_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Parameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:447:4: (otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) ) )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==Comma) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // InternalMASLParser.g:448:5: otherlv_2= Comma ( (lv_parameters_3_0= ruleParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getParameterListAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:452:5: ( (lv_parameters_3_0= ruleParameter ) )
                    	    // InternalMASLParser.g:453:6: (lv_parameters_3_0= ruleParameter )
                    	    {
                    	    // InternalMASLParser.g:453:6: (lv_parameters_3_0= ruleParameter )
                    	    // InternalMASLParser.g:454:7: lv_parameters_3_0= ruleParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_parameters_3_0=ruleParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getParameterListRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"parameters",
                    	      								lv_parameters_3_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.Parameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterList"


    // $ANTLR start "entryRuleParameter"
    // InternalMASLParser.g:481:1: entryRuleParameter returns [EObject current=null] : iv_ruleParameter= ruleParameter EOF ;
    public final EObject entryRuleParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameter = null;


        try {
            // InternalMASLParser.g:481:50: (iv_ruleParameter= ruleParameter EOF )
            // InternalMASLParser.g:482:2: iv_ruleParameter= ruleParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameter=ruleParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameter"


    // $ANTLR start "ruleParameter"
    // InternalMASLParser.g:488:1: ruleParameter returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_mode_2_0= ruleParameterMode ) ) ( (lv_type_3_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleParameter() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Enumerator lv_mode_2_0 = null;

        EObject lv_type_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:494:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_mode_2_0= ruleParameterMode ) ) ( (lv_type_3_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:495:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_mode_2_0= ruleParameterMode ) ) ( (lv_type_3_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:495:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_mode_2_0= ruleParameterMode ) ) ( (lv_type_3_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:496:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_mode_2_0= ruleParameterMode ) ) ( (lv_type_3_0= ruleAbstractTypeReference ) )
            {
            // InternalMASLParser.g:496:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:497:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:497:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:498:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
              		
            }
            // InternalMASLParser.g:518:3: ( (lv_mode_2_0= ruleParameterMode ) )
            // InternalMASLParser.g:519:4: (lv_mode_2_0= ruleParameterMode )
            {
            // InternalMASLParser.g:519:4: (lv_mode_2_0= ruleParameterMode )
            // InternalMASLParser.g:520:5: lv_mode_2_0= ruleParameterMode
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterAccess().getModeParameterModeEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_mode_2_0=ruleParameterMode();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterRule());
              					}
              					set(
              						current,
              						"mode",
              						lv_mode_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.ParameterMode");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:537:3: ( (lv_type_3_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:538:4: (lv_type_3_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:538:4: (lv_type_3_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:539:5: lv_type_3_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterAccess().getTypeAbstractTypeReferenceParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_type_3_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameter"


    // $ANTLR start "entryRuleProjectDefinition"
    // InternalMASLParser.g:560:1: entryRuleProjectDefinition returns [EObject current=null] : iv_ruleProjectDefinition= ruleProjectDefinition EOF ;
    public final EObject entryRuleProjectDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleProjectDefinition = null;


        try {
            // InternalMASLParser.g:560:58: (iv_ruleProjectDefinition= ruleProjectDefinition EOF )
            // InternalMASLParser.g:561:2: iv_ruleProjectDefinition= ruleProjectDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getProjectDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleProjectDefinition=ruleProjectDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleProjectDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleProjectDefinition"


    // $ANTLR start "ruleProjectDefinition"
    // InternalMASLParser.g:567:1: ruleProjectDefinition returns [EObject current=null] : (otherlv_0= Project ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_domains_3_0= ruleDomainDefinition ) )* otherlv_4= End (otherlv_5= Project )? (otherlv_6= Semicolon )? this_PragmaList_7= rulePragmaList[$current] ) ;
    public final EObject ruleProjectDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_domains_3_0 = null;

        EObject this_PragmaList_7 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:573:2: ( (otherlv_0= Project ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_domains_3_0= ruleDomainDefinition ) )* otherlv_4= End (otherlv_5= Project )? (otherlv_6= Semicolon )? this_PragmaList_7= rulePragmaList[$current] ) )
            // InternalMASLParser.g:574:2: (otherlv_0= Project ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_domains_3_0= ruleDomainDefinition ) )* otherlv_4= End (otherlv_5= Project )? (otherlv_6= Semicolon )? this_PragmaList_7= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:574:2: (otherlv_0= Project ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_domains_3_0= ruleDomainDefinition ) )* otherlv_4= End (otherlv_5= Project )? (otherlv_6= Semicolon )? this_PragmaList_7= rulePragmaList[$current] )
            // InternalMASLParser.g:575:3: otherlv_0= Project ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_domains_3_0= ruleDomainDefinition ) )* otherlv_4= End (otherlv_5= Project )? (otherlv_6= Semicolon )? this_PragmaList_7= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Project,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getProjectDefinitionAccess().getProjectKeyword_0());
              		
            }
            // InternalMASLParser.g:579:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:580:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:580:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:581:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getProjectDefinitionAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getProjectDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Is,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getProjectDefinitionAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:601:3: ( (lv_domains_3_0= ruleDomainDefinition ) )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==Domain) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // InternalMASLParser.g:602:4: (lv_domains_3_0= ruleDomainDefinition )
            	    {
            	    // InternalMASLParser.g:602:4: (lv_domains_3_0= ruleDomainDefinition )
            	    // InternalMASLParser.g:603:5: lv_domains_3_0= ruleDomainDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getProjectDefinitionAccess().getDomainsDomainDefinitionParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_17);
            	    lv_domains_3_0=ruleDomainDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getProjectDefinitionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"domains",
            	      						lv_domains_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.DomainDefinition");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            otherlv_4=(Token)match(input,End,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getProjectDefinitionAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:624:3: (otherlv_5= Project )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==Project) ) {
                int LA12_1 = input.LA(2);

                if ( (LA12_1==EOF||(LA12_1>=Assigner && LA12_1<=Deferred)||LA12_1==Function||LA12_1==Instance||LA12_1==Terminal||(LA12_1>=Private && LA12_1<=Project)||LA12_1==Service||LA12_1==Domain||(LA12_1>=Pragma && LA12_1<=Public)||LA12_1==State||LA12_1==Semicolon) ) {
                    alt12=1;
                }
            }
            switch (alt12) {
                case 1 :
                    // InternalMASLParser.g:625:4: otherlv_5= Project
                    {
                    otherlv_5=(Token)match(input,Project,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getProjectDefinitionAccess().getProjectKeyword_5());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:630:3: (otherlv_6= Semicolon )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==Semicolon) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // InternalMASLParser.g:631:4: otherlv_6= Semicolon
                    {
                    otherlv_6=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getProjectDefinitionAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getProjectDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_7=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleProjectDefinition"


    // $ANTLR start "entryRuleDomainDefinition"
    // InternalMASLParser.g:651:1: entryRuleDomainDefinition returns [EObject current=null] : iv_ruleDomainDefinition= ruleDomainDefinition EOF ;
    public final EObject entryRuleDomainDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDomainDefinition = null;


        try {
            // InternalMASLParser.g:651:57: (iv_ruleDomainDefinition= ruleDomainDefinition EOF )
            // InternalMASLParser.g:652:2: iv_ruleDomainDefinition= ruleDomainDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDomainDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDomainDefinition=ruleDomainDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDomainDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDomainDefinition"


    // $ANTLR start "ruleDomainDefinition"
    // InternalMASLParser.g:658:1: ruleDomainDefinition returns [EObject current=null] : (otherlv_0= Domain ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )* otherlv_11= End (otherlv_12= Domain )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] ) ;
    public final EObject ruleDomainDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        EObject lv_objects_3_0 = null;

        EObject lv_services_4_0 = null;

        EObject lv_terminators_5_0 = null;

        EObject lv_relationships_6_0 = null;

        EObject lv_objectDefs_7_0 = null;

        EObject lv_typeForwards_8_0 = null;

        EObject lv_types_9_0 = null;

        EObject lv_exceptions_10_0 = null;

        EObject this_PragmaList_14 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:664:2: ( (otherlv_0= Domain ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )* otherlv_11= End (otherlv_12= Domain )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] ) )
            // InternalMASLParser.g:665:2: (otherlv_0= Domain ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )* otherlv_11= End (otherlv_12= Domain )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:665:2: (otherlv_0= Domain ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )* otherlv_11= End (otherlv_12= Domain )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] )
            // InternalMASLParser.g:666:3: otherlv_0= Domain ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )* otherlv_11= End (otherlv_12= Domain )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Domain,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDomainDefinitionAccess().getDomainKeyword_0());
              		
            }
            // InternalMASLParser.g:670:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:671:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:671:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:672:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getDomainDefinitionAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getDomainDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Is,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDomainDefinitionAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:692:3: ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )*
            loop14:
            do {
                int alt14=9;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // InternalMASLParser.g:693:4: ( (lv_objects_3_0= ruleObjectDeclaration ) )
            	    {
            	    // InternalMASLParser.g:693:4: ( (lv_objects_3_0= ruleObjectDeclaration ) )
            	    // InternalMASLParser.g:694:5: (lv_objects_3_0= ruleObjectDeclaration )
            	    {
            	    // InternalMASLParser.g:694:5: (lv_objects_3_0= ruleObjectDeclaration )
            	    // InternalMASLParser.g:695:6: lv_objects_3_0= ruleObjectDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getObjectsObjectDeclarationParserRuleCall_3_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_objects_3_0=ruleObjectDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"objects",
            	      							lv_objects_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.ObjectDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:713:4: ( (lv_services_4_0= ruleDomainServiceDeclaration ) )
            	    {
            	    // InternalMASLParser.g:713:4: ( (lv_services_4_0= ruleDomainServiceDeclaration ) )
            	    // InternalMASLParser.g:714:5: (lv_services_4_0= ruleDomainServiceDeclaration )
            	    {
            	    // InternalMASLParser.g:714:5: (lv_services_4_0= ruleDomainServiceDeclaration )
            	    // InternalMASLParser.g:715:6: lv_services_4_0= ruleDomainServiceDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getServicesDomainServiceDeclarationParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_services_4_0=ruleDomainServiceDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"services",
            	      							lv_services_4_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.DomainServiceDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalMASLParser.g:733:4: ( (lv_terminators_5_0= ruleTerminatorDefinition ) )
            	    {
            	    // InternalMASLParser.g:733:4: ( (lv_terminators_5_0= ruleTerminatorDefinition ) )
            	    // InternalMASLParser.g:734:5: (lv_terminators_5_0= ruleTerminatorDefinition )
            	    {
            	    // InternalMASLParser.g:734:5: (lv_terminators_5_0= ruleTerminatorDefinition )
            	    // InternalMASLParser.g:735:6: lv_terminators_5_0= ruleTerminatorDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTerminatorsTerminatorDefinitionParserRuleCall_3_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_terminators_5_0=ruleTerminatorDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"terminators",
            	      							lv_terminators_5_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.TerminatorDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalMASLParser.g:753:4: ( (lv_relationships_6_0= ruleRelationshipDefinition ) )
            	    {
            	    // InternalMASLParser.g:753:4: ( (lv_relationships_6_0= ruleRelationshipDefinition ) )
            	    // InternalMASLParser.g:754:5: (lv_relationships_6_0= ruleRelationshipDefinition )
            	    {
            	    // InternalMASLParser.g:754:5: (lv_relationships_6_0= ruleRelationshipDefinition )
            	    // InternalMASLParser.g:755:6: lv_relationships_6_0= ruleRelationshipDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getRelationshipsRelationshipDefinitionParserRuleCall_3_3_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_relationships_6_0=ruleRelationshipDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"relationships",
            	      							lv_relationships_6_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.RelationshipDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalMASLParser.g:773:4: ( (lv_objectDefs_7_0= ruleObjectDefinition ) )
            	    {
            	    // InternalMASLParser.g:773:4: ( (lv_objectDefs_7_0= ruleObjectDefinition ) )
            	    // InternalMASLParser.g:774:5: (lv_objectDefs_7_0= ruleObjectDefinition )
            	    {
            	    // InternalMASLParser.g:774:5: (lv_objectDefs_7_0= ruleObjectDefinition )
            	    // InternalMASLParser.g:775:6: lv_objectDefs_7_0= ruleObjectDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getObjectDefsObjectDefinitionParserRuleCall_3_4_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_objectDefs_7_0=ruleObjectDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"objectDefs",
            	      							lv_objectDefs_7_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.ObjectDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalMASLParser.g:793:4: ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) )
            	    {
            	    // InternalMASLParser.g:793:4: ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) )
            	    // InternalMASLParser.g:794:5: (lv_typeForwards_8_0= ruleTypeForwardDeclaration )
            	    {
            	    // InternalMASLParser.g:794:5: (lv_typeForwards_8_0= ruleTypeForwardDeclaration )
            	    // InternalMASLParser.g:795:6: lv_typeForwards_8_0= ruleTypeForwardDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTypeForwardsTypeForwardDeclarationParserRuleCall_3_5_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_typeForwards_8_0=ruleTypeForwardDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeForwards",
            	      							lv_typeForwards_8_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.TypeForwardDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalMASLParser.g:813:4: ( (lv_types_9_0= ruleTypeDeclaration ) )
            	    {
            	    // InternalMASLParser.g:813:4: ( (lv_types_9_0= ruleTypeDeclaration ) )
            	    // InternalMASLParser.g:814:5: (lv_types_9_0= ruleTypeDeclaration )
            	    {
            	    // InternalMASLParser.g:814:5: (lv_types_9_0= ruleTypeDeclaration )
            	    // InternalMASLParser.g:815:6: lv_types_9_0= ruleTypeDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTypesTypeDeclarationParserRuleCall_3_6_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_types_9_0=ruleTypeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"types",
            	      							lv_types_9_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.TypeDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalMASLParser.g:833:4: ( (lv_exceptions_10_0= ruleExceptionDeclaration ) )
            	    {
            	    // InternalMASLParser.g:833:4: ( (lv_exceptions_10_0= ruleExceptionDeclaration ) )
            	    // InternalMASLParser.g:834:5: (lv_exceptions_10_0= ruleExceptionDeclaration )
            	    {
            	    // InternalMASLParser.g:834:5: (lv_exceptions_10_0= ruleExceptionDeclaration )
            	    // InternalMASLParser.g:835:6: lv_exceptions_10_0= ruleExceptionDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getExceptionsExceptionDeclarationParserRuleCall_3_7_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_20);
            	    lv_exceptions_10_0=ruleExceptionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"exceptions",
            	      							lv_exceptions_10_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.ExceptionDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            otherlv_11=(Token)match(input,End,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getDomainDefinitionAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:857:3: (otherlv_12= Domain )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==Domain) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==EOF||(LA15_1>=Assigner && LA15_1<=Deferred)||LA15_1==Function||LA15_1==Instance||LA15_1==Terminal||(LA15_1>=Private && LA15_1<=Project)||LA15_1==Service||LA15_1==Domain||(LA15_1>=Pragma && LA15_1<=Public)||LA15_1==State||LA15_1==End||LA15_1==Semicolon) ) {
                    alt15=1;
                }
            }
            switch (alt15) {
                case 1 :
                    // InternalMASLParser.g:858:4: otherlv_12= Domain
                    {
                    otherlv_12=(Token)match(input,Domain,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getDomainDefinitionAccess().getDomainKeyword_5());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:863:3: (otherlv_13= Semicolon )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==Semicolon) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // InternalMASLParser.g:864:4: otherlv_13= Semicolon
                    {
                    otherlv_13=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getDomainDefinitionAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getDomainDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getDomainDefinitionAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_14=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_14;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDomainDefinition"


    // $ANTLR start "entryRuleBuiltinLibraryDefinition"
    // InternalMASLParser.g:884:1: entryRuleBuiltinLibraryDefinition returns [EObject current=null] : iv_ruleBuiltinLibraryDefinition= ruleBuiltinLibraryDefinition EOF ;
    public final EObject entryRuleBuiltinLibraryDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBuiltinLibraryDefinition = null;


        try {
            // InternalMASLParser.g:884:65: (iv_ruleBuiltinLibraryDefinition= ruleBuiltinLibraryDefinition EOF )
            // InternalMASLParser.g:885:2: iv_ruleBuiltinLibraryDefinition= ruleBuiltinLibraryDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBuiltinLibraryDefinition=ruleBuiltinLibraryDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBuiltinLibraryDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBuiltinLibraryDefinition"


    // $ANTLR start "ruleBuiltinLibraryDefinition"
    // InternalMASLParser.g:891:1: ruleBuiltinLibraryDefinition returns [EObject current=null] : ( () otherlv_1= Builtin otherlv_2= Is ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )* otherlv_5= End (otherlv_6= Builtin )? otherlv_7= Semicolon ) ;
    public final EObject ruleBuiltinLibraryDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_types_3_0 = null;

        EObject lv_characteristics_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:897:2: ( ( () otherlv_1= Builtin otherlv_2= Is ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )* otherlv_5= End (otherlv_6= Builtin )? otherlv_7= Semicolon ) )
            // InternalMASLParser.g:898:2: ( () otherlv_1= Builtin otherlv_2= Is ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )* otherlv_5= End (otherlv_6= Builtin )? otherlv_7= Semicolon )
            {
            // InternalMASLParser.g:898:2: ( () otherlv_1= Builtin otherlv_2= Is ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )* otherlv_5= End (otherlv_6= Builtin )? otherlv_7= Semicolon )
            // InternalMASLParser.g:899:3: () otherlv_1= Builtin otherlv_2= Is ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )* otherlv_5= End (otherlv_6= Builtin )? otherlv_7= Semicolon
            {
            // InternalMASLParser.g:899:3: ()
            // InternalMASLParser.g:900:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinLibraryDefinitionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Builtin,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Is,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBuiltinLibraryDefinitionAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:914:3: ( ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) ) | ( (lv_characteristics_4_0= ruleCharacteristic ) ) )*
            loop17:
            do {
                int alt17=3;
                switch ( input.LA(1) ) {
                case Builtin:
                case Private:
                case Subtype:
                case Public:
                case Type:
                    {
                    alt17=1;
                    }
                    break;
                case Anonymous:
                    {
                    int LA17_3 = input.LA(2);

                    if ( (LA17_3==Builtin) ) {
                        alt17=1;
                    }
                    else if ( (LA17_3==Dictionary||LA17_3==Instance||LA17_3==Sequence||LA17_3==Array||LA17_3==Bag||LA17_3==Set||LA17_3==RULE_ID) ) {
                        alt17=2;
                    }


                    }
                    break;
                case Dictionary:
                case Instance:
                case Sequence:
                case Array:
                case Bag:
                case Set:
                case LeftParenthesis:
                case LessThanSign:
                case RULE_ID:
                    {
                    alt17=2;
                    }
                    break;

                }

                switch (alt17) {
            	case 1 :
            	    // InternalMASLParser.g:915:4: ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) )
            	    {
            	    // InternalMASLParser.g:915:4: ( (lv_types_3_0= ruleBuiltinTypeDeclaration ) )
            	    // InternalMASLParser.g:916:5: (lv_types_3_0= ruleBuiltinTypeDeclaration )
            	    {
            	    // InternalMASLParser.g:916:5: (lv_types_3_0= ruleBuiltinTypeDeclaration )
            	    // InternalMASLParser.g:917:6: lv_types_3_0= ruleBuiltinTypeDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionAccess().getTypesBuiltinTypeDeclarationParserRuleCall_3_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_22);
            	    lv_types_3_0=ruleBuiltinTypeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBuiltinLibraryDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"types",
            	      							lv_types_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.BuiltinTypeDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:935:4: ( (lv_characteristics_4_0= ruleCharacteristic ) )
            	    {
            	    // InternalMASLParser.g:935:4: ( (lv_characteristics_4_0= ruleCharacteristic ) )
            	    // InternalMASLParser.g:936:5: (lv_characteristics_4_0= ruleCharacteristic )
            	    {
            	    // InternalMASLParser.g:936:5: (lv_characteristics_4_0= ruleCharacteristic )
            	    // InternalMASLParser.g:937:6: lv_characteristics_4_0= ruleCharacteristic
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionAccess().getCharacteristicsCharacteristicParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_22);
            	    lv_characteristics_4_0=ruleCharacteristic();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBuiltinLibraryDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"characteristics",
            	      							lv_characteristics_4_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.Characteristic");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            otherlv_5=(Token)match(input,End,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getBuiltinLibraryDefinitionAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:959:3: (otherlv_6= Builtin )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Builtin) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // InternalMASLParser.g:960:4: otherlv_6= Builtin
                    {
                    otherlv_6=(Token)match(input,Builtin,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinKeyword_5());
                      			
                    }

                    }
                    break;

            }

            otherlv_7=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getBuiltinLibraryDefinitionAccess().getSemicolonKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBuiltinLibraryDefinition"


    // $ANTLR start "entryRuleBuiltinTypeDeclaration"
    // InternalMASLParser.g:973:1: entryRuleBuiltinTypeDeclaration returns [EObject current=null] : iv_ruleBuiltinTypeDeclaration= ruleBuiltinTypeDeclaration EOF ;
    public final EObject entryRuleBuiltinTypeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBuiltinTypeDeclaration = null;


        try {
            // InternalMASLParser.g:973:63: (iv_ruleBuiltinTypeDeclaration= ruleBuiltinTypeDeclaration EOF )
            // InternalMASLParser.g:974:2: iv_ruleBuiltinTypeDeclaration= ruleBuiltinTypeDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBuiltinTypeDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBuiltinTypeDeclaration=ruleBuiltinTypeDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBuiltinTypeDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBuiltinTypeDeclaration"


    // $ANTLR start "ruleBuiltinTypeDeclaration"
    // InternalMASLParser.g:980:1: ruleBuiltinTypeDeclaration returns [EObject current=null] : (this_TypeDeclaration_0= ruleTypeDeclaration | ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon ) ) ;
    public final EObject ruleBuiltinTypeDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_2_0=null;
        Token otherlv_3=null;
        Token lv_name_4_0=null;
        Token otherlv_5=null;
        EObject this_TypeDeclaration_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:986:2: ( (this_TypeDeclaration_0= ruleTypeDeclaration | ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon ) ) )
            // InternalMASLParser.g:987:2: (this_TypeDeclaration_0= ruleTypeDeclaration | ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon ) )
            {
            // InternalMASLParser.g:987:2: (this_TypeDeclaration_0= ruleTypeDeclaration | ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==Private||LA20_0==Subtype||LA20_0==Public||LA20_0==Type) ) {
                alt20=1;
            }
            else if ( (LA20_0==Anonymous||LA20_0==Builtin) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // InternalMASLParser.g:988:3: this_TypeDeclaration_0= ruleTypeDeclaration
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBuiltinTypeDeclarationAccess().getTypeDeclarationParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeDeclaration_0=ruleTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeDeclaration_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:997:3: ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon )
                    {
                    // InternalMASLParser.g:997:3: ( () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon )
                    // InternalMASLParser.g:998:4: () ( (lv_anonymous_2_0= Anonymous ) )? otherlv_3= Builtin ( (lv_name_4_0= RULE_ID ) ) otherlv_5= Semicolon
                    {
                    // InternalMASLParser.g:998:4: ()
                    // InternalMASLParser.g:999:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getBuiltinTypeDeclarationAccess().getBuiltinTypeDeclarationAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:1005:4: ( (lv_anonymous_2_0= Anonymous ) )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==Anonymous) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // InternalMASLParser.g:1006:5: (lv_anonymous_2_0= Anonymous )
                            {
                            // InternalMASLParser.g:1006:5: (lv_anonymous_2_0= Anonymous )
                            // InternalMASLParser.g:1007:6: lv_anonymous_2_0= Anonymous
                            {
                            lv_anonymous_2_0=(Token)match(input,Anonymous,FOLLOW_24); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_anonymous_2_0, grammarAccess.getBuiltinTypeDeclarationAccess().getAnonymousAnonymousKeyword_1_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBuiltinTypeDeclarationRule());
                              						}
                              						setWithLastConsumed(current, "anonymous", true, "anonymous");
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_3=(Token)match(input,Builtin,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getBuiltinTypeDeclarationAccess().getBuiltinKeyword_1_2());
                      			
                    }
                    // InternalMASLParser.g:1023:4: ( (lv_name_4_0= RULE_ID ) )
                    // InternalMASLParser.g:1024:5: (lv_name_4_0= RULE_ID )
                    {
                    // InternalMASLParser.g:1024:5: (lv_name_4_0= RULE_ID )
                    // InternalMASLParser.g:1025:6: lv_name_4_0= RULE_ID
                    {
                    lv_name_4_0=(Token)match(input,RULE_ID,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_name_4_0, grammarAccess.getBuiltinTypeDeclarationAccess().getNameIDTerminalRuleCall_1_3_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBuiltinTypeDeclarationRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.xtuml.bp.xtext.masl.MASL.ID");
                      					
                    }

                    }


                    }

                    otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getBuiltinTypeDeclarationAccess().getSemicolonKeyword_1_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBuiltinTypeDeclaration"


    // $ANTLR start "entryRuleCharacteristic"
    // InternalMASLParser.g:1050:1: entryRuleCharacteristic returns [EObject current=null] : iv_ruleCharacteristic= ruleCharacteristic EOF ;
    public final EObject entryRuleCharacteristic() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCharacteristic = null;


        try {
            // InternalMASLParser.g:1050:55: (iv_ruleCharacteristic= ruleCharacteristic EOF )
            // InternalMASLParser.g:1051:2: iv_ruleCharacteristic= ruleCharacteristic EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCharacteristicRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCharacteristic=ruleCharacteristic();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCharacteristic; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCharacteristic"


    // $ANTLR start "ruleCharacteristic"
    // InternalMASLParser.g:1057:1: ruleCharacteristic returns [EObject current=null] : ( (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )? ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) ) otherlv_9= Apostrophe ( (lv_name_10_0= ruleCharacteristicID ) ) (this_ParameterList_11= ruleParameterList[$current] )? (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )? otherlv_14= Semicolon ) ;
    public final EObject ruleCharacteristic() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token lv_forValue_5_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        EObject lv_typeParams_1_0 = null;

        EObject lv_typeParams_3_0 = null;

        EObject lv_receiverType_6_0 = null;

        EObject lv_receiverType_8_0 = null;

        AntlrDatatypeRuleToken lv_name_10_0 = null;

        EObject this_ParameterList_11 = null;

        EObject lv_returnType_13_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1063:2: ( ( (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )? ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) ) otherlv_9= Apostrophe ( (lv_name_10_0= ruleCharacteristicID ) ) (this_ParameterList_11= ruleParameterList[$current] )? (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )? otherlv_14= Semicolon ) )
            // InternalMASLParser.g:1064:2: ( (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )? ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) ) otherlv_9= Apostrophe ( (lv_name_10_0= ruleCharacteristicID ) ) (this_ParameterList_11= ruleParameterList[$current] )? (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )? otherlv_14= Semicolon )
            {
            // InternalMASLParser.g:1064:2: ( (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )? ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) ) otherlv_9= Apostrophe ( (lv_name_10_0= ruleCharacteristicID ) ) (this_ParameterList_11= ruleParameterList[$current] )? (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )? otherlv_14= Semicolon )
            // InternalMASLParser.g:1065:3: (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )? ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) ) otherlv_9= Apostrophe ( (lv_name_10_0= ruleCharacteristicID ) ) (this_ParameterList_11= ruleParameterList[$current] )? (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )? otherlv_14= Semicolon
            {
            // InternalMASLParser.g:1065:3: (otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LessThanSign) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // InternalMASLParser.g:1066:4: otherlv_0= LessThanSign ( (lv_typeParams_1_0= ruleTypeParameter ) ) (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )* otherlv_4= GreaterThanSign
                    {
                    otherlv_0=(Token)match(input,LessThanSign,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getCharacteristicAccess().getLessThanSignKeyword_0_0());
                      			
                    }
                    // InternalMASLParser.g:1070:4: ( (lv_typeParams_1_0= ruleTypeParameter ) )
                    // InternalMASLParser.g:1071:5: (lv_typeParams_1_0= ruleTypeParameter )
                    {
                    // InternalMASLParser.g:1071:5: (lv_typeParams_1_0= ruleTypeParameter )
                    // InternalMASLParser.g:1072:6: lv_typeParams_1_0= ruleTypeParameter
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeParamsTypeParameterParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_26);
                    lv_typeParams_1_0=ruleTypeParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCharacteristicRule());
                      						}
                      						add(
                      							current,
                      							"typeParams",
                      							lv_typeParams_1_0,
                      							"org.xtuml.bp.xtext.masl.MASL.TypeParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:1089:4: (otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) ) )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==Comma) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // InternalMASLParser.g:1090:5: otherlv_2= Comma ( (lv_typeParams_3_0= ruleTypeParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getCharacteristicAccess().getCommaKeyword_0_2_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:1094:5: ( (lv_typeParams_3_0= ruleTypeParameter ) )
                    	    // InternalMASLParser.g:1095:6: (lv_typeParams_3_0= ruleTypeParameter )
                    	    {
                    	    // InternalMASLParser.g:1095:6: (lv_typeParams_3_0= ruleTypeParameter )
                    	    // InternalMASLParser.g:1096:7: lv_typeParams_3_0= ruleTypeParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeParamsTypeParameterParserRuleCall_0_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_26);
                    	    lv_typeParams_3_0=ruleTypeParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCharacteristicRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeParams",
                    	      								lv_typeParams_3_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.TypeParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);

                    otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getCharacteristicAccess().getGreaterThanSignKeyword_0_3());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:1119:3: ( ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis ) | ( (lv_receiverType_8_0= ruleAbstractTypeReference ) ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LeftParenthesis) ) {
                alt23=1;
            }
            else if ( (LA23_0==Dictionary||LA23_0==Anonymous||LA23_0==Instance||LA23_0==Sequence||LA23_0==Array||LA23_0==Bag||LA23_0==Set||LA23_0==RULE_ID) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // InternalMASLParser.g:1120:4: ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis )
                    {
                    // InternalMASLParser.g:1120:4: ( ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis )
                    // InternalMASLParser.g:1121:5: ( (lv_forValue_5_0= LeftParenthesis ) ) ( (lv_receiverType_6_0= ruleAbstractTypeReference ) ) otherlv_7= RightParenthesis
                    {
                    // InternalMASLParser.g:1121:5: ( (lv_forValue_5_0= LeftParenthesis ) )
                    // InternalMASLParser.g:1122:6: (lv_forValue_5_0= LeftParenthesis )
                    {
                    // InternalMASLParser.g:1122:6: (lv_forValue_5_0= LeftParenthesis )
                    // InternalMASLParser.g:1123:7: lv_forValue_5_0= LeftParenthesis
                    {
                    lv_forValue_5_0=(Token)match(input,LeftParenthesis,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_forValue_5_0, grammarAccess.getCharacteristicAccess().getForValueLeftParenthesisKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getCharacteristicRule());
                      							}
                      							setWithLastConsumed(current, "forValue", true, "(");
                      						
                    }

                    }


                    }

                    // InternalMASLParser.g:1135:5: ( (lv_receiverType_6_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:1136:6: (lv_receiverType_6_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:1136:6: (lv_receiverType_6_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:1137:7: lv_receiverType_6_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCharacteristicAccess().getReceiverTypeAbstractTypeReferenceParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_28);
                    lv_receiverType_6_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCharacteristicRule());
                      							}
                      							set(
                      								current,
                      								"receiverType",
                      								lv_receiverType_6_0,
                      								"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_29); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_7, grammarAccess.getCharacteristicAccess().getRightParenthesisKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1160:4: ( (lv_receiverType_8_0= ruleAbstractTypeReference ) )
                    {
                    // InternalMASLParser.g:1160:4: ( (lv_receiverType_8_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:1161:5: (lv_receiverType_8_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:1161:5: (lv_receiverType_8_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:1162:6: lv_receiverType_8_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCharacteristicAccess().getReceiverTypeAbstractTypeReferenceParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_29);
                    lv_receiverType_8_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCharacteristicRule());
                      						}
                      						set(
                      							current,
                      							"receiverType",
                      							lv_receiverType_8_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,Apostrophe,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getCharacteristicAccess().getApostropheKeyword_2());
              		
            }
            // InternalMASLParser.g:1184:3: ( (lv_name_10_0= ruleCharacteristicID ) )
            // InternalMASLParser.g:1185:4: (lv_name_10_0= ruleCharacteristicID )
            {
            // InternalMASLParser.g:1185:4: (lv_name_10_0= ruleCharacteristicID )
            // InternalMASLParser.g:1186:5: lv_name_10_0= ruleCharacteristicID
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCharacteristicAccess().getNameCharacteristicIDParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_name_10_0=ruleCharacteristicID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCharacteristicRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_10_0,
              						"org.xtuml.bp.xtext.masl.MASL.CharacteristicID");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:1203:3: (this_ParameterList_11= ruleParameterList[$current] )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LeftParenthesis) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // InternalMASLParser.g:1204:4: this_ParameterList_11= ruleParameterList[$current]
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getCharacteristicRule());
                      				}
                      				newCompositeNode(grammarAccess.getCharacteristicAccess().getParameterListParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_32);
                    this_ParameterList_11=ruleParameterList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ParameterList_11;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:1216:3: (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) ) )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==Return) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // InternalMASLParser.g:1217:4: otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) )
                    {
                    otherlv_12=(Token)match(input,Return,FOLLOW_33); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getCharacteristicAccess().getReturnKeyword_5_0());
                      			
                    }
                    // InternalMASLParser.g:1221:4: ( (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange ) )
                    // InternalMASLParser.g:1222:5: (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange )
                    {
                    // InternalMASLParser.g:1222:5: (lv_returnType_13_0= ruleAbstractTypeReferenceWithRange )
                    // InternalMASLParser.g:1223:6: lv_returnType_13_0= ruleAbstractTypeReferenceWithRange
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCharacteristicAccess().getReturnTypeAbstractTypeReferenceWithRangeParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_returnType_13_0=ruleAbstractTypeReferenceWithRange();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCharacteristicRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_13_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithRange");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_14=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_14, grammarAccess.getCharacteristicAccess().getSemicolonKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCharacteristic"


    // $ANTLR start "entryRuleTypeParameter"
    // InternalMASLParser.g:1249:1: entryRuleTypeParameter returns [EObject current=null] : iv_ruleTypeParameter= ruleTypeParameter EOF ;
    public final EObject entryRuleTypeParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeParameter = null;


        try {
            // InternalMASLParser.g:1249:54: (iv_ruleTypeParameter= ruleTypeParameter EOF )
            // InternalMASLParser.g:1250:2: iv_ruleTypeParameter= ruleTypeParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeParameter=ruleTypeParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeParameter"


    // $ANTLR start "ruleTypeParameter"
    // InternalMASLParser.g:1256:1: ruleTypeParameter returns [EObject current=null] : ( ( (lv_enum_0_0= Enum ) )? ( (lv_name_1_0= RULE_ID ) ) ) ;
    public final EObject ruleTypeParameter() throws RecognitionException {
        EObject current = null;

        Token lv_enum_0_0=null;
        Token lv_name_1_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:1262:2: ( ( ( (lv_enum_0_0= Enum ) )? ( (lv_name_1_0= RULE_ID ) ) ) )
            // InternalMASLParser.g:1263:2: ( ( (lv_enum_0_0= Enum ) )? ( (lv_name_1_0= RULE_ID ) ) )
            {
            // InternalMASLParser.g:1263:2: ( ( (lv_enum_0_0= Enum ) )? ( (lv_name_1_0= RULE_ID ) ) )
            // InternalMASLParser.g:1264:3: ( (lv_enum_0_0= Enum ) )? ( (lv_name_1_0= RULE_ID ) )
            {
            // InternalMASLParser.g:1264:3: ( (lv_enum_0_0= Enum ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==Enum) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // InternalMASLParser.g:1265:4: (lv_enum_0_0= Enum )
                    {
                    // InternalMASLParser.g:1265:4: (lv_enum_0_0= Enum )
                    // InternalMASLParser.g:1266:5: lv_enum_0_0= Enum
                    {
                    lv_enum_0_0=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_enum_0_0, grammarAccess.getTypeParameterAccess().getEnumEnumKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeParameterRule());
                      					}
                      					setWithLastConsumed(current, "enum", true, "enum");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:1278:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:1279:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:1279:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:1280:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getTypeParameterAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeParameterRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeParameter"


    // $ANTLR start "entryRuleAbstractTypeReferenceWithRange"
    // InternalMASLParser.g:1300:1: entryRuleAbstractTypeReferenceWithRange returns [EObject current=null] : iv_ruleAbstractTypeReferenceWithRange= ruleAbstractTypeReferenceWithRange EOF ;
    public final EObject entryRuleAbstractTypeReferenceWithRange() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTypeReferenceWithRange = null;


        try {
            // InternalMASLParser.g:1300:71: (iv_ruleAbstractTypeReferenceWithRange= ruleAbstractTypeReferenceWithRange EOF )
            // InternalMASLParser.g:1301:2: iv_ruleAbstractTypeReferenceWithRange= ruleAbstractTypeReferenceWithRange EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTypeReferenceWithRange=ruleAbstractTypeReferenceWithRange();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTypeReferenceWithRange; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTypeReferenceWithRange"


    // $ANTLR start "ruleAbstractTypeReferenceWithRange"
    // InternalMASLParser.g:1307:1: ruleAbstractTypeReferenceWithRange returns [EObject current=null] : (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_RangeTypeReference_1= ruleRangeTypeReference ) ;
    public final EObject ruleAbstractTypeReferenceWithRange() throws RecognitionException {
        EObject current = null;

        EObject this_AbstractTypeReference_0 = null;

        EObject this_RangeTypeReference_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1313:2: ( (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_RangeTypeReference_1= ruleRangeTypeReference ) )
            // InternalMASLParser.g:1314:2: (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_RangeTypeReference_1= ruleRangeTypeReference )
            {
            // InternalMASLParser.g:1314:2: (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_RangeTypeReference_1= ruleRangeTypeReference )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==Dictionary||LA27_0==Anonymous||LA27_0==Instance||LA27_0==Sequence||LA27_0==Array||LA27_0==Bag||LA27_0==Set||LA27_0==RULE_ID) ) {
                alt27=1;
            }
            else if ( (LA27_0==Range) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // InternalMASLParser.g:1315:3: this_AbstractTypeReference_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeAccess().getAbstractTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AbstractTypeReference_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AbstractTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1324:3: this_RangeTypeReference_1= ruleRangeTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeAccess().getRangeTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RangeTypeReference_1=ruleRangeTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RangeTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTypeReferenceWithRange"


    // $ANTLR start "entryRuleRangeTypeReference"
    // InternalMASLParser.g:1336:1: entryRuleRangeTypeReference returns [EObject current=null] : iv_ruleRangeTypeReference= ruleRangeTypeReference EOF ;
    public final EObject entryRuleRangeTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeTypeReference = null;


        try {
            // InternalMASLParser.g:1336:59: (iv_ruleRangeTypeReference= ruleRangeTypeReference EOF )
            // InternalMASLParser.g:1337:2: iv_ruleRangeTypeReference= ruleRangeTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeTypeReference=ruleRangeTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeTypeReference"


    // $ANTLR start "ruleRangeTypeReference"
    // InternalMASLParser.g:1343:1: ruleRangeTypeReference returns [EObject current=null] : (otherlv_0= Range otherlv_1= Of ( (lv_elementType_2_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleRangeTypeReference() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject lv_elementType_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1349:2: ( (otherlv_0= Range otherlv_1= Of ( (lv_elementType_2_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:1350:2: (otherlv_0= Range otherlv_1= Of ( (lv_elementType_2_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:1350:2: (otherlv_0= Range otherlv_1= Of ( (lv_elementType_2_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:1351:3: otherlv_0= Range otherlv_1= Of ( (lv_elementType_2_0= ruleAbstractTypeReference ) )
            {
            otherlv_0=(Token)match(input,Range,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRangeTypeReferenceAccess().getRangeKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRangeTypeReferenceAccess().getOfKeyword_1());
              		
            }
            // InternalMASLParser.g:1359:3: ( (lv_elementType_2_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:1360:4: (lv_elementType_2_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:1360:4: (lv_elementType_2_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:1361:5: lv_elementType_2_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRangeTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_2_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRangeTypeReferenceRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeTypeReference"


    // $ANTLR start "entryRuleExceptionDeclaration"
    // InternalMASLParser.g:1382:1: entryRuleExceptionDeclaration returns [EObject current=null] : iv_ruleExceptionDeclaration= ruleExceptionDeclaration EOF ;
    public final EObject entryRuleExceptionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExceptionDeclaration = null;


        try {
            // InternalMASLParser.g:1382:61: (iv_ruleExceptionDeclaration= ruleExceptionDeclaration EOF )
            // InternalMASLParser.g:1383:2: iv_ruleExceptionDeclaration= ruleExceptionDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExceptionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExceptionDeclaration=ruleExceptionDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExceptionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExceptionDeclaration"


    // $ANTLR start "ruleExceptionDeclaration"
    // InternalMASLParser.g:1389:1: ruleExceptionDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? otherlv_1= Exception ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Semicolon this_PragmaList_4= rulePragmaList[$current] ) ;
    public final EObject ruleExceptionDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_PragmaList_4 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1395:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? otherlv_1= Exception ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Semicolon this_PragmaList_4= rulePragmaList[$current] ) )
            // InternalMASLParser.g:1396:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? otherlv_1= Exception ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Semicolon this_PragmaList_4= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:1396:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? otherlv_1= Exception ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Semicolon this_PragmaList_4= rulePragmaList[$current] )
            // InternalMASLParser.g:1397:3: ( (lv_visibility_0_0= ruleVisibility ) )? otherlv_1= Exception ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Semicolon this_PragmaList_4= rulePragmaList[$current]
            {
            // InternalMASLParser.g:1397:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==Private||LA28_0==Public) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // InternalMASLParser.g:1398:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:1398:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:1399:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_35);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExceptionDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Exception,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExceptionDeclarationAccess().getExceptionKeyword_1());
              		
            }
            // InternalMASLParser.g:1420:3: ( (lv_name_2_0= RULE_ID ) )
            // InternalMASLParser.g:1421:4: (lv_name_2_0= RULE_ID )
            {
            // InternalMASLParser.g:1421:4: (lv_name_2_0= RULE_ID )
            // InternalMASLParser.g:1422:5: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getExceptionDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExceptionDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getExceptionDeclarationAccess().getSemicolonKeyword_3());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExceptionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getPragmaListParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_4=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExceptionDeclaration"


    // $ANTLR start "entryRuleTypeForwardDeclaration"
    // InternalMASLParser.g:1457:1: entryRuleTypeForwardDeclaration returns [EObject current=null] : iv_ruleTypeForwardDeclaration= ruleTypeForwardDeclaration EOF ;
    public final EObject entryRuleTypeForwardDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeForwardDeclaration = null;


        try {
            // InternalMASLParser.g:1457:63: (iv_ruleTypeForwardDeclaration= ruleTypeForwardDeclaration EOF )
            // InternalMASLParser.g:1458:2: iv_ruleTypeForwardDeclaration= ruleTypeForwardDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeForwardDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeForwardDeclaration=ruleTypeForwardDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeForwardDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeForwardDeclaration"


    // $ANTLR start "ruleTypeForwardDeclaration"
    // InternalMASLParser.g:1464:1: ruleTypeForwardDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) ;
    public final EObject ruleTypeForwardDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_subtype_2_0=null;
        Token lv_name_3_0=null;
        Token otherlv_4=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_PragmaList_5 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1470:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) )
            // InternalMASLParser.g:1471:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:1471:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            // InternalMASLParser.g:1472:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current]
            {
            // InternalMASLParser.g:1472:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==Private||LA29_0==Public) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // InternalMASLParser.g:1473:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:1473:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:1474:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTypeForwardDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_36);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTypeForwardDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:1491:3: (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==Type) ) {
                alt30=1;
            }
            else if ( (LA30_0==Subtype) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // InternalMASLParser.g:1492:4: otherlv_1= Type
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeForwardDeclarationAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1497:4: ( (lv_subtype_2_0= Subtype ) )
                    {
                    // InternalMASLParser.g:1497:4: ( (lv_subtype_2_0= Subtype ) )
                    // InternalMASLParser.g:1498:5: (lv_subtype_2_0= Subtype )
                    {
                    // InternalMASLParser.g:1498:5: (lv_subtype_2_0= Subtype )
                    // InternalMASLParser.g:1499:6: lv_subtype_2_0= Subtype
                    {
                    lv_subtype_2_0=(Token)match(input,Subtype,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_subtype_2_0, grammarAccess.getTypeForwardDeclarationAccess().getSubtypeSubtypeKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
                      						}
                      						setWithLastConsumed(current, "subtype", true, "subtype");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalMASLParser.g:1512:3: ( (lv_name_3_0= RULE_ID ) )
            // InternalMASLParser.g:1513:4: (lv_name_3_0= RULE_ID )
            {
            // InternalMASLParser.g:1513:4: (lv_name_3_0= RULE_ID )
            // InternalMASLParser.g:1514:5: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_3_0, grammarAccess.getTypeForwardDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_4=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeForwardDeclarationAccess().getSemicolonKeyword_3());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getTypeForwardDeclarationAccess().getPragmaListParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_5=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_5;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeForwardDeclaration"


    // $ANTLR start "entryRuleTypeDeclaration"
    // InternalMASLParser.g:1549:1: entryRuleTypeDeclaration returns [EObject current=null] : iv_ruleTypeDeclaration= ruleTypeDeclaration EOF ;
    public final EObject entryRuleTypeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeDeclaration = null;


        try {
            // InternalMASLParser.g:1549:56: (iv_ruleTypeDeclaration= ruleTypeDeclaration EOF )
            // InternalMASLParser.g:1550:2: iv_ruleTypeDeclaration= ruleTypeDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeDeclaration=ruleTypeDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeDeclaration"


    // $ANTLR start "ruleTypeDeclaration"
    // InternalMASLParser.g:1556:1: ruleTypeDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Is ( (lv_definition_5_0= ruleAbstractTypeDefinition ) ) otherlv_6= Semicolon (otherlv_7= Semicolon )? this_PragmaList_8= rulePragmaList[$current] ) ;
    public final EObject ruleTypeDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_subtype_2_0=null;
        Token lv_name_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Enumerator lv_visibility_0_0 = null;

        EObject lv_definition_5_0 = null;

        EObject this_PragmaList_8 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1562:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Is ( (lv_definition_5_0= ruleAbstractTypeDefinition ) ) otherlv_6= Semicolon (otherlv_7= Semicolon )? this_PragmaList_8= rulePragmaList[$current] ) )
            // InternalMASLParser.g:1563:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Is ( (lv_definition_5_0= ruleAbstractTypeDefinition ) ) otherlv_6= Semicolon (otherlv_7= Semicolon )? this_PragmaList_8= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:1563:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Is ( (lv_definition_5_0= ruleAbstractTypeDefinition ) ) otherlv_6= Semicolon (otherlv_7= Semicolon )? this_PragmaList_8= rulePragmaList[$current] )
            // InternalMASLParser.g:1564:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) ) ( (lv_name_3_0= RULE_ID ) ) otherlv_4= Is ( (lv_definition_5_0= ruleAbstractTypeDefinition ) ) otherlv_6= Semicolon (otherlv_7= Semicolon )? this_PragmaList_8= rulePragmaList[$current]
            {
            // InternalMASLParser.g:1564:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==Private||LA31_0==Public) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // InternalMASLParser.g:1565:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:1565:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:1566:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_36);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:1583:3: (otherlv_1= Type | ( (lv_subtype_2_0= Subtype ) ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==Type) ) {
                alt32=1;
            }
            else if ( (LA32_0==Subtype) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // InternalMASLParser.g:1584:4: otherlv_1= Type
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1589:4: ( (lv_subtype_2_0= Subtype ) )
                    {
                    // InternalMASLParser.g:1589:4: ( (lv_subtype_2_0= Subtype ) )
                    // InternalMASLParser.g:1590:5: (lv_subtype_2_0= Subtype )
                    {
                    // InternalMASLParser.g:1590:5: (lv_subtype_2_0= Subtype )
                    // InternalMASLParser.g:1591:6: lv_subtype_2_0= Subtype
                    {
                    lv_subtype_2_0=(Token)match(input,Subtype,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_subtype_2_0, grammarAccess.getTypeDeclarationAccess().getSubtypeSubtypeKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeDeclarationRule());
                      						}
                      						setWithLastConsumed(current, "subtype", true, "subtype");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalMASLParser.g:1604:3: ( (lv_name_3_0= RULE_ID ) )
            // InternalMASLParser.g:1605:4: (lv_name_3_0= RULE_ID )
            {
            // InternalMASLParser.g:1605:4: (lv_name_3_0= RULE_ID )
            // InternalMASLParser.g:1606:5: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_3_0, grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_4=(Token)match(input,Is,FOLLOW_37); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeDeclarationAccess().getIsKeyword_3());
              		
            }
            // InternalMASLParser.g:1626:3: ( (lv_definition_5_0= ruleAbstractTypeDefinition ) )
            // InternalMASLParser.g:1627:4: (lv_definition_5_0= ruleAbstractTypeDefinition )
            {
            // InternalMASLParser.g:1627:4: (lv_definition_5_0= ruleAbstractTypeDefinition )
            // InternalMASLParser.g:1628:5: lv_definition_5_0= ruleAbstractTypeDefinition
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getDefinitionAbstractTypeDefinitionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_6);
            lv_definition_5_0=ruleAbstractTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
              					}
              					set(
              						current,
              						"definition",
              						lv_definition_5_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeDefinition");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_5());
              		
            }
            // InternalMASLParser.g:1649:3: (otherlv_7= Semicolon )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==Semicolon) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalMASLParser.g:1650:4: otherlv_7= Semicolon
                    {
                    otherlv_7=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTypeDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_8=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_8;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeDeclaration"


    // $ANTLR start "entryRuleAbstractTypeDefinition"
    // InternalMASLParser.g:1670:1: entryRuleAbstractTypeDefinition returns [EObject current=null] : iv_ruleAbstractTypeDefinition= ruleAbstractTypeDefinition EOF ;
    public final EObject entryRuleAbstractTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTypeDefinition = null;


        try {
            // InternalMASLParser.g:1670:63: (iv_ruleAbstractTypeDefinition= ruleAbstractTypeDefinition EOF )
            // InternalMASLParser.g:1671:2: iv_ruleAbstractTypeDefinition= ruleAbstractTypeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTypeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTypeDefinition=ruleAbstractTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTypeDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTypeDefinition"


    // $ANTLR start "ruleAbstractTypeDefinition"
    // InternalMASLParser.g:1677:1: ruleAbstractTypeDefinition returns [EObject current=null] : (this_StructureTypeDefinition_0= ruleStructureTypeDefinition | this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition | this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition | this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA | this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition ) ;
    public final EObject ruleAbstractTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject this_StructureTypeDefinition_0 = null;

        EObject this_EnumerationTypeDefinition_1 = null;

        EObject this_ConstrainedTypeDefinition_2 = null;

        EObject this_AbstractTypeReferenceWithCA_3 = null;

        EObject this_UnconstrainedArrayDefinition_4 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1683:2: ( (this_StructureTypeDefinition_0= ruleStructureTypeDefinition | this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition | this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition | this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA | this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition ) )
            // InternalMASLParser.g:1684:2: (this_StructureTypeDefinition_0= ruleStructureTypeDefinition | this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition | this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition | this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA | this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition )
            {
            // InternalMASLParser.g:1684:2: (this_StructureTypeDefinition_0= ruleStructureTypeDefinition | this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition | this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition | this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA | this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition )
            int alt34=5;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // InternalMASLParser.g:1685:3: this_StructureTypeDefinition_0= ruleStructureTypeDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getStructureTypeDefinitionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StructureTypeDefinition_0=ruleStructureTypeDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StructureTypeDefinition_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1694:3: this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EnumerationTypeDefinition_1=ruleEnumerationTypeDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EnumerationTypeDefinition_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:1703:3: this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getConstrainedTypeDefinitionParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ConstrainedTypeDefinition_2=ruleConstrainedTypeDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ConstrainedTypeDefinition_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:1712:3: this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getAbstractTypeReferenceWithCAParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AbstractTypeReferenceWithCA_3=ruleAbstractTypeReferenceWithCA();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AbstractTypeReferenceWithCA_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalMASLParser.g:1721:3: this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getUnconstrainedArrayDefinitionParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnconstrainedArrayDefinition_4=ruleUnconstrainedArrayDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnconstrainedArrayDefinition_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTypeDefinition"


    // $ANTLR start "entryRuleConstrainedTypeDefinition"
    // InternalMASLParser.g:1733:1: entryRuleConstrainedTypeDefinition returns [EObject current=null] : iv_ruleConstrainedTypeDefinition= ruleConstrainedTypeDefinition EOF ;
    public final EObject entryRuleConstrainedTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConstrainedTypeDefinition = null;


        try {
            // InternalMASLParser.g:1733:66: (iv_ruleConstrainedTypeDefinition= ruleConstrainedTypeDefinition EOF )
            // InternalMASLParser.g:1734:2: iv_ruleConstrainedTypeDefinition= ruleConstrainedTypeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConstrainedTypeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConstrainedTypeDefinition=ruleConstrainedTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConstrainedTypeDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConstrainedTypeDefinition"


    // $ANTLR start "ruleConstrainedTypeDefinition"
    // InternalMASLParser.g:1740:1: ruleConstrainedTypeDefinition returns [EObject current=null] : ( ( (lv_type_0_0= ruleNamedTypeReference ) ) ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) ) ) ;
    public final EObject ruleConstrainedTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject lv_type_0_0 = null;

        EObject lv_constraint_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1746:2: ( ( ( (lv_type_0_0= ruleNamedTypeReference ) ) ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) ) ) )
            // InternalMASLParser.g:1747:2: ( ( (lv_type_0_0= ruleNamedTypeReference ) ) ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) ) )
            {
            // InternalMASLParser.g:1747:2: ( ( (lv_type_0_0= ruleNamedTypeReference ) ) ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) ) )
            // InternalMASLParser.g:1748:3: ( (lv_type_0_0= ruleNamedTypeReference ) ) ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) )
            {
            // InternalMASLParser.g:1748:3: ( (lv_type_0_0= ruleNamedTypeReference ) )
            // InternalMASLParser.g:1749:4: (lv_type_0_0= ruleNamedTypeReference )
            {
            // InternalMASLParser.g:1749:4: (lv_type_0_0= ruleNamedTypeReference )
            // InternalMASLParser.g:1750:5: lv_type_0_0= ruleNamedTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConstrainedTypeDefinitionAccess().getTypeNamedTypeReferenceParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_38);
            lv_type_0_0=ruleNamedTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConstrainedTypeDefinitionRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.NamedTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:1767:3: ( (lv_constraint_1_0= ruleAbstractTypeConstraint ) )
            // InternalMASLParser.g:1768:4: (lv_constraint_1_0= ruleAbstractTypeConstraint )
            {
            // InternalMASLParser.g:1768:4: (lv_constraint_1_0= ruleAbstractTypeConstraint )
            // InternalMASLParser.g:1769:5: lv_constraint_1_0= ruleAbstractTypeConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConstrainedTypeDefinitionAccess().getConstraintAbstractTypeConstraintParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_constraint_1_0=ruleAbstractTypeConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConstrainedTypeDefinitionRule());
              					}
              					set(
              						current,
              						"constraint",
              						lv_constraint_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConstrainedTypeDefinition"


    // $ANTLR start "entryRuleAbstractTypeConstraint"
    // InternalMASLParser.g:1790:1: entryRuleAbstractTypeConstraint returns [EObject current=null] : iv_ruleAbstractTypeConstraint= ruleAbstractTypeConstraint EOF ;
    public final EObject entryRuleAbstractTypeConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTypeConstraint = null;


        try {
            // InternalMASLParser.g:1790:63: (iv_ruleAbstractTypeConstraint= ruleAbstractTypeConstraint EOF )
            // InternalMASLParser.g:1791:2: iv_ruleAbstractTypeConstraint= ruleAbstractTypeConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTypeConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTypeConstraint=ruleAbstractTypeConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTypeConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTypeConstraint"


    // $ANTLR start "ruleAbstractTypeConstraint"
    // InternalMASLParser.g:1797:1: ruleAbstractTypeConstraint returns [EObject current=null] : (this_RangeConstraint_0= ruleRangeConstraint | this_DeltaConstraint_1= ruleDeltaConstraint | this_DigitsConstraint_2= ruleDigitsConstraint ) ;
    public final EObject ruleAbstractTypeConstraint() throws RecognitionException {
        EObject current = null;

        EObject this_RangeConstraint_0 = null;

        EObject this_DeltaConstraint_1 = null;

        EObject this_DigitsConstraint_2 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1803:2: ( (this_RangeConstraint_0= ruleRangeConstraint | this_DeltaConstraint_1= ruleDeltaConstraint | this_DigitsConstraint_2= ruleDigitsConstraint ) )
            // InternalMASLParser.g:1804:2: (this_RangeConstraint_0= ruleRangeConstraint | this_DeltaConstraint_1= ruleDeltaConstraint | this_DigitsConstraint_2= ruleDigitsConstraint )
            {
            // InternalMASLParser.g:1804:2: (this_RangeConstraint_0= ruleRangeConstraint | this_DeltaConstraint_1= ruleDeltaConstraint | this_DigitsConstraint_2= ruleDigitsConstraint )
            int alt35=3;
            switch ( input.LA(1) ) {
            case Range:
                {
                alt35=1;
                }
                break;
            case Delta:
                {
                alt35=2;
                }
                break;
            case Digits:
                {
                alt35=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // InternalMASLParser.g:1805:3: this_RangeConstraint_0= ruleRangeConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getRangeConstraintParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RangeConstraint_0=ruleRangeConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RangeConstraint_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:1814:3: this_DeltaConstraint_1= ruleDeltaConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getDeltaConstraintParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DeltaConstraint_1=ruleDeltaConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DeltaConstraint_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:1823:3: this_DigitsConstraint_2= ruleDigitsConstraint
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getDigitsConstraintParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DigitsConstraint_2=ruleDigitsConstraint();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DigitsConstraint_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTypeConstraint"


    // $ANTLR start "entryRuleRangeConstraint"
    // InternalMASLParser.g:1835:1: entryRuleRangeConstraint returns [EObject current=null] : iv_ruleRangeConstraint= ruleRangeConstraint EOF ;
    public final EObject entryRuleRangeConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeConstraint = null;


        try {
            // InternalMASLParser.g:1835:56: (iv_ruleRangeConstraint= ruleRangeConstraint EOF )
            // InternalMASLParser.g:1836:2: iv_ruleRangeConstraint= ruleRangeConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeConstraint=ruleRangeConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeConstraint"


    // $ANTLR start "ruleRangeConstraint"
    // InternalMASLParser.g:1842:1: ruleRangeConstraint returns [EObject current=null] : (otherlv_0= Range ( (lv_range_1_0= ruleExpression ) ) ) ;
    public final EObject ruleRangeConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_range_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1848:2: ( (otherlv_0= Range ( (lv_range_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:1849:2: (otherlv_0= Range ( (lv_range_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:1849:2: (otherlv_0= Range ( (lv_range_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:1850:3: otherlv_0= Range ( (lv_range_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Range,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRangeConstraintAccess().getRangeKeyword_0());
              		
            }
            // InternalMASLParser.g:1854:3: ( (lv_range_1_0= ruleExpression ) )
            // InternalMASLParser.g:1855:4: (lv_range_1_0= ruleExpression )
            {
            // InternalMASLParser.g:1855:4: (lv_range_1_0= ruleExpression )
            // InternalMASLParser.g:1856:5: lv_range_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRangeConstraintAccess().getRangeExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_range_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRangeConstraintRule());
              					}
              					set(
              						current,
              						"range",
              						lv_range_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeConstraint"


    // $ANTLR start "entryRuleDeltaConstraint"
    // InternalMASLParser.g:1877:1: entryRuleDeltaConstraint returns [EObject current=null] : iv_ruleDeltaConstraint= ruleDeltaConstraint EOF ;
    public final EObject entryRuleDeltaConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDeltaConstraint = null;


        try {
            // InternalMASLParser.g:1877:56: (iv_ruleDeltaConstraint= ruleDeltaConstraint EOF )
            // InternalMASLParser.g:1878:2: iv_ruleDeltaConstraint= ruleDeltaConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeltaConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDeltaConstraint=ruleDeltaConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDeltaConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDeltaConstraint"


    // $ANTLR start "ruleDeltaConstraint"
    // InternalMASLParser.g:1884:1: ruleDeltaConstraint returns [EObject current=null] : (otherlv_0= Delta ( (lv_delta_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) ) ;
    public final EObject ruleDeltaConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_delta_1_0 = null;

        EObject lv_constraint_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1890:2: ( (otherlv_0= Delta ( (lv_delta_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) ) )
            // InternalMASLParser.g:1891:2: (otherlv_0= Delta ( (lv_delta_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) )
            {
            // InternalMASLParser.g:1891:2: (otherlv_0= Delta ( (lv_delta_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) )
            // InternalMASLParser.g:1892:3: otherlv_0= Delta ( (lv_delta_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) )
            {
            otherlv_0=(Token)match(input,Delta,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDeltaConstraintAccess().getDeltaKeyword_0());
              		
            }
            // InternalMASLParser.g:1896:3: ( (lv_delta_1_0= ruleConstExpression ) )
            // InternalMASLParser.g:1897:4: (lv_delta_1_0= ruleConstExpression )
            {
            // InternalMASLParser.g:1897:4: (lv_delta_1_0= ruleConstExpression )
            // InternalMASLParser.g:1898:5: lv_delta_1_0= ruleConstExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeltaConstraintAccess().getDeltaConstExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_delta_1_0=ruleConstExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeltaConstraintRule());
              					}
              					set(
              						current,
              						"delta",
              						lv_delta_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:1915:3: ( (lv_constraint_2_0= ruleRangeConstraint ) )
            // InternalMASLParser.g:1916:4: (lv_constraint_2_0= ruleRangeConstraint )
            {
            // InternalMASLParser.g:1916:4: (lv_constraint_2_0= ruleRangeConstraint )
            // InternalMASLParser.g:1917:5: lv_constraint_2_0= ruleRangeConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeltaConstraintAccess().getConstraintRangeConstraintParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_constraint_2_0=ruleRangeConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeltaConstraintRule());
              					}
              					set(
              						current,
              						"constraint",
              						lv_constraint_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.RangeConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDeltaConstraint"


    // $ANTLR start "entryRuleDigitsConstraint"
    // InternalMASLParser.g:1938:1: entryRuleDigitsConstraint returns [EObject current=null] : iv_ruleDigitsConstraint= ruleDigitsConstraint EOF ;
    public final EObject entryRuleDigitsConstraint() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDigitsConstraint = null;


        try {
            // InternalMASLParser.g:1938:57: (iv_ruleDigitsConstraint= ruleDigitsConstraint EOF )
            // InternalMASLParser.g:1939:2: iv_ruleDigitsConstraint= ruleDigitsConstraint EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDigitsConstraintRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDigitsConstraint=ruleDigitsConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDigitsConstraint; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDigitsConstraint"


    // $ANTLR start "ruleDigitsConstraint"
    // InternalMASLParser.g:1945:1: ruleDigitsConstraint returns [EObject current=null] : (otherlv_0= Digits ( (lv_digits_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) ) ;
    public final EObject ruleDigitsConstraint() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_digits_1_0 = null;

        EObject lv_constraint_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:1951:2: ( (otherlv_0= Digits ( (lv_digits_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) ) )
            // InternalMASLParser.g:1952:2: (otherlv_0= Digits ( (lv_digits_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) )
            {
            // InternalMASLParser.g:1952:2: (otherlv_0= Digits ( (lv_digits_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) ) )
            // InternalMASLParser.g:1953:3: otherlv_0= Digits ( (lv_digits_1_0= ruleConstExpression ) ) ( (lv_constraint_2_0= ruleRangeConstraint ) )
            {
            otherlv_0=(Token)match(input,Digits,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDigitsConstraintAccess().getDigitsKeyword_0());
              		
            }
            // InternalMASLParser.g:1957:3: ( (lv_digits_1_0= ruleConstExpression ) )
            // InternalMASLParser.g:1958:4: (lv_digits_1_0= ruleConstExpression )
            {
            // InternalMASLParser.g:1958:4: (lv_digits_1_0= ruleConstExpression )
            // InternalMASLParser.g:1959:5: lv_digits_1_0= ruleConstExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDigitsConstraintAccess().getDigitsConstExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_digits_1_0=ruleConstExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDigitsConstraintRule());
              					}
              					set(
              						current,
              						"digits",
              						lv_digits_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:1976:3: ( (lv_constraint_2_0= ruleRangeConstraint ) )
            // InternalMASLParser.g:1977:4: (lv_constraint_2_0= ruleRangeConstraint )
            {
            // InternalMASLParser.g:1977:4: (lv_constraint_2_0= ruleRangeConstraint )
            // InternalMASLParser.g:1978:5: lv_constraint_2_0= ruleRangeConstraint
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDigitsConstraintAccess().getConstraintRangeConstraintParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_constraint_2_0=ruleRangeConstraint();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDigitsConstraintRule());
              					}
              					set(
              						current,
              						"constraint",
              						lv_constraint_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.RangeConstraint");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDigitsConstraint"


    // $ANTLR start "entryRuleStructureTypeDefinition"
    // InternalMASLParser.g:1999:1: entryRuleStructureTypeDefinition returns [EObject current=null] : iv_ruleStructureTypeDefinition= ruleStructureTypeDefinition EOF ;
    public final EObject entryRuleStructureTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStructureTypeDefinition = null;


        try {
            // InternalMASLParser.g:1999:64: (iv_ruleStructureTypeDefinition= ruleStructureTypeDefinition EOF )
            // InternalMASLParser.g:2000:2: iv_ruleStructureTypeDefinition= ruleStructureTypeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStructureTypeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStructureTypeDefinition=ruleStructureTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStructureTypeDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStructureTypeDefinition"


    // $ANTLR start "ruleStructureTypeDefinition"
    // InternalMASLParser.g:2006:1: ruleStructureTypeDefinition returns [EObject current=null] : ( () otherlv_1= Structure ( (lv_components_2_0= ruleStructureComponentDefinition ) )* otherlv_3= End (otherlv_4= Structure )? ) ;
    public final EObject ruleStructureTypeDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_components_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2012:2: ( ( () otherlv_1= Structure ( (lv_components_2_0= ruleStructureComponentDefinition ) )* otherlv_3= End (otherlv_4= Structure )? ) )
            // InternalMASLParser.g:2013:2: ( () otherlv_1= Structure ( (lv_components_2_0= ruleStructureComponentDefinition ) )* otherlv_3= End (otherlv_4= Structure )? )
            {
            // InternalMASLParser.g:2013:2: ( () otherlv_1= Structure ( (lv_components_2_0= ruleStructureComponentDefinition ) )* otherlv_3= End (otherlv_4= Structure )? )
            // InternalMASLParser.g:2014:3: () otherlv_1= Structure ( (lv_components_2_0= ruleStructureComponentDefinition ) )* otherlv_3= End (otherlv_4= Structure )?
            {
            // InternalMASLParser.g:2014:3: ()
            // InternalMASLParser.g:2015:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getStructureTypeDefinitionAccess().getStructureTypeDefinitionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Structure,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStructureTypeDefinitionAccess().getStructureKeyword_1());
              		
            }
            // InternalMASLParser.g:2025:3: ( (lv_components_2_0= ruleStructureComponentDefinition ) )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==RULE_ID) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // InternalMASLParser.g:2026:4: (lv_components_2_0= ruleStructureComponentDefinition )
            	    {
            	    // InternalMASLParser.g:2026:4: (lv_components_2_0= ruleStructureComponentDefinition )
            	    // InternalMASLParser.g:2027:5: lv_components_2_0= ruleStructureComponentDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getStructureTypeDefinitionAccess().getComponentsStructureComponentDefinitionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_41);
            	    lv_components_2_0=ruleStructureComponentDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getStructureTypeDefinitionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"components",
            	      						lv_components_2_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.StructureComponentDefinition");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            otherlv_3=(Token)match(input,End,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getStructureTypeDefinitionAccess().getEndKeyword_3());
              		
            }
            // InternalMASLParser.g:2048:3: (otherlv_4= Structure )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==Structure) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalMASLParser.g:2049:4: otherlv_4= Structure
                    {
                    otherlv_4=(Token)match(input,Structure,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getStructureTypeDefinitionAccess().getStructureKeyword_4());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStructureTypeDefinition"


    // $ANTLR start "entryRuleStructureComponentDefinition"
    // InternalMASLParser.g:2058:1: entryRuleStructureComponentDefinition returns [EObject current=null] : iv_ruleStructureComponentDefinition= ruleStructureComponentDefinition EOF ;
    public final EObject entryRuleStructureComponentDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStructureComponentDefinition = null;


        try {
            // InternalMASLParser.g:2058:69: (iv_ruleStructureComponentDefinition= ruleStructureComponentDefinition EOF )
            // InternalMASLParser.g:2059:2: iv_ruleStructureComponentDefinition= ruleStructureComponentDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStructureComponentDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStructureComponentDefinition=ruleStructureComponentDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStructureComponentDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStructureComponentDefinition"


    // $ANTLR start "ruleStructureComponentDefinition"
    // InternalMASLParser.g:2065:1: ruleStructureComponentDefinition returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_type_2_0= ruleAbstractTypeReference ) ) (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )? otherlv_5= Semicolon this_PragmaList_6= rulePragmaList[$current] ) ;
    public final EObject ruleStructureComponentDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_type_2_0 = null;

        EObject lv_defaultValue_4_0 = null;

        EObject this_PragmaList_6 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2071:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_type_2_0= ruleAbstractTypeReference ) ) (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )? otherlv_5= Semicolon this_PragmaList_6= rulePragmaList[$current] ) )
            // InternalMASLParser.g:2072:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_type_2_0= ruleAbstractTypeReference ) ) (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )? otherlv_5= Semicolon this_PragmaList_6= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:2072:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_type_2_0= ruleAbstractTypeReference ) ) (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )? otherlv_5= Semicolon this_PragmaList_6= rulePragmaList[$current] )
            // InternalMASLParser.g:2073:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_type_2_0= ruleAbstractTypeReference ) ) (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )? otherlv_5= Semicolon this_PragmaList_6= rulePragmaList[$current]
            {
            // InternalMASLParser.g:2073:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:2074:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:2074:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:2075:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getStructureComponentDefinitionAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getStructureComponentDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStructureComponentDefinitionAccess().getColonKeyword_1());
              		
            }
            // InternalMASLParser.g:2095:3: ( (lv_type_2_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2096:4: (lv_type_2_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2096:4: (lv_type_2_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2097:5: lv_type_2_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getTypeAbstractTypeReferenceParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_type_2_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStructureComponentDefinitionRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:2114:3: (otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) ) )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ColonEqualsSign) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // InternalMASLParser.g:2115:4: otherlv_3= ColonEqualsSign ( (lv_defaultValue_4_0= ruleConstExpression ) )
                    {
                    otherlv_3=(Token)match(input,ColonEqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getStructureComponentDefinitionAccess().getColonEqualsSignKeyword_3_0());
                      			
                    }
                    // InternalMASLParser.g:2119:4: ( (lv_defaultValue_4_0= ruleConstExpression ) )
                    // InternalMASLParser.g:2120:5: (lv_defaultValue_4_0= ruleConstExpression )
                    {
                    // InternalMASLParser.g:2120:5: (lv_defaultValue_4_0= ruleConstExpression )
                    // InternalMASLParser.g:2121:6: lv_defaultValue_4_0= ruleConstExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getDefaultValueConstExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_defaultValue_4_0=ruleConstExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStructureComponentDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"defaultValue",
                      							lv_defaultValue_4_0,
                      							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getStructureComponentDefinitionAccess().getSemicolonKeyword_4());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getStructureComponentDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getPragmaListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_6=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_6;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStructureComponentDefinition"


    // $ANTLR start "entryRuleEnumerationTypeDefinition"
    // InternalMASLParser.g:2158:1: entryRuleEnumerationTypeDefinition returns [EObject current=null] : iv_ruleEnumerationTypeDefinition= ruleEnumerationTypeDefinition EOF ;
    public final EObject entryRuleEnumerationTypeDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEnumerationTypeDefinition = null;


        try {
            // InternalMASLParser.g:2158:66: (iv_ruleEnumerationTypeDefinition= ruleEnumerationTypeDefinition EOF )
            // InternalMASLParser.g:2159:2: iv_ruleEnumerationTypeDefinition= ruleEnumerationTypeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEnumerationTypeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEnumerationTypeDefinition=ruleEnumerationTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEnumerationTypeDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEnumerationTypeDefinition"


    // $ANTLR start "ruleEnumerationTypeDefinition"
    // InternalMASLParser.g:2165:1: ruleEnumerationTypeDefinition returns [EObject current=null] : ( () otherlv_1= Enum otherlv_2= LeftParenthesis ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )? otherlv_6= RightParenthesis ) ;
    public final EObject ruleEnumerationTypeDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_enumerators_3_0 = null;

        EObject lv_enumerators_5_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2171:2: ( ( () otherlv_1= Enum otherlv_2= LeftParenthesis ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )? otherlv_6= RightParenthesis ) )
            // InternalMASLParser.g:2172:2: ( () otherlv_1= Enum otherlv_2= LeftParenthesis ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )? otherlv_6= RightParenthesis )
            {
            // InternalMASLParser.g:2172:2: ( () otherlv_1= Enum otherlv_2= LeftParenthesis ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )? otherlv_6= RightParenthesis )
            // InternalMASLParser.g:2173:3: () otherlv_1= Enum otherlv_2= LeftParenthesis ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )? otherlv_6= RightParenthesis
            {
            // InternalMASLParser.g:2173:3: ()
            // InternalMASLParser.g:2174:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEnumerationTypeDefinitionAccess().getEnumerationTypeDefinitionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEnumerationTypeDefinitionAccess().getEnumKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getEnumerationTypeDefinitionAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalMASLParser.g:2188:3: ( ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )* )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_ID) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalMASLParser.g:2189:4: ( (lv_enumerators_3_0= ruleEnumerator ) ) (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )*
                    {
                    // InternalMASLParser.g:2189:4: ( (lv_enumerators_3_0= ruleEnumerator ) )
                    // InternalMASLParser.g:2190:5: (lv_enumerators_3_0= ruleEnumerator )
                    {
                    // InternalMASLParser.g:2190:5: (lv_enumerators_3_0= ruleEnumerator )
                    // InternalMASLParser.g:2191:6: lv_enumerators_3_0= ruleEnumerator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumeratorsEnumeratorParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_enumerators_3_0=ruleEnumerator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
                      						}
                      						add(
                      							current,
                      							"enumerators",
                      							lv_enumerators_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Enumerator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:2208:4: (otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) ) )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==Comma) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // InternalMASLParser.g:2209:5: otherlv_4= Comma ( (lv_enumerators_5_0= ruleEnumerator ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:2213:5: ( (lv_enumerators_5_0= ruleEnumerator ) )
                    	    // InternalMASLParser.g:2214:6: (lv_enumerators_5_0= ruleEnumerator )
                    	    {
                    	    // InternalMASLParser.g:2214:6: (lv_enumerators_5_0= ruleEnumerator )
                    	    // InternalMASLParser.g:2215:7: lv_enumerators_5_0= ruleEnumerator
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumeratorsEnumeratorParserRuleCall_3_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_enumerators_5_0=ruleEnumerator();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"enumerators",
                    	      								lv_enumerators_5_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.Enumerator");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getEnumerationTypeDefinitionAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEnumerationTypeDefinition"


    // $ANTLR start "entryRuleEnumerator"
    // InternalMASLParser.g:2242:1: entryRuleEnumerator returns [EObject current=null] : iv_ruleEnumerator= ruleEnumerator EOF ;
    public final EObject entryRuleEnumerator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEnumerator = null;


        try {
            // InternalMASLParser.g:2242:51: (iv_ruleEnumerator= ruleEnumerator EOF )
            // InternalMASLParser.g:2243:2: iv_ruleEnumerator= ruleEnumerator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEnumeratorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEnumerator=ruleEnumerator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEnumerator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEnumerator"


    // $ANTLR start "ruleEnumerator"
    // InternalMASLParser.g:2249:1: ruleEnumerator returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )? ) ;
    public final EObject ruleEnumerator() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2255:2: ( ( ( (lv_name_0_0= RULE_ID ) ) ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )? ) )
            // InternalMASLParser.g:2256:2: ( ( (lv_name_0_0= RULE_ID ) ) ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )? )
            {
            // InternalMASLParser.g:2256:2: ( ( (lv_name_0_0= RULE_ID ) ) ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )? )
            // InternalMASLParser.g:2257:3: ( (lv_name_0_0= RULE_ID ) ) ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )?
            {
            // InternalMASLParser.g:2257:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:2258:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:2258:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:2259:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getEnumeratorAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getEnumeratorRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            // InternalMASLParser.g:2275:3: ( (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) ) )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ColonEqualsSign||LA42_0==EqualsSign) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalMASLParser.g:2276:4: (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign ) ( (lv_expression_3_0= ruleConstExpression ) )
                    {
                    // InternalMASLParser.g:2276:4: (otherlv_1= EqualsSign | otherlv_2= ColonEqualsSign )
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==EqualsSign) ) {
                        alt41=1;
                    }
                    else if ( (LA41_0==ColonEqualsSign) ) {
                        alt41=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 0, input);

                        throw nvae;
                    }
                    switch (alt41) {
                        case 1 :
                            // InternalMASLParser.g:2277:5: otherlv_1= EqualsSign
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalMASLParser.g:2282:5: otherlv_2= ColonEqualsSign
                            {
                            otherlv_2=(Token)match(input,ColonEqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_2, grammarAccess.getEnumeratorAccess().getColonEqualsSignKeyword_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalMASLParser.g:2287:4: ( (lv_expression_3_0= ruleConstExpression ) )
                    // InternalMASLParser.g:2288:5: (lv_expression_3_0= ruleConstExpression )
                    {
                    // InternalMASLParser.g:2288:5: (lv_expression_3_0= ruleConstExpression )
                    // InternalMASLParser.g:2289:6: lv_expression_3_0= ruleConstExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getEnumeratorAccess().getExpressionConstExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleConstExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getEnumeratorRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEnumerator"


    // $ANTLR start "entryRuleUnconstrainedArrayDefinition"
    // InternalMASLParser.g:2311:1: entryRuleUnconstrainedArrayDefinition returns [EObject current=null] : iv_ruleUnconstrainedArrayDefinition= ruleUnconstrainedArrayDefinition EOF ;
    public final EObject entryRuleUnconstrainedArrayDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnconstrainedArrayDefinition = null;


        try {
            // InternalMASLParser.g:2311:69: (iv_ruleUnconstrainedArrayDefinition= ruleUnconstrainedArrayDefinition EOF )
            // InternalMASLParser.g:2312:2: iv_ruleUnconstrainedArrayDefinition= ruleUnconstrainedArrayDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnconstrainedArrayDefinition=ruleUnconstrainedArrayDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnconstrainedArrayDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnconstrainedArrayDefinition"


    // $ANTLR start "ruleUnconstrainedArrayDefinition"
    // InternalMASLParser.g:2318:1: ruleUnconstrainedArrayDefinition returns [EObject current=null] : (otherlv_0= Array otherlv_1= LeftParenthesis ( (lv_indexType_2_0= ruleNamedTypeReference ) ) otherlv_3= Range otherlv_4= LessThanSignGreaterThanSign otherlv_5= RightParenthesis otherlv_6= Of ( (lv_elementType_7_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleUnconstrainedArrayDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_indexType_2_0 = null;

        EObject lv_elementType_7_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2324:2: ( (otherlv_0= Array otherlv_1= LeftParenthesis ( (lv_indexType_2_0= ruleNamedTypeReference ) ) otherlv_3= Range otherlv_4= LessThanSignGreaterThanSign otherlv_5= RightParenthesis otherlv_6= Of ( (lv_elementType_7_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:2325:2: (otherlv_0= Array otherlv_1= LeftParenthesis ( (lv_indexType_2_0= ruleNamedTypeReference ) ) otherlv_3= Range otherlv_4= LessThanSignGreaterThanSign otherlv_5= RightParenthesis otherlv_6= Of ( (lv_elementType_7_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:2325:2: (otherlv_0= Array otherlv_1= LeftParenthesis ( (lv_indexType_2_0= ruleNamedTypeReference ) ) otherlv_3= Range otherlv_4= LessThanSignGreaterThanSign otherlv_5= RightParenthesis otherlv_6= Of ( (lv_elementType_7_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:2326:3: otherlv_0= Array otherlv_1= LeftParenthesis ( (lv_indexType_2_0= ruleNamedTypeReference ) ) otherlv_3= Range otherlv_4= LessThanSignGreaterThanSign otherlv_5= RightParenthesis otherlv_6= Of ( (lv_elementType_7_0= ruleAbstractTypeReference ) )
            {
            otherlv_0=(Token)match(input,Array,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnconstrainedArrayDefinitionAccess().getArrayKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUnconstrainedArrayDefinitionAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalMASLParser.g:2334:3: ( (lv_indexType_2_0= ruleNamedTypeReference ) )
            // InternalMASLParser.g:2335:4: (lv_indexType_2_0= ruleNamedTypeReference )
            {
            // InternalMASLParser.g:2335:4: (lv_indexType_2_0= ruleNamedTypeReference )
            // InternalMASLParser.g:2336:5: lv_indexType_2_0= ruleNamedTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionAccess().getIndexTypeNamedTypeReferenceParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_indexType_2_0=ruleNamedTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnconstrainedArrayDefinitionRule());
              					}
              					set(
              						current,
              						"indexType",
              						lv_indexType_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.NamedTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Range,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getUnconstrainedArrayDefinitionAccess().getRangeKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnconstrainedArrayDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getUnconstrainedArrayDefinitionAccess().getRightParenthesisKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUnconstrainedArrayDefinitionAccess().getOfKeyword_6());
              		
            }
            // InternalMASLParser.g:2369:3: ( (lv_elementType_7_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2370:4: (lv_elementType_7_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2370:4: (lv_elementType_7_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2371:5: lv_elementType_7_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionAccess().getElementTypeAbstractTypeReferenceParserRuleCall_7_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_7_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnconstrainedArrayDefinitionRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_7_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnconstrainedArrayDefinition"


    // $ANTLR start "entryRuleAbstractTypeReference"
    // InternalMASLParser.g:2392:1: entryRuleAbstractTypeReference returns [EObject current=null] : iv_ruleAbstractTypeReference= ruleAbstractTypeReference EOF ;
    public final EObject entryRuleAbstractTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTypeReference = null;


        try {
            // InternalMASLParser.g:2392:62: (iv_ruleAbstractTypeReference= ruleAbstractTypeReference EOF )
            // InternalMASLParser.g:2393:2: iv_ruleAbstractTypeReference= ruleAbstractTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTypeReference=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTypeReference"


    // $ANTLR start "ruleAbstractTypeReference"
    // InternalMASLParser.g:2399:1: ruleAbstractTypeReference returns [EObject current=null] : (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_2= ruleAbstractCollectionTypeReference ) ;
    public final EObject ruleAbstractTypeReference() throws RecognitionException {
        EObject current = null;

        EObject this_NamedTypeReference_0 = null;

        EObject this_InstanceTypeReference_1 = null;

        EObject this_AbstractCollectionTypeReference_2 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2405:2: ( (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_2= ruleAbstractCollectionTypeReference ) )
            // InternalMASLParser.g:2406:2: (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_2= ruleAbstractCollectionTypeReference )
            {
            // InternalMASLParser.g:2406:2: (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_2= ruleAbstractCollectionTypeReference )
            int alt43=3;
            switch ( input.LA(1) ) {
            case Anonymous:
                {
                switch ( input.LA(2) ) {
                case Dictionary:
                case Sequence:
                case Array:
                case Bag:
                case Set:
                    {
                    alt43=3;
                    }
                    break;
                case Instance:
                    {
                    alt43=2;
                    }
                    break;
                case RULE_ID:
                    {
                    alt43=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }

                }
                break;
            case RULE_ID:
                {
                alt43=1;
                }
                break;
            case Instance:
                {
                alt43=2;
                }
                break;
            case Dictionary:
            case Sequence:
            case Array:
            case Bag:
            case Set:
                {
                alt43=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // InternalMASLParser.g:2407:3: this_NamedTypeReference_0= ruleNamedTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getNamedTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NamedTypeReference_0=ruleNamedTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NamedTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:2416:3: this_InstanceTypeReference_1= ruleInstanceTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getInstanceTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_InstanceTypeReference_1=ruleInstanceTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_InstanceTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:2425:3: this_AbstractCollectionTypeReference_2= ruleAbstractCollectionTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getAbstractCollectionTypeReferenceParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AbstractCollectionTypeReference_2=ruleAbstractCollectionTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AbstractCollectionTypeReference_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTypeReference"


    // $ANTLR start "entryRuleAbstractTypeReferenceWithCA"
    // InternalMASLParser.g:2437:1: entryRuleAbstractTypeReferenceWithCA returns [EObject current=null] : iv_ruleAbstractTypeReferenceWithCA= ruleAbstractTypeReferenceWithCA EOF ;
    public final EObject entryRuleAbstractTypeReferenceWithCA() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractTypeReferenceWithCA = null;


        try {
            // InternalMASLParser.g:2437:68: (iv_ruleAbstractTypeReferenceWithCA= ruleAbstractTypeReferenceWithCA EOF )
            // InternalMASLParser.g:2438:2: iv_ruleAbstractTypeReferenceWithCA= ruleAbstractTypeReferenceWithCA EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCARule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractTypeReferenceWithCA=ruleAbstractTypeReferenceWithCA();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractTypeReferenceWithCA; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractTypeReferenceWithCA"


    // $ANTLR start "ruleAbstractTypeReferenceWithCA"
    // InternalMASLParser.g:2444:1: ruleAbstractTypeReferenceWithCA returns [EObject current=null] : (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_ConstrainedArrayTypeReference_1= ruleConstrainedArrayTypeReference ) ;
    public final EObject ruleAbstractTypeReferenceWithCA() throws RecognitionException {
        EObject current = null;

        EObject this_AbstractTypeReference_0 = null;

        EObject this_ConstrainedArrayTypeReference_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2450:2: ( (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_ConstrainedArrayTypeReference_1= ruleConstrainedArrayTypeReference ) )
            // InternalMASLParser.g:2451:2: (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_ConstrainedArrayTypeReference_1= ruleConstrainedArrayTypeReference )
            {
            // InternalMASLParser.g:2451:2: (this_AbstractTypeReference_0= ruleAbstractTypeReference | this_ConstrainedArrayTypeReference_1= ruleConstrainedArrayTypeReference )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==Dictionary||LA44_0==Anonymous||LA44_0==Instance||LA44_0==Sequence||LA44_0==Array||LA44_0==Bag||LA44_0==Set) ) {
                alt44=1;
            }
            else if ( (LA44_0==RULE_ID) ) {
                switch ( input.LA(2) ) {
                case ColonColon:
                    {
                    int LA44_3 = input.LA(3);

                    if ( (LA44_3==RULE_ID) ) {
                        int LA44_5 = input.LA(4);

                        if ( (LA44_5==EOF||LA44_5==ColonEqualsSign||LA44_5==Semicolon) ) {
                            alt44=1;
                        }
                        else if ( (LA44_5==LeftParenthesis) ) {
                            alt44=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 44, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case ColonEqualsSign:
                case Semicolon:
                    {
                    alt44=1;
                    }
                    break;
                case LeftParenthesis:
                    {
                    alt44=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 2, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // InternalMASLParser.g:2452:3: this_AbstractTypeReference_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCAAccess().getAbstractTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AbstractTypeReference_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AbstractTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:2461:3: this_ConstrainedArrayTypeReference_1= ruleConstrainedArrayTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCAAccess().getConstrainedArrayTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ConstrainedArrayTypeReference_1=ruleConstrainedArrayTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ConstrainedArrayTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractTypeReferenceWithCA"


    // $ANTLR start "entryRuleInstanceTypeReference"
    // InternalMASLParser.g:2473:1: entryRuleInstanceTypeReference returns [EObject current=null] : iv_ruleInstanceTypeReference= ruleInstanceTypeReference EOF ;
    public final EObject entryRuleInstanceTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInstanceTypeReference = null;


        try {
            // InternalMASLParser.g:2473:62: (iv_ruleInstanceTypeReference= ruleInstanceTypeReference EOF )
            // InternalMASLParser.g:2474:2: iv_ruleInstanceTypeReference= ruleInstanceTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInstanceTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInstanceTypeReference=ruleInstanceTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInstanceTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInstanceTypeReference"


    // $ANTLR start "ruleInstanceTypeReference"
    // InternalMASLParser.g:2480:1: ruleInstanceTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Instance otherlv_2= Of ( ( ruleScopedName ) ) ) ;
    public final EObject ruleInstanceTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;


        	enterRule();

        try {
            // InternalMASLParser.g:2486:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Instance otherlv_2= Of ( ( ruleScopedName ) ) ) )
            // InternalMASLParser.g:2487:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Instance otherlv_2= Of ( ( ruleScopedName ) ) )
            {
            // InternalMASLParser.g:2487:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Instance otherlv_2= Of ( ( ruleScopedName ) ) )
            // InternalMASLParser.g:2488:3: ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Instance otherlv_2= Of ( ( ruleScopedName ) )
            {
            // InternalMASLParser.g:2488:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Anonymous) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalMASLParser.g:2489:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2489:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2490:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getInstanceTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getInstanceTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Instance,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getInstanceTypeReferenceAccess().getInstanceKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Of,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getInstanceTypeReferenceAccess().getOfKeyword_2());
              		
            }
            // InternalMASLParser.g:2510:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:2511:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:2511:4: ( ruleScopedName )
            // InternalMASLParser.g:2512:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getInstanceTypeReferenceRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInstanceTypeReferenceAccess().getInstanceObjectDeclarationCrossReference_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInstanceTypeReference"


    // $ANTLR start "entryRuleNamedTypeReference"
    // InternalMASLParser.g:2530:1: entryRuleNamedTypeReference returns [EObject current=null] : iv_ruleNamedTypeReference= ruleNamedTypeReference EOF ;
    public final EObject entryRuleNamedTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNamedTypeReference = null;


        try {
            // InternalMASLParser.g:2530:59: (iv_ruleNamedTypeReference= ruleNamedTypeReference EOF )
            // InternalMASLParser.g:2531:2: iv_ruleNamedTypeReference= ruleNamedTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedTypeReference=ruleNamedTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNamedTypeReference"


    // $ANTLR start "ruleNamedTypeReference"
    // InternalMASLParser.g:2537:1: ruleNamedTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? ( ( ruleScopedName ) ) ) ;
    public final EObject ruleNamedTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:2543:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? ( ( ruleScopedName ) ) ) )
            // InternalMASLParser.g:2544:2: ( ( (lv_anonymous_0_0= Anonymous ) )? ( ( ruleScopedName ) ) )
            {
            // InternalMASLParser.g:2544:2: ( ( (lv_anonymous_0_0= Anonymous ) )? ( ( ruleScopedName ) ) )
            // InternalMASLParser.g:2545:3: ( (lv_anonymous_0_0= Anonymous ) )? ( ( ruleScopedName ) )
            {
            // InternalMASLParser.g:2545:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Anonymous) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalMASLParser.g:2546:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2546:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2547:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getNamedTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamedTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:2559:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:2560:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:2560:4: ( ruleScopedName )
            // InternalMASLParser.g:2561:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNamedTypeReferenceRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNamedTypeReferenceAccess().getTypeTypeDeclarationCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNamedTypeReference"


    // $ANTLR start "entryRuleConstrainedArrayTypeReference"
    // InternalMASLParser.g:2579:1: entryRuleConstrainedArrayTypeReference returns [EObject current=null] : iv_ruleConstrainedArrayTypeReference= ruleConstrainedArrayTypeReference EOF ;
    public final EObject entryRuleConstrainedArrayTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConstrainedArrayTypeReference = null;


        try {
            // InternalMASLParser.g:2579:70: (iv_ruleConstrainedArrayTypeReference= ruleConstrainedArrayTypeReference EOF )
            // InternalMASLParser.g:2580:2: iv_ruleConstrainedArrayTypeReference= ruleConstrainedArrayTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConstrainedArrayTypeReference=ruleConstrainedArrayTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConstrainedArrayTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConstrainedArrayTypeReference"


    // $ANTLR start "ruleConstrainedArrayTypeReference"
    // InternalMASLParser.g:2586:1: ruleConstrainedArrayTypeReference returns [EObject current=null] : ( ( ( ruleScopedName ) ) otherlv_1= LeftParenthesis ( (lv_constraint_2_0= ruleExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleConstrainedArrayTypeReference() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_constraint_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2592:2: ( ( ( ( ruleScopedName ) ) otherlv_1= LeftParenthesis ( (lv_constraint_2_0= ruleExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalMASLParser.g:2593:2: ( ( ( ruleScopedName ) ) otherlv_1= LeftParenthesis ( (lv_constraint_2_0= ruleExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalMASLParser.g:2593:2: ( ( ( ruleScopedName ) ) otherlv_1= LeftParenthesis ( (lv_constraint_2_0= ruleExpression ) ) otherlv_3= RightParenthesis )
            // InternalMASLParser.g:2594:3: ( ( ruleScopedName ) ) otherlv_1= LeftParenthesis ( (lv_constraint_2_0= ruleExpression ) ) otherlv_3= RightParenthesis
            {
            // InternalMASLParser.g:2594:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:2595:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:2595:4: ( ruleScopedName )
            // InternalMASLParser.g:2596:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getConstrainedArrayTypeReferenceRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceAccess().getUnconstrainedTypeDeclarationCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_8);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getConstrainedArrayTypeReferenceAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalMASLParser.g:2614:3: ( (lv_constraint_2_0= ruleExpression ) )
            // InternalMASLParser.g:2615:4: (lv_constraint_2_0= ruleExpression )
            {
            // InternalMASLParser.g:2615:4: (lv_constraint_2_0= ruleExpression )
            // InternalMASLParser.g:2616:5: lv_constraint_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceAccess().getConstraintExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_constraint_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConstrainedArrayTypeReferenceRule());
              					}
              					set(
              						current,
              						"constraint",
              						lv_constraint_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getConstrainedArrayTypeReferenceAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConstrainedArrayTypeReference"


    // $ANTLR start "entryRuleAbstractCollectionTypeReference"
    // InternalMASLParser.g:2641:1: entryRuleAbstractCollectionTypeReference returns [EObject current=null] : iv_ruleAbstractCollectionTypeReference= ruleAbstractCollectionTypeReference EOF ;
    public final EObject entryRuleAbstractCollectionTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractCollectionTypeReference = null;


        try {
            // InternalMASLParser.g:2641:72: (iv_ruleAbstractCollectionTypeReference= ruleAbstractCollectionTypeReference EOF )
            // InternalMASLParser.g:2642:2: iv_ruleAbstractCollectionTypeReference= ruleAbstractCollectionTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractCollectionTypeReference=ruleAbstractCollectionTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractCollectionTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractCollectionTypeReference"


    // $ANTLR start "ruleAbstractCollectionTypeReference"
    // InternalMASLParser.g:2648:1: ruleAbstractCollectionTypeReference returns [EObject current=null] : (this_SequenceTypeReference_0= ruleSequenceTypeReference | this_ArrayTypeReference_1= ruleArrayTypeReference | this_SetTypeReference_2= ruleSetTypeReference | this_BagTypeReference_3= ruleBagTypeReference | this_DictionaryTypeReference_4= ruleDictionaryTypeReference ) ;
    public final EObject ruleAbstractCollectionTypeReference() throws RecognitionException {
        EObject current = null;

        EObject this_SequenceTypeReference_0 = null;

        EObject this_ArrayTypeReference_1 = null;

        EObject this_SetTypeReference_2 = null;

        EObject this_BagTypeReference_3 = null;

        EObject this_DictionaryTypeReference_4 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2654:2: ( (this_SequenceTypeReference_0= ruleSequenceTypeReference | this_ArrayTypeReference_1= ruleArrayTypeReference | this_SetTypeReference_2= ruleSetTypeReference | this_BagTypeReference_3= ruleBagTypeReference | this_DictionaryTypeReference_4= ruleDictionaryTypeReference ) )
            // InternalMASLParser.g:2655:2: (this_SequenceTypeReference_0= ruleSequenceTypeReference | this_ArrayTypeReference_1= ruleArrayTypeReference | this_SetTypeReference_2= ruleSetTypeReference | this_BagTypeReference_3= ruleBagTypeReference | this_DictionaryTypeReference_4= ruleDictionaryTypeReference )
            {
            // InternalMASLParser.g:2655:2: (this_SequenceTypeReference_0= ruleSequenceTypeReference | this_ArrayTypeReference_1= ruleArrayTypeReference | this_SetTypeReference_2= ruleSetTypeReference | this_BagTypeReference_3= ruleBagTypeReference | this_DictionaryTypeReference_4= ruleDictionaryTypeReference )
            int alt47=5;
            switch ( input.LA(1) ) {
            case Anonymous:
                {
                switch ( input.LA(2) ) {
                case Bag:
                    {
                    alt47=4;
                    }
                    break;
                case Sequence:
                    {
                    alt47=1;
                    }
                    break;
                case Dictionary:
                    {
                    alt47=5;
                    }
                    break;
                case Set:
                    {
                    alt47=3;
                    }
                    break;
                case Array:
                    {
                    alt47=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;
                }

                }
                break;
            case Sequence:
                {
                alt47=1;
                }
                break;
            case Array:
                {
                alt47=2;
                }
                break;
            case Set:
                {
                alt47=3;
                }
                break;
            case Bag:
                {
                alt47=4;
                }
                break;
            case Dictionary:
                {
                alt47=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // InternalMASLParser.g:2656:3: this_SequenceTypeReference_0= ruleSequenceTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getSequenceTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SequenceTypeReference_0=ruleSequenceTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SequenceTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:2665:3: this_ArrayTypeReference_1= ruleArrayTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getArrayTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayTypeReference_1=ruleArrayTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:2674:3: this_SetTypeReference_2= ruleSetTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getSetTypeReferenceParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SetTypeReference_2=ruleSetTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SetTypeReference_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:2683:3: this_BagTypeReference_3= ruleBagTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getBagTypeReferenceParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BagTypeReference_3=ruleBagTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BagTypeReference_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalMASLParser.g:2692:3: this_DictionaryTypeReference_4= ruleDictionaryTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getDictionaryTypeReferenceParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DictionaryTypeReference_4=ruleDictionaryTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DictionaryTypeReference_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractCollectionTypeReference"


    // $ANTLR start "entryRuleSequenceTypeReference"
    // InternalMASLParser.g:2704:1: entryRuleSequenceTypeReference returns [EObject current=null] : iv_ruleSequenceTypeReference= ruleSequenceTypeReference EOF ;
    public final EObject entryRuleSequenceTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSequenceTypeReference = null;


        try {
            // InternalMASLParser.g:2704:62: (iv_ruleSequenceTypeReference= ruleSequenceTypeReference EOF )
            // InternalMASLParser.g:2705:2: iv_ruleSequenceTypeReference= ruleSequenceTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSequenceTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSequenceTypeReference=ruleSequenceTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSequenceTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSequenceTypeReference"


    // $ANTLR start "ruleSequenceTypeReference"
    // InternalMASLParser.g:2711:1: ruleSequenceTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Sequence (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )? otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleSequenceTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_expression_3_0 = null;

        EObject lv_elementType_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2717:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Sequence (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )? otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:2718:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Sequence (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )? otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:2718:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Sequence (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )? otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:2719:3: ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Sequence (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )? otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) )
            {
            // InternalMASLParser.g:2719:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==Anonymous) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalMASLParser.g:2720:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2720:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2721:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getSequenceTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSequenceTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Sequence,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSequenceTypeReferenceAccess().getSequenceKeyword_1());
              		
            }
            // InternalMASLParser.g:2737:3: (otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LeftParenthesis) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // InternalMASLParser.g:2738:4: otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getSequenceTypeReferenceAccess().getLeftParenthesisKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:2742:4: ( (lv_expression_3_0= ruleExpression ) )
                    // InternalMASLParser.g:2743:5: (lv_expression_3_0= ruleExpression )
                    {
                    // InternalMASLParser.g:2743:5: (lv_expression_3_0= ruleExpression )
                    // InternalMASLParser.g:2744:6: lv_expression_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSequenceTypeReferenceAccess().getExpressionExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_28);
                    lv_expression_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSequenceTypeReferenceRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getSequenceTypeReferenceAccess().getRightParenthesisKeyword_2_2());
                      			
                    }

                    }
                    break;

            }

            otherlv_5=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getSequenceTypeReferenceAccess().getOfKeyword_3());
              		
            }
            // InternalMASLParser.g:2770:3: ( (lv_elementType_6_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2771:4: (lv_elementType_6_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2771:4: (lv_elementType_6_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2772:5: lv_elementType_6_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSequenceTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_6_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSequenceTypeReferenceRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_6_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSequenceTypeReference"


    // $ANTLR start "entryRuleArrayTypeReference"
    // InternalMASLParser.g:2793:1: entryRuleArrayTypeReference returns [EObject current=null] : iv_ruleArrayTypeReference= ruleArrayTypeReference EOF ;
    public final EObject entryRuleArrayTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayTypeReference = null;


        try {
            // InternalMASLParser.g:2793:59: (iv_ruleArrayTypeReference= ruleArrayTypeReference EOF )
            // InternalMASLParser.g:2794:2: iv_ruleArrayTypeReference= ruleArrayTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeReference=ruleArrayTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayTypeReference"


    // $ANTLR start "ruleArrayTypeReference"
    // InternalMASLParser.g:2800:1: ruleArrayTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Array otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleArrayTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_expression_3_0 = null;

        EObject lv_elementType_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2806:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Array otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:2807:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Array otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:2807:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Array otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:2808:3: ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Array otherlv_2= LeftParenthesis ( (lv_expression_3_0= ruleExpression ) ) otherlv_4= RightParenthesis otherlv_5= Of ( (lv_elementType_6_0= ruleAbstractTypeReference ) )
            {
            // InternalMASLParser.g:2808:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==Anonymous) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalMASLParser.g:2809:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2809:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2810:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getArrayTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Array,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayTypeReferenceAccess().getArrayKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArrayTypeReferenceAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalMASLParser.g:2830:3: ( (lv_expression_3_0= ruleExpression ) )
            // InternalMASLParser.g:2831:4: (lv_expression_3_0= ruleExpression )
            {
            // InternalMASLParser.g:2831:4: (lv_expression_3_0= ruleExpression )
            // InternalMASLParser.g:2832:5: lv_expression_3_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayTypeReferenceAccess().getExpressionExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_expression_3_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayTypeReferenceRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getArrayTypeReferenceAccess().getRightParenthesisKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getArrayTypeReferenceAccess().getOfKeyword_5());
              		
            }
            // InternalMASLParser.g:2857:3: ( (lv_elementType_6_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2858:4: (lv_elementType_6_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2858:4: (lv_elementType_6_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2859:5: lv_elementType_6_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_6_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_6_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayTypeReferenceRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_6_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayTypeReference"


    // $ANTLR start "entryRuleSetTypeReference"
    // InternalMASLParser.g:2880:1: entryRuleSetTypeReference returns [EObject current=null] : iv_ruleSetTypeReference= ruleSetTypeReference EOF ;
    public final EObject entryRuleSetTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSetTypeReference = null;


        try {
            // InternalMASLParser.g:2880:57: (iv_ruleSetTypeReference= ruleSetTypeReference EOF )
            // InternalMASLParser.g:2881:2: iv_ruleSetTypeReference= ruleSetTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSetTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSetTypeReference=ruleSetTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSetTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSetTypeReference"


    // $ANTLR start "ruleSetTypeReference"
    // InternalMASLParser.g:2887:1: ruleSetTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Set otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleSetTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_elementType_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2893:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Set otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:2894:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Set otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:2894:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Set otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:2895:3: ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Set otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) )
            {
            // InternalMASLParser.g:2895:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==Anonymous) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // InternalMASLParser.g:2896:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2896:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2897:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getSetTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSetTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSetTypeReferenceAccess().getSetKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getSetTypeReferenceAccess().getOfKeyword_2());
              		
            }
            // InternalMASLParser.g:2917:3: ( (lv_elementType_3_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2918:4: (lv_elementType_3_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2918:4: (lv_elementType_3_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2919:5: lv_elementType_3_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSetTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_3_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSetTypeReferenceRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSetTypeReference"


    // $ANTLR start "entryRuleBagTypeReference"
    // InternalMASLParser.g:2940:1: entryRuleBagTypeReference returns [EObject current=null] : iv_ruleBagTypeReference= ruleBagTypeReference EOF ;
    public final EObject entryRuleBagTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBagTypeReference = null;


        try {
            // InternalMASLParser.g:2940:57: (iv_ruleBagTypeReference= ruleBagTypeReference EOF )
            // InternalMASLParser.g:2941:2: iv_ruleBagTypeReference= ruleBagTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBagTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBagTypeReference=ruleBagTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBagTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBagTypeReference"


    // $ANTLR start "ruleBagTypeReference"
    // InternalMASLParser.g:2947:1: ruleBagTypeReference returns [EObject current=null] : ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Bag otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) ) ;
    public final EObject ruleBagTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_elementType_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:2953:2: ( ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Bag otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) ) )
            // InternalMASLParser.g:2954:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Bag otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) )
            {
            // InternalMASLParser.g:2954:2: ( ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Bag otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) ) )
            // InternalMASLParser.g:2955:3: ( (lv_anonymous_0_0= Anonymous ) )? otherlv_1= Bag otherlv_2= Of ( (lv_elementType_3_0= ruleAbstractTypeReference ) )
            {
            // InternalMASLParser.g:2955:3: ( (lv_anonymous_0_0= Anonymous ) )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==Anonymous) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalMASLParser.g:2956:4: (lv_anonymous_0_0= Anonymous )
                    {
                    // InternalMASLParser.g:2956:4: (lv_anonymous_0_0= Anonymous )
                    // InternalMASLParser.g:2957:5: lv_anonymous_0_0= Anonymous
                    {
                    lv_anonymous_0_0=(Token)match(input,Anonymous,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_0_0, grammarAccess.getBagTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBagTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Bag,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBagTypeReferenceAccess().getBagKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBagTypeReferenceAccess().getOfKeyword_2());
              		
            }
            // InternalMASLParser.g:2977:3: ( (lv_elementType_3_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:2978:4: (lv_elementType_3_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:2978:4: (lv_elementType_3_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:2979:5: lv_elementType_3_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBagTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_elementType_3_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBagTypeReferenceRule());
              					}
              					set(
              						current,
              						"elementType",
              						lv_elementType_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBagTypeReference"


    // $ANTLR start "entryRuleDictionaryTypeReference"
    // InternalMASLParser.g:3000:1: entryRuleDictionaryTypeReference returns [EObject current=null] : iv_ruleDictionaryTypeReference= ruleDictionaryTypeReference EOF ;
    public final EObject entryRuleDictionaryTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDictionaryTypeReference = null;


        try {
            // InternalMASLParser.g:3000:64: (iv_ruleDictionaryTypeReference= ruleDictionaryTypeReference EOF )
            // InternalMASLParser.g:3001:2: iv_ruleDictionaryTypeReference= ruleDictionaryTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDictionaryTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDictionaryTypeReference=ruleDictionaryTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDictionaryTypeReference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDictionaryTypeReference"


    // $ANTLR start "ruleDictionaryTypeReference"
    // InternalMASLParser.g:3007:1: ruleDictionaryTypeReference returns [EObject current=null] : ( () ( (lv_anonymous_1_0= Anonymous ) )? otherlv_2= Dictionary ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )? ) ;
    public final EObject ruleDictionaryTypeReference() throws RecognitionException {
        EObject current = null;

        Token lv_anonymous_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_keyType_3_0 = null;

        EObject lv_elementType_5_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3013:2: ( ( () ( (lv_anonymous_1_0= Anonymous ) )? otherlv_2= Dictionary ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )? ) )
            // InternalMASLParser.g:3014:2: ( () ( (lv_anonymous_1_0= Anonymous ) )? otherlv_2= Dictionary ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )? )
            {
            // InternalMASLParser.g:3014:2: ( () ( (lv_anonymous_1_0= Anonymous ) )? otherlv_2= Dictionary ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )? )
            // InternalMASLParser.g:3015:3: () ( (lv_anonymous_1_0= Anonymous ) )? otherlv_2= Dictionary ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )?
            {
            // InternalMASLParser.g:3015:3: ()
            // InternalMASLParser.g:3016:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDictionaryTypeReferenceAccess().getDictionaryTypeReferenceAction_0(),
              					current);
              			
            }

            }

            // InternalMASLParser.g:3022:3: ( (lv_anonymous_1_0= Anonymous ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Anonymous) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalMASLParser.g:3023:4: (lv_anonymous_1_0= Anonymous )
                    {
                    // InternalMASLParser.g:3023:4: (lv_anonymous_1_0= Anonymous )
                    // InternalMASLParser.g:3024:5: lv_anonymous_1_0= Anonymous
                    {
                    lv_anonymous_1_0=(Token)match(input,Anonymous,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_anonymous_1_0, grammarAccess.getDictionaryTypeReferenceAccess().getAnonymousAnonymousKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDictionaryTypeReferenceRule());
                      					}
                      					setWithLastConsumed(current, "anonymous", true, "anonymous");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,Dictionary,FOLLOW_54); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDictionaryTypeReferenceAccess().getDictionaryKeyword_2());
              		
            }
            // InternalMASLParser.g:3040:3: ( ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Anonymous||LA55_0==Instance||LA55_0==Of) ) {
                alt55=1;
            }
            else if ( (LA55_0==RULE_ID) ) {
                int LA55_2 = input.LA(2);

                if ( (LA55_2==Of) ) {
                    alt55=1;
                }
                else if ( (LA55_2==ColonColon) ) {
                    int LA55_4 = input.LA(3);

                    if ( (LA55_4==RULE_ID) ) {
                        int LA55_5 = input.LA(4);

                        if ( (LA55_5==Of) ) {
                            alt55=1;
                        }
                    }
                }
            }
            switch (alt55) {
                case 1 :
                    // InternalMASLParser.g:3041:4: ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )? otherlv_4= Of ( (lv_elementType_5_0= ruleAbstractTypeReference ) )
                    {
                    // InternalMASLParser.g:3041:4: ( (lv_keyType_3_0= ruleAbstractDictKeyTypeRef ) )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==Anonymous||LA54_0==Instance||LA54_0==RULE_ID) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // InternalMASLParser.g:3042:5: (lv_keyType_3_0= ruleAbstractDictKeyTypeRef )
                            {
                            // InternalMASLParser.g:3042:5: (lv_keyType_3_0= ruleAbstractDictKeyTypeRef )
                            // InternalMASLParser.g:3043:6: lv_keyType_3_0= ruleAbstractDictKeyTypeRef
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getDictionaryTypeReferenceAccess().getKeyTypeAbstractDictKeyTypeRefParserRuleCall_3_0_0());
                              					
                            }
                            pushFollow(FOLLOW_34);
                            lv_keyType_3_0=ruleAbstractDictKeyTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getDictionaryTypeReferenceRule());
                              						}
                              						set(
                              							current,
                              							"keyType",
                              							lv_keyType_3_0,
                              							"org.xtuml.bp.xtext.masl.MASL.AbstractDictKeyTypeRef");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_4=(Token)match(input,Of,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getDictionaryTypeReferenceAccess().getOfKeyword_3_1());
                      			
                    }
                    // InternalMASLParser.g:3064:4: ( (lv_elementType_5_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:3065:5: (lv_elementType_5_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:3065:5: (lv_elementType_5_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:3066:6: lv_elementType_5_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getDictionaryTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_elementType_5_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getDictionaryTypeReferenceRule());
                      						}
                      						set(
                      							current,
                      							"elementType",
                      							lv_elementType_5_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDictionaryTypeReference"


    // $ANTLR start "entryRuleAbstractDictKeyTypeRef"
    // InternalMASLParser.g:3088:1: entryRuleAbstractDictKeyTypeRef returns [EObject current=null] : iv_ruleAbstractDictKeyTypeRef= ruleAbstractDictKeyTypeRef EOF ;
    public final EObject entryRuleAbstractDictKeyTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractDictKeyTypeRef = null;


        try {
            // InternalMASLParser.g:3088:63: (iv_ruleAbstractDictKeyTypeRef= ruleAbstractDictKeyTypeRef EOF )
            // InternalMASLParser.g:3089:2: iv_ruleAbstractDictKeyTypeRef= ruleAbstractDictKeyTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractDictKeyTypeRef=ruleAbstractDictKeyTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractDictKeyTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractDictKeyTypeRef"


    // $ANTLR start "ruleAbstractDictKeyTypeRef"
    // InternalMASLParser.g:3095:1: ruleAbstractDictKeyTypeRef returns [EObject current=null] : (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference ) ;
    public final EObject ruleAbstractDictKeyTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_NamedTypeReference_0 = null;

        EObject this_InstanceTypeReference_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3101:2: ( (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference ) )
            // InternalMASLParser.g:3102:2: (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference )
            {
            // InternalMASLParser.g:3102:2: (this_NamedTypeReference_0= ruleNamedTypeReference | this_InstanceTypeReference_1= ruleInstanceTypeReference )
            int alt56=2;
            switch ( input.LA(1) ) {
            case Anonymous:
                {
                int LA56_1 = input.LA(2);

                if ( (LA56_1==Instance) ) {
                    alt56=2;
                }
                else if ( (LA56_1==RULE_ID) ) {
                    alt56=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_ID:
                {
                alt56=1;
                }
                break;
            case Instance:
                {
                alt56=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // InternalMASLParser.g:3103:3: this_NamedTypeReference_0= ruleNamedTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefAccess().getNamedTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NamedTypeReference_0=ruleNamedTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NamedTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:3112:3: this_InstanceTypeReference_1= ruleInstanceTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefAccess().getInstanceTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_InstanceTypeReference_1=ruleInstanceTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_InstanceTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractDictKeyTypeRef"


    // $ANTLR start "entryRuleTerminatorDefinition"
    // InternalMASLParser.g:3124:1: entryRuleTerminatorDefinition returns [EObject current=null] : iv_ruleTerminatorDefinition= ruleTerminatorDefinition EOF ;
    public final EObject entryRuleTerminatorDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTerminatorDefinition = null;


        try {
            // InternalMASLParser.g:3124:61: (iv_ruleTerminatorDefinition= ruleTerminatorDefinition EOF )
            // InternalMASLParser.g:3125:2: iv_ruleTerminatorDefinition= ruleTerminatorDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTerminatorDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTerminatorDefinition=ruleTerminatorDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTerminatorDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTerminatorDefinition"


    // $ANTLR start "ruleTerminatorDefinition"
    // InternalMASLParser.g:3131:1: ruleTerminatorDefinition returns [EObject current=null] : (otherlv_0= Terminator ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )* otherlv_4= End (otherlv_5= Terminator )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) ;
    public final EObject ruleTerminatorDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_services_3_0 = null;

        EObject this_PragmaList_7 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3137:2: ( (otherlv_0= Terminator ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )* otherlv_4= End (otherlv_5= Terminator )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3138:2: (otherlv_0= Terminator ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )* otherlv_4= End (otherlv_5= Terminator )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3138:2: (otherlv_0= Terminator ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )* otherlv_4= End (otherlv_5= Terminator )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            // InternalMASLParser.g:3139:3: otherlv_0= Terminator ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )* otherlv_4= End (otherlv_5= Terminator )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Terminator,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTerminatorDefinitionAccess().getTerminatorKeyword_0());
              		
            }
            // InternalMASLParser.g:3143:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:3144:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:3144:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:3145:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getTerminatorDefinitionAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTerminatorDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Is,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTerminatorDefinitionAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:3165:3: ( (lv_services_3_0= ruleTerminatorServiceDeclaration ) )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==Function||LA57_0==Private||LA57_0==Service||LA57_0==Public) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // InternalMASLParser.g:3166:4: (lv_services_3_0= ruleTerminatorServiceDeclaration )
            	    {
            	    // InternalMASLParser.g:3166:4: (lv_services_3_0= ruleTerminatorServiceDeclaration )
            	    // InternalMASLParser.g:3167:5: lv_services_3_0= ruleTerminatorServiceDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getServicesTerminatorServiceDeclarationParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_55);
            	    lv_services_3_0=ruleTerminatorServiceDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTerminatorDefinitionRule());
            	      					}
            	      					add(
            	      						current,
            	      						"services",
            	      						lv_services_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.TerminatorServiceDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            otherlv_4=(Token)match(input,End,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTerminatorDefinitionAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:3188:3: (otherlv_5= Terminator )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==Terminator) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // InternalMASLParser.g:3189:4: otherlv_5= Terminator
                    {
                    otherlv_5=(Token)match(input,Terminator,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTerminatorDefinitionAccess().getTerminatorKeyword_5());
                      			
                    }

                    }
                    break;

            }

            otherlv_6=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTerminatorDefinitionAccess().getSemicolonKeyword_6());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTerminatorDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_7=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTerminatorDefinition"


    // $ANTLR start "entryRuleTerminatorServiceDeclaration"
    // InternalMASLParser.g:3213:1: entryRuleTerminatorServiceDeclaration returns [EObject current=null] : iv_ruleTerminatorServiceDeclaration= ruleTerminatorServiceDeclaration EOF ;
    public final EObject entryRuleTerminatorServiceDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTerminatorServiceDeclaration = null;


        try {
            // InternalMASLParser.g:3213:69: (iv_ruleTerminatorServiceDeclaration= ruleTerminatorServiceDeclaration EOF )
            // InternalMASLParser.g:3214:2: iv_ruleTerminatorServiceDeclaration= ruleTerminatorServiceDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTerminatorServiceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTerminatorServiceDeclaration=ruleTerminatorServiceDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTerminatorServiceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTerminatorServiceDeclaration"


    // $ANTLR start "ruleTerminatorServiceDeclaration"
    // InternalMASLParser.g:3220:1: ruleTerminatorServiceDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) ;
    public final EObject ruleTerminatorServiceDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_name_3_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_4 = null;

        EObject lv_returnType_6_0 = null;

        EObject this_PragmaList_8 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3226:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3227:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3227:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            // InternalMASLParser.g:3228:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current]
            {
            // InternalMASLParser.g:3228:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==Private||LA59_0==Public) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalMASLParser.g:3229:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:3229:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:3230:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3247:3: (otherlv_1= Service | otherlv_2= Function )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Service) ) {
                alt60=1;
            }
            else if ( (LA60_0==Function) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // InternalMASLParser.g:3248:4: otherlv_1= Service
                    {
                    otherlv_1=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTerminatorServiceDeclarationAccess().getServiceKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:3253:4: otherlv_2= Function
                    {
                    otherlv_2=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTerminatorServiceDeclarationAccess().getFunctionKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:3258:3: ( (lv_name_3_0= RULE_ID ) )
            // InternalMASLParser.g:3259:4: (lv_name_3_0= RULE_ID )
            {
            // InternalMASLParser.g:3259:4: (lv_name_3_0= RULE_ID )
            // InternalMASLParser.g:3260:5: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_3_0, grammarAccess.getTerminatorServiceDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_32);
            this_ParameterList_4=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_4;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:3287:3: (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==Return) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // InternalMASLParser.g:3288:4: otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_5=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTerminatorServiceDeclarationAccess().getReturnKeyword_4_0());
                      			
                    }
                    // InternalMASLParser.g:3292:4: ( (lv_returnType_6_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:3293:5: (lv_returnType_6_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:3293:5: (lv_returnType_6_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:3294:6: lv_returnType_6_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_returnType_6_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_6_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getTerminatorServiceDeclarationAccess().getSemicolonKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_8=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_8;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTerminatorServiceDeclaration"


    // $ANTLR start "entryRuleObjectDeclaration"
    // InternalMASLParser.g:3331:1: entryRuleObjectDeclaration returns [EObject current=null] : iv_ruleObjectDeclaration= ruleObjectDeclaration EOF ;
    public final EObject entryRuleObjectDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectDeclaration = null;


        try {
            // InternalMASLParser.g:3331:58: (iv_ruleObjectDeclaration= ruleObjectDeclaration EOF )
            // InternalMASLParser.g:3332:2: iv_ruleObjectDeclaration= ruleObjectDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectDeclaration=ruleObjectDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleObjectDeclaration"


    // $ANTLR start "ruleObjectDeclaration"
    // InternalMASLParser.g:3338:1: ruleObjectDeclaration returns [EObject current=null] : (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Semicolon this_PragmaList_3= rulePragmaList[$current] ) ;
    public final EObject ruleObjectDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        EObject this_PragmaList_3 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3344:2: ( (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Semicolon this_PragmaList_3= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3345:2: (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Semicolon this_PragmaList_3= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3345:2: (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Semicolon this_PragmaList_3= rulePragmaList[$current] )
            // InternalMASLParser.g:3346:3: otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Semicolon this_PragmaList_3= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Object,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getObjectDeclarationAccess().getObjectKeyword_0());
              		
            }
            // InternalMASLParser.g:3350:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:3351:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:3351:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:3352:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getObjectDeclarationAccess().getSemicolonKeyword_2());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getObjectDeclarationAccess().getPragmaListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_3=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleObjectDeclaration"


    // $ANTLR start "entryRuleObjectDefinition"
    // InternalMASLParser.g:3387:1: entryRuleObjectDefinition returns [EObject current=null] : iv_ruleObjectDefinition= ruleObjectDefinition EOF ;
    public final EObject entryRuleObjectDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectDefinition = null;


        try {
            // InternalMASLParser.g:3387:57: (iv_ruleObjectDefinition= ruleObjectDefinition EOF )
            // InternalMASLParser.g:3388:2: iv_ruleObjectDefinition= ruleObjectDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectDefinition=ruleObjectDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleObjectDefinition"


    // $ANTLR start "ruleObjectDefinition"
    // InternalMASLParser.g:3394:1: ruleObjectDefinition returns [EObject current=null] : (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )* otherlv_9= End (otherlv_10= Object )? otherlv_11= Semicolon this_PragmaList_12= rulePragmaList[$current] ) ;
    public final EObject ruleObjectDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        EObject lv_attributes_3_0 = null;

        EObject lv_identifiers_4_0 = null;

        EObject lv_services_5_0 = null;

        EObject lv_events_6_0 = null;

        EObject lv_states_7_0 = null;

        EObject lv_transitions_8_0 = null;

        EObject this_PragmaList_12 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3400:2: ( (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )* otherlv_9= End (otherlv_10= Object )? otherlv_11= Semicolon this_PragmaList_12= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3401:2: (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )* otherlv_9= End (otherlv_10= Object )? otherlv_11= Semicolon this_PragmaList_12= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3401:2: (otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )* otherlv_9= End (otherlv_10= Object )? otherlv_11= Semicolon this_PragmaList_12= rulePragmaList[$current] )
            // InternalMASLParser.g:3402:3: otherlv_0= Object ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Is ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )* otherlv_9= End (otherlv_10= Object )? otherlv_11= Semicolon this_PragmaList_12= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Object,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_0());
              		
            }
            // InternalMASLParser.g:3406:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalMASLParser.g:3407:4: (lv_name_1_0= RULE_ID )
            {
            // InternalMASLParser.g:3407:4: (lv_name_1_0= RULE_ID )
            // InternalMASLParser.g:3408:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getObjectDefinitionAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Is,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getObjectDefinitionAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:3428:3: ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )*
            loop62:
            do {
                int alt62=7;
                alt62 = dfa62.predict(input);
                switch (alt62) {
            	case 1 :
            	    // InternalMASLParser.g:3429:4: ( (lv_attributes_3_0= ruleAttributeDefinition ) )
            	    {
            	    // InternalMASLParser.g:3429:4: ( (lv_attributes_3_0= ruleAttributeDefinition ) )
            	    // InternalMASLParser.g:3430:5: (lv_attributes_3_0= ruleAttributeDefinition )
            	    {
            	    // InternalMASLParser.g:3430:5: (lv_attributes_3_0= ruleAttributeDefinition )
            	    // InternalMASLParser.g:3431:6: lv_attributes_3_0= ruleAttributeDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getAttributesAttributeDefinitionParserRuleCall_3_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_attributes_3_0=ruleAttributeDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"attributes",
            	      							lv_attributes_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.AttributeDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:3449:4: ( (lv_identifiers_4_0= ruleIdentifierDefinition ) )
            	    {
            	    // InternalMASLParser.g:3449:4: ( (lv_identifiers_4_0= ruleIdentifierDefinition ) )
            	    // InternalMASLParser.g:3450:5: (lv_identifiers_4_0= ruleIdentifierDefinition )
            	    {
            	    // InternalMASLParser.g:3450:5: (lv_identifiers_4_0= ruleIdentifierDefinition )
            	    // InternalMASLParser.g:3451:6: lv_identifiers_4_0= ruleIdentifierDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getIdentifiersIdentifierDefinitionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_identifiers_4_0=ruleIdentifierDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"identifiers",
            	      							lv_identifiers_4_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.IdentifierDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalMASLParser.g:3469:4: ( (lv_services_5_0= ruleObjectServiceDeclaration ) )
            	    {
            	    // InternalMASLParser.g:3469:4: ( (lv_services_5_0= ruleObjectServiceDeclaration ) )
            	    // InternalMASLParser.g:3470:5: (lv_services_5_0= ruleObjectServiceDeclaration )
            	    {
            	    // InternalMASLParser.g:3470:5: (lv_services_5_0= ruleObjectServiceDeclaration )
            	    // InternalMASLParser.g:3471:6: lv_services_5_0= ruleObjectServiceDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getServicesObjectServiceDeclarationParserRuleCall_3_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_services_5_0=ruleObjectServiceDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"services",
            	      							lv_services_5_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.ObjectServiceDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalMASLParser.g:3489:4: ( (lv_events_6_0= ruleEventDefinition ) )
            	    {
            	    // InternalMASLParser.g:3489:4: ( (lv_events_6_0= ruleEventDefinition ) )
            	    // InternalMASLParser.g:3490:5: (lv_events_6_0= ruleEventDefinition )
            	    {
            	    // InternalMASLParser.g:3490:5: (lv_events_6_0= ruleEventDefinition )
            	    // InternalMASLParser.g:3491:6: lv_events_6_0= ruleEventDefinition
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getEventsEventDefinitionParserRuleCall_3_3_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_events_6_0=ruleEventDefinition();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"events",
            	      							lv_events_6_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.EventDefinition");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalMASLParser.g:3509:4: ( (lv_states_7_0= ruleStateDeclaration ) )
            	    {
            	    // InternalMASLParser.g:3509:4: ( (lv_states_7_0= ruleStateDeclaration ) )
            	    // InternalMASLParser.g:3510:5: (lv_states_7_0= ruleStateDeclaration )
            	    {
            	    // InternalMASLParser.g:3510:5: (lv_states_7_0= ruleStateDeclaration )
            	    // InternalMASLParser.g:3511:6: lv_states_7_0= ruleStateDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getStatesStateDeclarationParserRuleCall_3_4_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_states_7_0=ruleStateDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"states",
            	      							lv_states_7_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.StateDeclaration");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalMASLParser.g:3529:4: ( (lv_transitions_8_0= ruleTransitionTable ) )
            	    {
            	    // InternalMASLParser.g:3529:4: ( (lv_transitions_8_0= ruleTransitionTable ) )
            	    // InternalMASLParser.g:3530:5: (lv_transitions_8_0= ruleTransitionTable )
            	    {
            	    // InternalMASLParser.g:3530:5: (lv_transitions_8_0= ruleTransitionTable )
            	    // InternalMASLParser.g:3531:6: lv_transitions_8_0= ruleTransitionTable
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getTransitionsTransitionTableParserRuleCall_3_5_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_58);
            	    lv_transitions_8_0=ruleTransitionTable();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
            	      						}
            	      						add(
            	      							current,
            	      							"transitions",
            	      							lv_transitions_8_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.TransitionTable");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            otherlv_9=(Token)match(input,End,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getObjectDefinitionAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:3553:3: (otherlv_10= Object )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Object) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalMASLParser.g:3554:4: otherlv_10= Object
                    {
                    otherlv_10=(Token)match(input,Object,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_5());
                      			
                    }

                    }
                    break;

            }

            otherlv_11=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getObjectDefinitionAccess().getSemicolonKeyword_6());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getObjectDefinitionAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_12=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_12;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleObjectDefinition"


    // $ANTLR start "entryRuleAttributeDefinition"
    // InternalMASLParser.g:3578:1: entryRuleAttributeDefinition returns [EObject current=null] : iv_ruleAttributeDefinition= ruleAttributeDefinition EOF ;
    public final EObject entryRuleAttributeDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAttributeDefinition = null;


        try {
            // InternalMASLParser.g:3578:60: (iv_ruleAttributeDefinition= ruleAttributeDefinition EOF )
            // InternalMASLParser.g:3579:2: iv_ruleAttributeDefinition= ruleAttributeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAttributeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAttributeDefinition=ruleAttributeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAttributeDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAttributeDefinition"


    // $ANTLR start "ruleAttributeDefinition"
    // InternalMASLParser.g:3585:1: ruleAttributeDefinition returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_preferred_2_0= Preferred ) )? ( (lv_unique_3_0= Unique ) )? (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )? ( (lv_type_10_0= ruleAbstractTypeReference ) ) (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )? otherlv_13= Semicolon this_PragmaList_14= rulePragmaList[$current] ) ;
    public final EObject ruleAttributeDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token lv_preferred_2_0=null;
        Token lv_unique_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_referentials_6_0 = null;

        EObject lv_referentials_8_0 = null;

        EObject lv_type_10_0 = null;

        EObject lv_defaultValue_12_0 = null;

        EObject this_PragmaList_14 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3591:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_preferred_2_0= Preferred ) )? ( (lv_unique_3_0= Unique ) )? (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )? ( (lv_type_10_0= ruleAbstractTypeReference ) ) (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )? otherlv_13= Semicolon this_PragmaList_14= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3592:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_preferred_2_0= Preferred ) )? ( (lv_unique_3_0= Unique ) )? (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )? ( (lv_type_10_0= ruleAbstractTypeReference ) ) (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )? otherlv_13= Semicolon this_PragmaList_14= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3592:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_preferred_2_0= Preferred ) )? ( (lv_unique_3_0= Unique ) )? (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )? ( (lv_type_10_0= ruleAbstractTypeReference ) ) (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )? otherlv_13= Semicolon this_PragmaList_14= rulePragmaList[$current] )
            // InternalMASLParser.g:3593:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_preferred_2_0= Preferred ) )? ( (lv_unique_3_0= Unique ) )? (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )? ( (lv_type_10_0= ruleAbstractTypeReference ) ) (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )? otherlv_13= Semicolon this_PragmaList_14= rulePragmaList[$current]
            {
            // InternalMASLParser.g:3593:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:3594:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:3594:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:3595:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getAttributeDefinitionAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAttributeDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getAttributeDefinitionAccess().getColonKeyword_1());
              		
            }
            // InternalMASLParser.g:3615:3: ( (lv_preferred_2_0= Preferred ) )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Preferred) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // InternalMASLParser.g:3616:4: (lv_preferred_2_0= Preferred )
                    {
                    // InternalMASLParser.g:3616:4: (lv_preferred_2_0= Preferred )
                    // InternalMASLParser.g:3617:5: lv_preferred_2_0= Preferred
                    {
                    lv_preferred_2_0=(Token)match(input,Preferred,FOLLOW_61); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_preferred_2_0, grammarAccess.getAttributeDefinitionAccess().getPreferredPreferredKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAttributeDefinitionRule());
                      					}
                      					setWithLastConsumed(current, "preferred", true, "preferred");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3629:3: ( (lv_unique_3_0= Unique ) )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Unique) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // InternalMASLParser.g:3630:4: (lv_unique_3_0= Unique )
                    {
                    // InternalMASLParser.g:3630:4: (lv_unique_3_0= Unique )
                    // InternalMASLParser.g:3631:5: lv_unique_3_0= Unique
                    {
                    lv_unique_3_0=(Token)match(input,Unique,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_unique_3_0, grammarAccess.getAttributeDefinitionAccess().getUniqueUniqueKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAttributeDefinitionRule());
                      					}
                      					setWithLastConsumed(current, "unique", true, "unique");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3643:3: (otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Referential) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalMASLParser.g:3644:4: otherlv_4= Referential otherlv_5= LeftParenthesis ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )? otherlv_9= RightParenthesis
                    {
                    otherlv_4=(Token)match(input,Referential,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getAttributeDefinitionAccess().getReferentialKeyword_4_0());
                      			
                    }
                    otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getAttributeDefinitionAccess().getLeftParenthesisKeyword_4_1());
                      			
                    }
                    // InternalMASLParser.g:3652:4: ( ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )* )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==RULE_ID) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // InternalMASLParser.g:3653:5: ( (lv_referentials_6_0= ruleAttributeReferential ) ) (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )*
                            {
                            // InternalMASLParser.g:3653:5: ( (lv_referentials_6_0= ruleAttributeReferential ) )
                            // InternalMASLParser.g:3654:6: (lv_referentials_6_0= ruleAttributeReferential )
                            {
                            // InternalMASLParser.g:3654:6: (lv_referentials_6_0= ruleAttributeReferential )
                            // InternalMASLParser.g:3655:7: lv_referentials_6_0= ruleAttributeReferential
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getReferentialsAttributeReferentialParserRuleCall_4_2_0_0());
                              						
                            }
                            pushFollow(FOLLOW_10);
                            lv_referentials_6_0=ruleAttributeReferential();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
                              							}
                              							add(
                              								current,
                              								"referentials",
                              								lv_referentials_6_0,
                              								"org.xtuml.bp.xtext.masl.MASL.AttributeReferential");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalMASLParser.g:3672:5: (otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) ) )*
                            loop66:
                            do {
                                int alt66=2;
                                int LA66_0 = input.LA(1);

                                if ( (LA66_0==Comma) ) {
                                    alt66=1;
                                }


                                switch (alt66) {
                            	case 1 :
                            	    // InternalMASLParser.g:3673:6: otherlv_7= Comma ( (lv_referentials_8_0= ruleAttributeReferential ) )
                            	    {
                            	    otherlv_7=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_7, grammarAccess.getAttributeDefinitionAccess().getCommaKeyword_4_2_1_0());
                            	      					
                            	    }
                            	    // InternalMASLParser.g:3677:6: ( (lv_referentials_8_0= ruleAttributeReferential ) )
                            	    // InternalMASLParser.g:3678:7: (lv_referentials_8_0= ruleAttributeReferential )
                            	    {
                            	    // InternalMASLParser.g:3678:7: (lv_referentials_8_0= ruleAttributeReferential )
                            	    // InternalMASLParser.g:3679:8: lv_referentials_8_0= ruleAttributeReferential
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getReferentialsAttributeReferentialParserRuleCall_4_2_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_referentials_8_0=ruleAttributeReferential();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"referentials",
                            	      									lv_referentials_8_0,
                            	      									"org.xtuml.bp.xtext.masl.MASL.AttributeReferential");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop66;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getAttributeDefinitionAccess().getRightParenthesisKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:3703:3: ( (lv_type_10_0= ruleAbstractTypeReference ) )
            // InternalMASLParser.g:3704:4: (lv_type_10_0= ruleAbstractTypeReference )
            {
            // InternalMASLParser.g:3704:4: (lv_type_10_0= ruleAbstractTypeReference )
            // InternalMASLParser.g:3705:5: lv_type_10_0= ruleAbstractTypeReference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getTypeAbstractTypeReferenceParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_type_10_0=ruleAbstractTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_10_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:3722:3: (otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) ) )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==ColonEqualsSign) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalMASLParser.g:3723:4: otherlv_11= ColonEqualsSign ( (lv_defaultValue_12_0= ruleConstExpression ) )
                    {
                    otherlv_11=(Token)match(input,ColonEqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getAttributeDefinitionAccess().getColonEqualsSignKeyword_6_0());
                      			
                    }
                    // InternalMASLParser.g:3727:4: ( (lv_defaultValue_12_0= ruleConstExpression ) )
                    // InternalMASLParser.g:3728:5: (lv_defaultValue_12_0= ruleConstExpression )
                    {
                    // InternalMASLParser.g:3728:5: (lv_defaultValue_12_0= ruleConstExpression )
                    // InternalMASLParser.g:3729:6: lv_defaultValue_12_0= ruleConstExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getDefaultValueConstExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_defaultValue_12_0=ruleConstExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"defaultValue",
                      							lv_defaultValue_12_0,
                      							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_13=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getAttributeDefinitionAccess().getSemicolonKeyword_7());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAttributeDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getPragmaListParserRuleCall_8());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_14=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_14;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAttributeDefinition"


    // $ANTLR start "entryRuleAttributeReferential"
    // InternalMASLParser.g:3766:1: entryRuleAttributeReferential returns [EObject current=null] : iv_ruleAttributeReferential= ruleAttributeReferential EOF ;
    public final EObject entryRuleAttributeReferential() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAttributeReferential = null;


        try {
            // InternalMASLParser.g:3766:61: (iv_ruleAttributeReferential= ruleAttributeReferential EOF )
            // InternalMASLParser.g:3767:2: iv_ruleAttributeReferential= ruleAttributeReferential EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAttributeReferentialRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAttributeReferential=ruleAttributeReferential();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAttributeReferential; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAttributeReferential"


    // $ANTLR start "ruleAttributeReferential"
    // InternalMASLParser.g:3773:1: ruleAttributeReferential returns [EObject current=null] : ( () ( ( ruleScopedName ) ) (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )? otherlv_6= FullStop ( (otherlv_7= RULE_ID ) ) ) ;
    public final EObject ruleAttributeReferential() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;


        	enterRule();

        try {
            // InternalMASLParser.g:3779:2: ( ( () ( ( ruleScopedName ) ) (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )? otherlv_6= FullStop ( (otherlv_7= RULE_ID ) ) ) )
            // InternalMASLParser.g:3780:2: ( () ( ( ruleScopedName ) ) (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )? otherlv_6= FullStop ( (otherlv_7= RULE_ID ) ) )
            {
            // InternalMASLParser.g:3780:2: ( () ( ( ruleScopedName ) ) (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )? otherlv_6= FullStop ( (otherlv_7= RULE_ID ) ) )
            // InternalMASLParser.g:3781:3: () ( ( ruleScopedName ) ) (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )? otherlv_6= FullStop ( (otherlv_7= RULE_ID ) )
            {
            // InternalMASLParser.g:3781:3: ()
            // InternalMASLParser.g:3782:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAttributeReferentialAccess().getAttributeReferentialAction_0(),
              					current);
              			
            }

            }

            // InternalMASLParser.g:3788:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:3789:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:3789:4: ( ruleScopedName )
            // InternalMASLParser.g:3790:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAttributeReferentialRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAttributeReferentialAccess().getRelationshipRelationshipDefinitionCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_64);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:3804:3: (otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )? )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==FullStop) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==RULE_ID) ) {
                    int LA71_2 = input.LA(3);

                    if ( (LA71_2==FullStop) ) {
                        alt71=1;
                    }
                }
            }
            switch (alt71) {
                case 1 :
                    // InternalMASLParser.g:3805:4: otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )?
                    {
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:3809:4: ( (otherlv_3= RULE_ID ) )
                    // InternalMASLParser.g:3810:5: (otherlv_3= RULE_ID )
                    {
                    // InternalMASLParser.g:3810:5: (otherlv_3= RULE_ID )
                    // InternalMASLParser.g:3811:6: otherlv_3= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAttributeReferentialRule());
                      						}
                      					
                    }
                    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getAttributeReferentialAccess().getObjectOrRoleObjectOrRoleCrossReference_2_1_0());
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:3822:4: (otherlv_4= FullStop ( (otherlv_5= RULE_ID ) ) )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==FullStop) ) {
                        int LA70_1 = input.LA(2);

                        if ( (LA70_1==RULE_ID) ) {
                            int LA70_2 = input.LA(3);

                            if ( (LA70_2==FullStop) ) {
                                alt70=1;
                            }
                        }
                    }
                    switch (alt70) {
                        case 1 :
                            // InternalMASLParser.g:3823:5: otherlv_4= FullStop ( (otherlv_5= RULE_ID ) )
                            {
                            otherlv_4=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_2_2_0());
                              				
                            }
                            // InternalMASLParser.g:3827:5: ( (otherlv_5= RULE_ID ) )
                            // InternalMASLParser.g:3828:6: (otherlv_5= RULE_ID )
                            {
                            // InternalMASLParser.g:3828:6: (otherlv_5= RULE_ID )
                            // InternalMASLParser.g:3829:7: otherlv_5= RULE_ID
                            {
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAttributeReferentialRule());
                              							}
                              						
                            }
                            otherlv_5=(Token)match(input,RULE_ID,FOLLOW_64); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_5, grammarAccess.getAttributeReferentialAccess().getObjectObjectDeclarationCrossReference_2_2_1_0());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_3());
              		
            }
            // InternalMASLParser.g:3846:3: ( (otherlv_7= RULE_ID ) )
            // InternalMASLParser.g:3847:4: (otherlv_7= RULE_ID )
            {
            // InternalMASLParser.g:3847:4: (otherlv_7= RULE_ID )
            // InternalMASLParser.g:3848:5: otherlv_7= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAttributeReferentialRule());
              					}
              				
            }
            otherlv_7=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getAttributeReferentialAccess().getAttributeAttributeDefinitionCrossReference_4_0());
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAttributeReferential"


    // $ANTLR start "entryRuleObjectServiceDeclaration"
    // InternalMASLParser.g:3863:1: entryRuleObjectServiceDeclaration returns [EObject current=null] : iv_ruleObjectServiceDeclaration= ruleObjectServiceDeclaration EOF ;
    public final EObject entryRuleObjectServiceDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectServiceDeclaration = null;


        try {
            // InternalMASLParser.g:3863:65: (iv_ruleObjectServiceDeclaration= ruleObjectServiceDeclaration EOF )
            // InternalMASLParser.g:3864:2: iv_ruleObjectServiceDeclaration= ruleObjectServiceDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectServiceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectServiceDeclaration=ruleObjectServiceDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectServiceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleObjectServiceDeclaration"


    // $ANTLR start "ruleObjectServiceDeclaration"
    // InternalMASLParser.g:3870:1: ruleObjectServiceDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )? otherlv_10= Semicolon this_PragmaList_11= rulePragmaList[$current] ) ;
    public final EObject ruleObjectServiceDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_instance_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token lv_name_6_0=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_7 = null;

        EObject lv_returnType_9_0 = null;

        EObject this_PragmaList_11 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:3876:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )? otherlv_10= Semicolon this_PragmaList_11= rulePragmaList[$current] ) )
            // InternalMASLParser.g:3877:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )? otherlv_10= Semicolon this_PragmaList_11= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:3877:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )? otherlv_10= Semicolon this_PragmaList_11= rulePragmaList[$current] )
            // InternalMASLParser.g:3878:3: ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )? otherlv_10= Semicolon this_PragmaList_11= rulePragmaList[$current]
            {
            // InternalMASLParser.g:3878:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Private||LA72_0==Public) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalMASLParser.g:3879:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:3879:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:3880:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_65);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getObjectServiceDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3897:3: ( (lv_instance_1_0= Instance ) )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Instance) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalMASLParser.g:3898:4: (lv_instance_1_0= Instance )
                    {
                    // InternalMASLParser.g:3898:4: (lv_instance_1_0= Instance )
                    // InternalMASLParser.g:3899:5: lv_instance_1_0= Instance
                    {
                    lv_instance_1_0=(Token)match(input,Instance,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_instance_1_0, grammarAccess.getObjectServiceDeclarationAccess().getInstanceInstanceKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "instance", true, "instance");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3911:3: (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Deferred) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // InternalMASLParser.g:3912:4: otherlv_2= Deferred ( (otherlv_3= RULE_ID ) )
                    {
                    otherlv_2=(Token)match(input,Deferred,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getObjectServiceDeclarationAccess().getDeferredKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:3916:4: ( (otherlv_3= RULE_ID ) )
                    // InternalMASLParser.g:3917:5: (otherlv_3= RULE_ID )
                    {
                    // InternalMASLParser.g:3917:5: (otherlv_3= RULE_ID )
                    // InternalMASLParser.g:3918:6: otherlv_3= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
                      						}
                      					
                    }
                    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getObjectServiceDeclarationAccess().getRelationshipRelationshipDefinitionCrossReference_2_1_0());
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalMASLParser.g:3930:3: (otherlv_4= Service | otherlv_5= Function )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==Service) ) {
                alt75=1;
            }
            else if ( (LA75_0==Function) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // InternalMASLParser.g:3931:4: otherlv_4= Service
                    {
                    otherlv_4=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getObjectServiceDeclarationAccess().getServiceKeyword_3_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:3936:4: otherlv_5= Function
                    {
                    otherlv_5=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getObjectServiceDeclarationAccess().getFunctionKeyword_3_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:3941:3: ( (lv_name_6_0= RULE_ID ) )
            // InternalMASLParser.g:3942:4: (lv_name_6_0= RULE_ID )
            {
            // InternalMASLParser.g:3942:4: (lv_name_6_0= RULE_ID )
            // InternalMASLParser.g:3943:5: lv_name_6_0= RULE_ID
            {
            lv_name_6_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_6_0, grammarAccess.getObjectServiceDeclarationAccess().getNameIDTerminalRuleCall_4_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_6_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getParameterListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_32);
            this_ParameterList_7=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_7;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:3970:3: (otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) ) )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Return) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalMASLParser.g:3971:4: otherlv_8= Return ( (lv_returnType_9_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_8=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getObjectServiceDeclarationAccess().getReturnKeyword_6_0());
                      			
                    }
                    // InternalMASLParser.g:3975:4: ( (lv_returnType_9_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:3976:5: (lv_returnType_9_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:3976:5: (lv_returnType_9_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:3977:6: lv_returnType_9_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_returnType_9_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectServiceDeclarationRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_9_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_10, grammarAccess.getObjectServiceDeclarationAccess().getSemicolonKeyword_7());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getPragmaListParserRuleCall_8());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_11=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_11;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleObjectServiceDeclaration"


    // $ANTLR start "entryRuleIdentifierDefinition"
    // InternalMASLParser.g:4014:1: entryRuleIdentifierDefinition returns [EObject current=null] : iv_ruleIdentifierDefinition= ruleIdentifierDefinition EOF ;
    public final EObject entryRuleIdentifierDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifierDefinition = null;


        try {
            // InternalMASLParser.g:4014:61: (iv_ruleIdentifierDefinition= ruleIdentifierDefinition EOF )
            // InternalMASLParser.g:4015:2: iv_ruleIdentifierDefinition= ruleIdentifierDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierDefinition=ruleIdentifierDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdentifierDefinition"


    // $ANTLR start "ruleIdentifierDefinition"
    // InternalMASLParser.g:4021:1: ruleIdentifierDefinition returns [EObject current=null] : (otherlv_0= Identifier otherlv_1= Is otherlv_2= LeftParenthesis ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) ;
    public final EObject ruleIdentifierDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject this_PragmaList_8 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4027:2: ( (otherlv_0= Identifier otherlv_1= Is otherlv_2= LeftParenthesis ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4028:2: (otherlv_0= Identifier otherlv_1= Is otherlv_2= LeftParenthesis ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4028:2: (otherlv_0= Identifier otherlv_1= Is otherlv_2= LeftParenthesis ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            // InternalMASLParser.g:4029:3: otherlv_0= Identifier otherlv_1= Is otherlv_2= LeftParenthesis ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Identifier,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIdentifierDefinitionAccess().getIdentifierKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Is,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIdentifierDefinitionAccess().getIsKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIdentifierDefinitionAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalMASLParser.g:4041:3: ( ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==RULE_ID) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalMASLParser.g:4042:4: ( (otherlv_3= RULE_ID ) ) (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )*
                    {
                    // InternalMASLParser.g:4042:4: ( (otherlv_3= RULE_ID ) )
                    // InternalMASLParser.g:4043:5: (otherlv_3= RULE_ID )
                    {
                    // InternalMASLParser.g:4043:5: (otherlv_3= RULE_ID )
                    // InternalMASLParser.g:4044:6: otherlv_3= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
                      						}
                      					
                    }
                    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getIdentifierDefinitionAccess().getAttributesAttributeDefinitionCrossReference_3_0_0());
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:4055:4: (otherlv_4= Comma ( (otherlv_5= RULE_ID ) ) )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==Comma) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // InternalMASLParser.g:4056:5: otherlv_4= Comma ( (otherlv_5= RULE_ID ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getIdentifierDefinitionAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:4060:5: ( (otherlv_5= RULE_ID ) )
                    	    // InternalMASLParser.g:4061:6: (otherlv_5= RULE_ID )
                    	    {
                    	    // InternalMASLParser.g:4061:6: (otherlv_5= RULE_ID )
                    	    // InternalMASLParser.g:4062:7: otherlv_5= RULE_ID
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
                    	      							}
                    	      						
                    	    }
                    	    otherlv_5=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							newLeafNode(otherlv_5, grammarAccess.getIdentifierDefinitionAccess().getAttributesAttributeDefinitionCrossReference_3_1_1_0());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIdentifierDefinitionAccess().getRightParenthesisKeyword_4());
              		
            }
            otherlv_7=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getIdentifierDefinitionAccess().getSemicolonKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getIdentifierDefinitionAccess().getPragmaListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_8=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_8;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdentifierDefinition"


    // $ANTLR start "entryRuleEventDefinition"
    // InternalMASLParser.g:4098:1: entryRuleEventDefinition returns [EObject current=null] : iv_ruleEventDefinition= ruleEventDefinition EOF ;
    public final EObject entryRuleEventDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEventDefinition = null;


        try {
            // InternalMASLParser.g:4098:56: (iv_ruleEventDefinition= ruleEventDefinition EOF )
            // InternalMASLParser.g:4099:2: iv_ruleEventDefinition= ruleEventDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEventDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEventDefinition=ruleEventDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEventDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEventDefinition"


    // $ANTLR start "ruleEventDefinition"
    // InternalMASLParser.g:4105:1: ruleEventDefinition returns [EObject current=null] : ( ( (lv_type_0_0= ruleEventType ) )? otherlv_1= Event ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) ;
    public final EObject ruleEventDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_name_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_type_0_0 = null;

        EObject this_ParameterList_3 = null;

        EObject this_PragmaList_5 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4111:2: ( ( ( (lv_type_0_0= ruleEventType ) )? otherlv_1= Event ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4112:2: ( ( (lv_type_0_0= ruleEventType ) )? otherlv_1= Event ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4112:2: ( ( (lv_type_0_0= ruleEventType ) )? otherlv_1= Event ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            // InternalMASLParser.g:4113:3: ( (lv_type_0_0= ruleEventType ) )? otherlv_1= Event ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current]
            {
            // InternalMASLParser.g:4113:3: ( (lv_type_0_0= ruleEventType ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=Assigner && LA79_0<=Creation)) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalMASLParser.g:4114:4: (lv_type_0_0= ruleEventType )
                    {
                    // InternalMASLParser.g:4114:4: (lv_type_0_0= ruleEventType )
                    // InternalMASLParser.g:4115:5: lv_type_0_0= ruleEventType
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getEventDefinitionAccess().getTypeEventTypeEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_67);
                    lv_type_0_0=ruleEventType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"type",
                      						lv_type_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.EventType");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Event,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEventDefinitionAccess().getEventKeyword_1());
              		
            }
            // InternalMASLParser.g:4136:3: ( (lv_name_2_0= RULE_ID ) )
            // InternalMASLParser.g:4137:4: (lv_name_2_0= RULE_ID )
            {
            // InternalMASLParser.g:4137:4: (lv_name_2_0= RULE_ID )
            // InternalMASLParser.g:4138:5: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getEventDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getEventDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getEventDefinitionAccess().getParameterListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_6);
            this_ParameterList_3=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_3;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_4=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getEventDefinitionAccess().getSemicolonKeyword_4());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getEventDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getEventDefinitionAccess().getPragmaListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_5=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_5;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEventDefinition"


    // $ANTLR start "entryRuleStateDeclaration"
    // InternalMASLParser.g:4184:1: entryRuleStateDeclaration returns [EObject current=null] : iv_ruleStateDeclaration= ruleStateDeclaration EOF ;
    public final EObject entryRuleStateDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStateDeclaration = null;


        try {
            // InternalMASLParser.g:4184:57: (iv_ruleStateDeclaration= ruleStateDeclaration EOF )
            // InternalMASLParser.g:4185:2: iv_ruleStateDeclaration= ruleStateDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStateDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStateDeclaration=ruleStateDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStateDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStateDeclaration"


    // $ANTLR start "ruleStateDeclaration"
    // InternalMASLParser.g:4191:1: ruleStateDeclaration returns [EObject current=null] : ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) ;
    public final EObject ruleStateDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_name_2_0=null;
        Token otherlv_4=null;
        AntlrDatatypeRuleToken lv_type_0_0 = null;

        EObject this_ParameterList_3 = null;

        EObject this_PragmaList_5 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4197:2: ( ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4198:2: ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4198:2: ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            // InternalMASLParser.g:4199:3: ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (lv_name_2_0= RULE_ID ) ) this_ParameterList_3= ruleParameterList[$current] otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current]
            {
            // InternalMASLParser.g:4199:3: ( (lv_type_0_0= ruleStateTypeSyntax ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=Assigner && LA80_0<=Creation)||LA80_0==Terminal) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalMASLParser.g:4200:4: (lv_type_0_0= ruleStateTypeSyntax )
                    {
                    // InternalMASLParser.g:4200:4: (lv_type_0_0= ruleStateTypeSyntax )
                    // InternalMASLParser.g:4201:5: lv_type_0_0= ruleStateTypeSyntax
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStateDeclarationAccess().getTypeStateTypeSyntaxParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_68);
                    lv_type_0_0=ruleStateTypeSyntax();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStateDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"type",
                      						lv_type_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.StateTypeSyntax");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,State,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStateDeclarationAccess().getStateKeyword_1());
              		
            }
            // InternalMASLParser.g:4222:3: ( (lv_name_2_0= RULE_ID ) )
            // InternalMASLParser.g:4223:4: (lv_name_2_0= RULE_ID )
            {
            // InternalMASLParser.g:4223:4: (lv_name_2_0= RULE_ID )
            // InternalMASLParser.g:4224:5: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getStateDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getStateDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getStateDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getStateDeclarationAccess().getParameterListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_6);
            this_ParameterList_3=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_3;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_4=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_4());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getStateDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getStateDeclarationAccess().getPragmaListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_5=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_5;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStateDeclaration"


    // $ANTLR start "entryRuleStateTypeSyntax"
    // InternalMASLParser.g:4270:1: entryRuleStateTypeSyntax returns [String current=null] : iv_ruleStateTypeSyntax= ruleStateTypeSyntax EOF ;
    public final String entryRuleStateTypeSyntax() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleStateTypeSyntax = null;


        try {
            // InternalMASLParser.g:4270:55: (iv_ruleStateTypeSyntax= ruleStateTypeSyntax EOF )
            // InternalMASLParser.g:4271:2: iv_ruleStateTypeSyntax= ruleStateTypeSyntax EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStateTypeSyntaxRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStateTypeSyntax=ruleStateTypeSyntax();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStateTypeSyntax.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStateTypeSyntax"


    // $ANTLR start "ruleStateTypeSyntax"
    // InternalMASLParser.g:4277:1: ruleStateTypeSyntax returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= Assigner (kw= Start )? ) | kw= Creation | kw= Terminal ) ;
    public final AntlrDatatypeRuleToken ruleStateTypeSyntax() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalMASLParser.g:4283:2: ( ( (kw= Assigner (kw= Start )? ) | kw= Creation | kw= Terminal ) )
            // InternalMASLParser.g:4284:2: ( (kw= Assigner (kw= Start )? ) | kw= Creation | kw= Terminal )
            {
            // InternalMASLParser.g:4284:2: ( (kw= Assigner (kw= Start )? ) | kw= Creation | kw= Terminal )
            int alt82=3;
            switch ( input.LA(1) ) {
            case Assigner:
                {
                alt82=1;
                }
                break;
            case Creation:
                {
                alt82=2;
                }
                break;
            case Terminal:
                {
                alt82=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // InternalMASLParser.g:4285:3: (kw= Assigner (kw= Start )? )
                    {
                    // InternalMASLParser.g:4285:3: (kw= Assigner (kw= Start )? )
                    // InternalMASLParser.g:4286:4: kw= Assigner (kw= Start )?
                    {
                    kw=(Token)match(input,Assigner,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getAssignerKeyword_0_0());
                      			
                    }
                    // InternalMASLParser.g:4291:4: (kw= Start )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==Start) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // InternalMASLParser.g:4292:5: kw= Start
                            {
                            kw=(Token)match(input,Start,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getStartKeyword_0_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:4300:3: kw= Creation
                    {
                    kw=(Token)match(input,Creation,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getCreationKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:4306:3: kw= Terminal
                    {
                    kw=(Token)match(input,Terminal,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getTerminalKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStateTypeSyntax"


    // $ANTLR start "entryRuleTransitionTable"
    // InternalMASLParser.g:4315:1: entryRuleTransitionTable returns [EObject current=null] : iv_ruleTransitionTable= ruleTransitionTable EOF ;
    public final EObject entryRuleTransitionTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTransitionTable = null;


        try {
            // InternalMASLParser.g:4315:56: (iv_ruleTransitionTable= ruleTransitionTable EOF )
            // InternalMASLParser.g:4316:2: iv_ruleTransitionTable= ruleTransitionTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTransitionTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTransitionTable=ruleTransitionTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTransitionTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTransitionTable"


    // $ANTLR start "ruleTransitionTable"
    // InternalMASLParser.g:4322:1: ruleTransitionTable returns [EObject current=null] : ( ( (lv_type_0_0= ruleTransTableType ) )? otherlv_1= Transition otherlv_2= Is ( (lv_rows_3_0= ruleTransitionRow ) )+ otherlv_4= End (otherlv_5= Transition )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) ;
    public final EObject ruleTransitionTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Enumerator lv_type_0_0 = null;

        EObject lv_rows_3_0 = null;

        EObject this_PragmaList_7 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4328:2: ( ( ( (lv_type_0_0= ruleTransTableType ) )? otherlv_1= Transition otherlv_2= Is ( (lv_rows_3_0= ruleTransitionRow ) )+ otherlv_4= End (otherlv_5= Transition )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4329:2: ( ( (lv_type_0_0= ruleTransTableType ) )? otherlv_1= Transition otherlv_2= Is ( (lv_rows_3_0= ruleTransitionRow ) )+ otherlv_4= End (otherlv_5= Transition )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4329:2: ( ( (lv_type_0_0= ruleTransTableType ) )? otherlv_1= Transition otherlv_2= Is ( (lv_rows_3_0= ruleTransitionRow ) )+ otherlv_4= End (otherlv_5= Transition )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            // InternalMASLParser.g:4330:3: ( (lv_type_0_0= ruleTransTableType ) )? otherlv_1= Transition otherlv_2= Is ( (lv_rows_3_0= ruleTransitionRow ) )+ otherlv_4= End (otherlv_5= Transition )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current]
            {
            // InternalMASLParser.g:4330:3: ( (lv_type_0_0= ruleTransTableType ) )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==Assigner) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalMASLParser.g:4331:4: (lv_type_0_0= ruleTransTableType )
                    {
                    // InternalMASLParser.g:4331:4: (lv_type_0_0= ruleTransTableType )
                    // InternalMASLParser.g:4332:5: lv_type_0_0= ruleTransTableType
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTransitionTableAccess().getTypeTransTableTypeEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_70);
                    lv_type_0_0=ruleTransTableType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTransitionTableRule());
                      					}
                      					set(
                      						current,
                      						"type",
                      						lv_type_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.TransTableType");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,Transition,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getTransitionTableAccess().getTransitionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Is,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTransitionTableAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:4357:3: ( (lv_rows_3_0= ruleTransitionRow ) )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( ((LA84_0>=Non_Existant && LA84_0<=Non_Existent)||(LA84_0>=Non_existant && LA84_0<=Non_existent)||LA84_0==RULE_ID) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // InternalMASLParser.g:4358:4: (lv_rows_3_0= ruleTransitionRow )
            	    {
            	    // InternalMASLParser.g:4358:4: (lv_rows_3_0= ruleTransitionRow )
            	    // InternalMASLParser.g:4359:5: lv_rows_3_0= ruleTransitionRow
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getTransitionTableAccess().getRowsTransitionRowParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_72);
            	    lv_rows_3_0=ruleTransitionRow();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getTransitionTableRule());
            	      					}
            	      					add(
            	      						current,
            	      						"rows",
            	      						lv_rows_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.TransitionRow");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);

            otherlv_4=(Token)match(input,End,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTransitionTableAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:4380:3: (otherlv_5= Transition )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==Transition) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalMASLParser.g:4381:4: otherlv_5= Transition
                    {
                    otherlv_5=(Token)match(input,Transition,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTransitionTableAccess().getTransitionKeyword_5());
                      			
                    }

                    }
                    break;

            }

            otherlv_6=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTransitionTableAccess().getSemicolonKeyword_6());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTransitionTableRule());
              			}
              			newCompositeNode(grammarAccess.getTransitionTableAccess().getPragmaListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_7=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTransitionTable"


    // $ANTLR start "entryRuleTransitionRow"
    // InternalMASLParser.g:4405:1: entryRuleTransitionRow returns [EObject current=null] : iv_ruleTransitionRow= ruleTransitionRow EOF ;
    public final EObject entryRuleTransitionRow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTransitionRow = null;


        try {
            // InternalMASLParser.g:4405:54: (iv_ruleTransitionRow= ruleTransitionRow EOF )
            // InternalMASLParser.g:4406:2: iv_ruleTransitionRow= ruleTransitionRow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTransitionRowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTransitionRow=ruleTransitionRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTransitionRow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTransitionRow"


    // $ANTLR start "ruleTransitionRow"
    // InternalMASLParser.g:4412:1: ruleTransitionRow returns [EObject current=null] : ( ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) ) otherlv_2= LeftParenthesis ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) ;
    public final EObject ruleTransitionRow() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_nonExistant_1_1=null;
        Token lv_nonExistant_1_2=null;
        Token lv_nonExistant_1_3=null;
        Token lv_nonExistant_1_4=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_options_3_0 = null;

        EObject lv_options_5_0 = null;

        EObject this_PragmaList_8 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4418:2: ( ( ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) ) otherlv_2= LeftParenthesis ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4419:2: ( ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) ) otherlv_2= LeftParenthesis ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4419:2: ( ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) ) otherlv_2= LeftParenthesis ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            // InternalMASLParser.g:4420:3: ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) ) otherlv_2= LeftParenthesis ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )? otherlv_6= RightParenthesis otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current]
            {
            // InternalMASLParser.g:4420:3: ( ( (otherlv_0= RULE_ID ) ) | ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) ) )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==RULE_ID) ) {
                alt87=1;
            }
            else if ( ((LA87_0>=Non_Existant && LA87_0<=Non_Existent)||(LA87_0>=Non_existant && LA87_0<=Non_existent)) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    // InternalMASLParser.g:4421:4: ( (otherlv_0= RULE_ID ) )
                    {
                    // InternalMASLParser.g:4421:4: ( (otherlv_0= RULE_ID ) )
                    // InternalMASLParser.g:4422:5: (otherlv_0= RULE_ID )
                    {
                    // InternalMASLParser.g:4422:5: (otherlv_0= RULE_ID )
                    // InternalMASLParser.g:4423:6: otherlv_0= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTransitionRowRule());
                      						}
                      					
                    }
                    otherlv_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_0, grammarAccess.getTransitionRowAccess().getStartStateDeclarationCrossReference_0_0_0());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:4435:4: ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) )
                    {
                    // InternalMASLParser.g:4435:4: ( ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) ) )
                    // InternalMASLParser.g:4436:5: ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) )
                    {
                    // InternalMASLParser.g:4436:5: ( (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant ) )
                    // InternalMASLParser.g:4437:6: (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant )
                    {
                    // InternalMASLParser.g:4437:6: (lv_nonExistant_1_1= Non_Existent | lv_nonExistant_1_2= Non_Existant | lv_nonExistant_1_3= Non_existent | lv_nonExistant_1_4= Non_existant )
                    int alt86=4;
                    switch ( input.LA(1) ) {
                    case Non_Existent:
                        {
                        alt86=1;
                        }
                        break;
                    case Non_Existant:
                        {
                        alt86=2;
                        }
                        break;
                    case Non_existent:
                        {
                        alt86=3;
                        }
                        break;
                    case Non_existant:
                        {
                        alt86=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 0, input);

                        throw nvae;
                    }

                    switch (alt86) {
                        case 1 :
                            // InternalMASLParser.g:4438:7: lv_nonExistant_1_1= Non_Existent
                            {
                            lv_nonExistant_1_1=(Token)match(input,Non_Existent,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_nonExistant_1_1, grammarAccess.getTransitionRowAccess().getNonExistantNon_ExistentKeyword_0_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionRowRule());
                              							}
                              							setWithLastConsumed(current, "nonExistant", true, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalMASLParser.g:4449:7: lv_nonExistant_1_2= Non_Existant
                            {
                            lv_nonExistant_1_2=(Token)match(input,Non_Existant,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_nonExistant_1_2, grammarAccess.getTransitionRowAccess().getNonExistantNon_ExistantKeyword_0_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionRowRule());
                              							}
                              							setWithLastConsumed(current, "nonExistant", true, null);
                              						
                            }

                            }
                            break;
                        case 3 :
                            // InternalMASLParser.g:4460:7: lv_nonExistant_1_3= Non_existent
                            {
                            lv_nonExistant_1_3=(Token)match(input,Non_existent,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_nonExistant_1_3, grammarAccess.getTransitionRowAccess().getNonExistantNon_existentKeyword_0_1_0_2());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionRowRule());
                              							}
                              							setWithLastConsumed(current, "nonExistant", true, null);
                              						
                            }

                            }
                            break;
                        case 4 :
                            // InternalMASLParser.g:4471:7: lv_nonExistant_1_4= Non_existant
                            {
                            lv_nonExistant_1_4=(Token)match(input,Non_existant,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_nonExistant_1_4, grammarAccess.getTransitionRowAccess().getNonExistantNon_existantKeyword_0_1_0_3());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionRowRule());
                              							}
                              							setWithLastConsumed(current, "nonExistant", true, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getTransitionRowAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalMASLParser.g:4489:3: ( ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )* )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==RULE_ID) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalMASLParser.g:4490:4: ( (lv_options_3_0= ruleTransitionOption ) ) (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )*
                    {
                    // InternalMASLParser.g:4490:4: ( (lv_options_3_0= ruleTransitionOption ) )
                    // InternalMASLParser.g:4491:5: (lv_options_3_0= ruleTransitionOption )
                    {
                    // InternalMASLParser.g:4491:5: (lv_options_3_0= ruleTransitionOption )
                    // InternalMASLParser.g:4492:6: lv_options_3_0= ruleTransitionOption
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTransitionRowAccess().getOptionsTransitionOptionParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_options_3_0=ruleTransitionOption();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTransitionRowRule());
                      						}
                      						add(
                      							current,
                      							"options",
                      							lv_options_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.TransitionOption");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:4509:4: (otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) ) )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==Comma) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // InternalMASLParser.g:4510:5: otherlv_4= Comma ( (lv_options_5_0= ruleTransitionOption ) )
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getTransitionRowAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:4514:5: ( (lv_options_5_0= ruleTransitionOption ) )
                    	    // InternalMASLParser.g:4515:6: (lv_options_5_0= ruleTransitionOption )
                    	    {
                    	    // InternalMASLParser.g:4515:6: (lv_options_5_0= ruleTransitionOption )
                    	    // InternalMASLParser.g:4516:7: lv_options_5_0= ruleTransitionOption
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTransitionRowAccess().getOptionsTransitionOptionParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_options_5_0=ruleTransitionOption();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTransitionRowRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"options",
                    	      								lv_options_5_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.TransitionOption");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTransitionRowAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_7=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getTransitionRowAccess().getSemicolonKeyword_4());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTransitionRowRule());
              			}
              			newCompositeNode(grammarAccess.getTransitionRowAccess().getPragmaListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_8=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_8;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTransitionRow"


    // $ANTLR start "entryRuleTransitionOption"
    // InternalMASLParser.g:4558:1: entryRuleTransitionOption returns [EObject current=null] : iv_ruleTransitionOption= ruleTransitionOption EOF ;
    public final EObject entryRuleTransitionOption() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTransitionOption = null;


        try {
            // InternalMASLParser.g:4558:57: (iv_ruleTransitionOption= ruleTransitionOption EOF )
            // InternalMASLParser.g:4559:2: iv_ruleTransitionOption= ruleTransitionOption EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTransitionOptionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTransitionOption=ruleTransitionOption();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTransitionOption; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTransitionOption"


    // $ANTLR start "ruleTransitionOption"
    // InternalMASLParser.g:4565:1: ruleTransitionOption returns [EObject current=null] : ( ( ( ruleScopedName ) ) otherlv_1= EqualsSignGreaterThanSign ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) ) ) ;
    public final EObject ruleTransitionOption() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_ignore_3_0=null;
        Token lv_cannotHappen_4_1=null;
        Token lv_cannotHappen_4_2=null;


        	enterRule();

        try {
            // InternalMASLParser.g:4571:2: ( ( ( ( ruleScopedName ) ) otherlv_1= EqualsSignGreaterThanSign ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) ) ) )
            // InternalMASLParser.g:4572:2: ( ( ( ruleScopedName ) ) otherlv_1= EqualsSignGreaterThanSign ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) ) )
            {
            // InternalMASLParser.g:4572:2: ( ( ( ruleScopedName ) ) otherlv_1= EqualsSignGreaterThanSign ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) ) )
            // InternalMASLParser.g:4573:3: ( ( ruleScopedName ) ) otherlv_1= EqualsSignGreaterThanSign ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) )
            {
            // InternalMASLParser.g:4573:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:4574:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:4574:4: ( ruleScopedName )
            // InternalMASLParser.g:4575:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTransitionOptionRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTransitionOptionAccess().getEventEventDefinitionCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_74);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getTransitionOptionAccess().getEqualsSignGreaterThanSignKeyword_1());
              		
            }
            // InternalMASLParser.g:4593:3: ( ( (otherlv_2= RULE_ID ) ) | ( (lv_ignore_3_0= Ignore ) ) | ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) ) )
            int alt91=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt91=1;
                }
                break;
            case Ignore:
                {
                alt91=2;
                }
                break;
            case Cannot_Happen:
            case Cannot_happen:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // InternalMASLParser.g:4594:4: ( (otherlv_2= RULE_ID ) )
                    {
                    // InternalMASLParser.g:4594:4: ( (otherlv_2= RULE_ID ) )
                    // InternalMASLParser.g:4595:5: (otherlv_2= RULE_ID )
                    {
                    // InternalMASLParser.g:4595:5: (otherlv_2= RULE_ID )
                    // InternalMASLParser.g:4596:6: otherlv_2= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTransitionOptionRule());
                      						}
                      					
                    }
                    otherlv_2=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getTransitionOptionAccess().getEndStateStateDeclarationCrossReference_2_0_0());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:4608:4: ( (lv_ignore_3_0= Ignore ) )
                    {
                    // InternalMASLParser.g:4608:4: ( (lv_ignore_3_0= Ignore ) )
                    // InternalMASLParser.g:4609:5: (lv_ignore_3_0= Ignore )
                    {
                    // InternalMASLParser.g:4609:5: (lv_ignore_3_0= Ignore )
                    // InternalMASLParser.g:4610:6: lv_ignore_3_0= Ignore
                    {
                    lv_ignore_3_0=(Token)match(input,Ignore,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_ignore_3_0, grammarAccess.getTransitionOptionAccess().getIgnoreIgnoreKeyword_2_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTransitionOptionRule());
                      						}
                      						setWithLastConsumed(current, "ignore", true, "Ignore");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:4623:4: ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) )
                    {
                    // InternalMASLParser.g:4623:4: ( ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) ) )
                    // InternalMASLParser.g:4624:5: ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) )
                    {
                    // InternalMASLParser.g:4624:5: ( (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen ) )
                    // InternalMASLParser.g:4625:6: (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen )
                    {
                    // InternalMASLParser.g:4625:6: (lv_cannotHappen_4_1= Cannot_Happen | lv_cannotHappen_4_2= Cannot_happen )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==Cannot_Happen) ) {
                        alt90=1;
                    }
                    else if ( (LA90_0==Cannot_happen) ) {
                        alt90=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // InternalMASLParser.g:4626:7: lv_cannotHappen_4_1= Cannot_Happen
                            {
                            lv_cannotHappen_4_1=(Token)match(input,Cannot_Happen,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_cannotHappen_4_1, grammarAccess.getTransitionOptionAccess().getCannotHappenCannot_HappenKeyword_2_2_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionOptionRule());
                              							}
                              							setWithLastConsumed(current, "cannotHappen", true, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalMASLParser.g:4637:7: lv_cannotHappen_4_2= Cannot_happen
                            {
                            lv_cannotHappen_4_2=(Token)match(input,Cannot_happen,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_cannotHappen_4_2, grammarAccess.getTransitionOptionAccess().getCannotHappenCannot_happenKeyword_2_2_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getTransitionOptionRule());
                              							}
                              							setWithLastConsumed(current, "cannotHappen", true, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTransitionOption"


    // $ANTLR start "entryRuleDomainServiceDeclaration"
    // InternalMASLParser.g:4655:1: entryRuleDomainServiceDeclaration returns [EObject current=null] : iv_ruleDomainServiceDeclaration= ruleDomainServiceDeclaration EOF ;
    public final EObject entryRuleDomainServiceDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDomainServiceDeclaration = null;


        try {
            // InternalMASLParser.g:4655:65: (iv_ruleDomainServiceDeclaration= ruleDomainServiceDeclaration EOF )
            // InternalMASLParser.g:4656:2: iv_ruleDomainServiceDeclaration= ruleDomainServiceDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDomainServiceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDomainServiceDeclaration=ruleDomainServiceDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDomainServiceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDomainServiceDeclaration"


    // $ANTLR start "ruleDomainServiceDeclaration"
    // InternalMASLParser.g:4662:1: ruleDomainServiceDeclaration returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) ;
    public final EObject ruleDomainServiceDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_name_3_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_4 = null;

        EObject lv_returnType_6_0 = null;

        EObject this_PragmaList_8 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4668:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4669:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4669:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current] )
            // InternalMASLParser.g:4670:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (lv_name_3_0= RULE_ID ) ) this_ParameterList_4= ruleParameterList[$current] (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )? otherlv_7= Semicolon this_PragmaList_8= rulePragmaList[$current]
            {
            // InternalMASLParser.g:4670:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==Private||LA92_0==Public) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalMASLParser.g:4671:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:4671:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:4672:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getDomainServiceDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:4689:3: (otherlv_1= Service | otherlv_2= Function )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==Service) ) {
                alt93=1;
            }
            else if ( (LA93_0==Function) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // InternalMASLParser.g:4690:4: otherlv_1= Service
                    {
                    otherlv_1=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getDomainServiceDeclarationAccess().getServiceKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:4695:4: otherlv_2= Function
                    {
                    otherlv_2=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getDomainServiceDeclarationAccess().getFunctionKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:4700:3: ( (lv_name_3_0= RULE_ID ) )
            // InternalMASLParser.g:4701:4: (lv_name_3_0= RULE_ID )
            {
            // InternalMASLParser.g:4701:4: (lv_name_3_0= RULE_ID )
            // InternalMASLParser.g:4702:5: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_3_0, grammarAccess.getDomainServiceDeclarationAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getParameterListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_32);
            this_ParameterList_4=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_4;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:4729:3: (otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) ) )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==Return) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalMASLParser.g:4730:4: otherlv_5= Return ( (lv_returnType_6_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_5=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getDomainServiceDeclarationAccess().getReturnKeyword_4_0());
                      			
                    }
                    // InternalMASLParser.g:4734:4: ( (lv_returnType_6_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:4735:5: (lv_returnType_6_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:4735:5: (lv_returnType_6_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:4736:6: lv_returnType_6_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_returnType_6_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getDomainServiceDeclarationRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_6_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getDomainServiceDeclarationAccess().getSemicolonKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getPragmaListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_8=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_8;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDomainServiceDeclaration"


    // $ANTLR start "entryRuleRelationshipDefinition"
    // InternalMASLParser.g:4773:1: entryRuleRelationshipDefinition returns [EObject current=null] : iv_ruleRelationshipDefinition= ruleRelationshipDefinition EOF ;
    public final EObject entryRuleRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipDefinition = null;


        try {
            // InternalMASLParser.g:4773:63: (iv_ruleRelationshipDefinition= ruleRelationshipDefinition EOF )
            // InternalMASLParser.g:4774:2: iv_ruleRelationshipDefinition= ruleRelationshipDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipDefinition=ruleRelationshipDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipDefinition"


    // $ANTLR start "ruleRelationshipDefinition"
    // InternalMASLParser.g:4780:1: ruleRelationshipDefinition returns [EObject current=null] : (otherlv_0= Relationship (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) ;
    public final EObject ruleRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_4=null;
        EObject this_RegularRelationshipDefinition_1 = null;

        EObject this_AssocRelationshipDefinition_2 = null;

        EObject this_SubtypeRelationshipDefinition_3 = null;

        EObject this_PragmaList_5 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4786:2: ( (otherlv_0= Relationship (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] ) )
            // InternalMASLParser.g:4787:2: (otherlv_0= Relationship (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:4787:2: (otherlv_0= Relationship (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current] )
            // InternalMASLParser.g:4788:3: otherlv_0= Relationship (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition ) otherlv_4= Semicolon this_PragmaList_5= rulePragmaList[$current]
            {
            otherlv_0=(Token)match(input,Relationship,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRelationshipDefinitionAccess().getRelationshipKeyword_0());
              		
            }
            // InternalMASLParser.g:4792:3: (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition )
            int alt95=3;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // InternalMASLParser.g:4793:4: this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getRegularRelationshipDefinitionParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_RegularRelationshipDefinition_1=ruleRegularRelationshipDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_RegularRelationshipDefinition_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:4802:4: this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getAssocRelationshipDefinitionParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_AssocRelationshipDefinition_2=ruleAssocRelationshipDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AssocRelationshipDefinition_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:4811:4: this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getSubtypeRelationshipDefinitionParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_SubtypeRelationshipDefinition_3=ruleSubtypeRelationshipDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SubtypeRelationshipDefinition_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_4=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getRelationshipDefinitionAccess().getSemicolonKeyword_2());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getRelationshipDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getPragmaListParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_5=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_5;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipDefinition"


    // $ANTLR start "entryRuleRegularRelationshipDefinition"
    // InternalMASLParser.g:4839:1: entryRuleRegularRelationshipDefinition returns [EObject current=null] : iv_ruleRegularRelationshipDefinition= ruleRegularRelationshipDefinition EOF ;
    public final EObject entryRuleRegularRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularRelationshipDefinition = null;


        try {
            // InternalMASLParser.g:4839:70: (iv_ruleRegularRelationshipDefinition= ruleRegularRelationshipDefinition EOF )
            // InternalMASLParser.g:4840:2: iv_ruleRegularRelationshipDefinition= ruleRegularRelationshipDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularRelationshipDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularRelationshipDefinition=ruleRegularRelationshipDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularRelationshipDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRegularRelationshipDefinition"


    // $ANTLR start "ruleRegularRelationshipDefinition"
    // InternalMASLParser.g:4846:1: ruleRegularRelationshipDefinition returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) ) ;
    public final EObject ruleRegularRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_forwards_2_0 = null;

        EObject lv_backwards_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4852:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) ) )
            // InternalMASLParser.g:4853:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) )
            {
            // InternalMASLParser.g:4853:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) )
            // InternalMASLParser.g:4854:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) )
            {
            // InternalMASLParser.g:4854:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:4855:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:4855:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:4856:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getRegularRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRegularRelationshipDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Is,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getRegularRelationshipDefinitionAccess().getIsKeyword_1());
              		
            }
            // InternalMASLParser.g:4876:3: ( (lv_forwards_2_0= ruleRelationshipEnd ) )
            // InternalMASLParser.g:4877:4: (lv_forwards_2_0= ruleRelationshipEnd )
            {
            // InternalMASLParser.g:4877:4: (lv_forwards_2_0= ruleRelationshipEnd )
            // InternalMASLParser.g:4878:5: lv_forwards_2_0= ruleRelationshipEnd
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRegularRelationshipDefinitionAccess().getForwardsRelationshipEndParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_76);
            lv_forwards_2_0=ruleRelationshipEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRegularRelationshipDefinitionRule());
              					}
              					set(
              						current,
              						"forwards",
              						lv_forwards_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getRegularRelationshipDefinitionAccess().getCommaKeyword_3());
              		
            }
            // InternalMASLParser.g:4899:3: ( (lv_backwards_4_0= ruleRelationshipEnd ) )
            // InternalMASLParser.g:4900:4: (lv_backwards_4_0= ruleRelationshipEnd )
            {
            // InternalMASLParser.g:4900:4: (lv_backwards_4_0= ruleRelationshipEnd )
            // InternalMASLParser.g:4901:5: lv_backwards_4_0= ruleRelationshipEnd
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRegularRelationshipDefinitionAccess().getBackwardsRelationshipEndParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_backwards_4_0=ruleRelationshipEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRegularRelationshipDefinitionRule());
              					}
              					set(
              						current,
              						"backwards",
              						lv_backwards_4_0,
              						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRegularRelationshipDefinition"


    // $ANTLR start "entryRuleAssocRelationshipDefinition"
    // InternalMASLParser.g:4922:1: entryRuleAssocRelationshipDefinition returns [EObject current=null] : iv_ruleAssocRelationshipDefinition= ruleAssocRelationshipDefinition EOF ;
    public final EObject entryRuleAssocRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssocRelationshipDefinition = null;


        try {
            // InternalMASLParser.g:4922:68: (iv_ruleAssocRelationshipDefinition= ruleAssocRelationshipDefinition EOF )
            // InternalMASLParser.g:4923:2: iv_ruleAssocRelationshipDefinition= ruleAssocRelationshipDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssocRelationshipDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssocRelationshipDefinition=ruleAssocRelationshipDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssocRelationshipDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAssocRelationshipDefinition"


    // $ANTLR start "ruleAssocRelationshipDefinition"
    // InternalMASLParser.g:4929:1: ruleAssocRelationshipDefinition returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) otherlv_5= Using ( (lv_one_6_0= One ) )? ( (otherlv_7= RULE_ID ) ) ) ;
    public final EObject ruleAssocRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_one_6_0=null;
        Token otherlv_7=null;
        EObject lv_forwards_2_0 = null;

        EObject lv_backwards_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:4935:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) otherlv_5= Using ( (lv_one_6_0= One ) )? ( (otherlv_7= RULE_ID ) ) ) )
            // InternalMASLParser.g:4936:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) otherlv_5= Using ( (lv_one_6_0= One ) )? ( (otherlv_7= RULE_ID ) ) )
            {
            // InternalMASLParser.g:4936:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) otherlv_5= Using ( (lv_one_6_0= One ) )? ( (otherlv_7= RULE_ID ) ) )
            // InternalMASLParser.g:4937:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (lv_forwards_2_0= ruleRelationshipEnd ) ) otherlv_3= Comma ( (lv_backwards_4_0= ruleRelationshipEnd ) ) otherlv_5= Using ( (lv_one_6_0= One ) )? ( (otherlv_7= RULE_ID ) )
            {
            // InternalMASLParser.g:4937:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:4938:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:4938:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:4939:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getAssocRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Is,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getAssocRelationshipDefinitionAccess().getIsKeyword_1());
              		
            }
            // InternalMASLParser.g:4959:3: ( (lv_forwards_2_0= ruleRelationshipEnd ) )
            // InternalMASLParser.g:4960:4: (lv_forwards_2_0= ruleRelationshipEnd )
            {
            // InternalMASLParser.g:4960:4: (lv_forwards_2_0= ruleRelationshipEnd )
            // InternalMASLParser.g:4961:5: lv_forwards_2_0= ruleRelationshipEnd
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAssocRelationshipDefinitionAccess().getForwardsRelationshipEndParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_76);
            lv_forwards_2_0=ruleRelationshipEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAssocRelationshipDefinitionRule());
              					}
              					set(
              						current,
              						"forwards",
              						lv_forwards_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getAssocRelationshipDefinitionAccess().getCommaKeyword_3());
              		
            }
            // InternalMASLParser.g:4982:3: ( (lv_backwards_4_0= ruleRelationshipEnd ) )
            // InternalMASLParser.g:4983:4: (lv_backwards_4_0= ruleRelationshipEnd )
            {
            // InternalMASLParser.g:4983:4: (lv_backwards_4_0= ruleRelationshipEnd )
            // InternalMASLParser.g:4984:5: lv_backwards_4_0= ruleRelationshipEnd
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAssocRelationshipDefinitionAccess().getBackwardsRelationshipEndParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_77);
            lv_backwards_4_0=ruleRelationshipEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAssocRelationshipDefinitionRule());
              					}
              					set(
              						current,
              						"backwards",
              						lv_backwards_4_0,
              						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,Using,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getAssocRelationshipDefinitionAccess().getUsingKeyword_5());
              		
            }
            // InternalMASLParser.g:5005:3: ( (lv_one_6_0= One ) )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==One) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // InternalMASLParser.g:5006:4: (lv_one_6_0= One )
                    {
                    // InternalMASLParser.g:5006:4: (lv_one_6_0= One )
                    // InternalMASLParser.g:5007:5: lv_one_6_0= One
                    {
                    lv_one_6_0=(Token)match(input,One,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_one_6_0, grammarAccess.getAssocRelationshipDefinitionAccess().getOneOneKeyword_6_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
                      					}
                      					setWithLastConsumed(current, "one", true, "one");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5019:3: ( (otherlv_7= RULE_ID ) )
            // InternalMASLParser.g:5020:4: (otherlv_7= RULE_ID )
            {
            // InternalMASLParser.g:5020:4: (otherlv_7= RULE_ID )
            // InternalMASLParser.g:5021:5: otherlv_7= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
              					}
              				
            }
            otherlv_7=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getAssocRelationshipDefinitionAccess().getObjectObjectDeclarationCrossReference_7_0());
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAssocRelationshipDefinition"


    // $ANTLR start "entryRuleRelationshipEnd"
    // InternalMASLParser.g:5036:1: entryRuleRelationshipEnd returns [EObject current=null] : iv_ruleRelationshipEnd= ruleRelationshipEnd EOF ;
    public final EObject entryRuleRelationshipEnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipEnd = null;


        try {
            // InternalMASLParser.g:5036:56: (iv_ruleRelationshipEnd= ruleRelationshipEnd EOF )
            // InternalMASLParser.g:5037:2: iv_ruleRelationshipEnd= ruleRelationshipEnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipEnd=ruleRelationshipEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipEnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipEnd"


    // $ANTLR start "ruleRelationshipEnd"
    // InternalMASLParser.g:5043:1: ruleRelationshipEnd returns [EObject current=null] : ( ( (otherlv_0= RULE_ID ) ) ( (lv_conditionality_1_0= ruleConditionality ) ) ( (lv_name_2_0= RULE_ID ) ) ( (lv_multiplicity_3_0= ruleMultiplicity ) ) ( (otherlv_4= RULE_ID ) ) ) ;
    public final EObject ruleRelationshipEnd() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_conditionality_1_0 = null;

        Enumerator lv_multiplicity_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:5049:2: ( ( ( (otherlv_0= RULE_ID ) ) ( (lv_conditionality_1_0= ruleConditionality ) ) ( (lv_name_2_0= RULE_ID ) ) ( (lv_multiplicity_3_0= ruleMultiplicity ) ) ( (otherlv_4= RULE_ID ) ) ) )
            // InternalMASLParser.g:5050:2: ( ( (otherlv_0= RULE_ID ) ) ( (lv_conditionality_1_0= ruleConditionality ) ) ( (lv_name_2_0= RULE_ID ) ) ( (lv_multiplicity_3_0= ruleMultiplicity ) ) ( (otherlv_4= RULE_ID ) ) )
            {
            // InternalMASLParser.g:5050:2: ( ( (otherlv_0= RULE_ID ) ) ( (lv_conditionality_1_0= ruleConditionality ) ) ( (lv_name_2_0= RULE_ID ) ) ( (lv_multiplicity_3_0= ruleMultiplicity ) ) ( (otherlv_4= RULE_ID ) ) )
            // InternalMASLParser.g:5051:3: ( (otherlv_0= RULE_ID ) ) ( (lv_conditionality_1_0= ruleConditionality ) ) ( (lv_name_2_0= RULE_ID ) ) ( (lv_multiplicity_3_0= ruleMultiplicity ) ) ( (otherlv_4= RULE_ID ) )
            {
            // InternalMASLParser.g:5051:3: ( (otherlv_0= RULE_ID ) )
            // InternalMASLParser.g:5052:4: (otherlv_0= RULE_ID )
            {
            // InternalMASLParser.g:5052:4: (otherlv_0= RULE_ID )
            // InternalMASLParser.g:5053:5: otherlv_0= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRelationshipEndRule());
              					}
              				
            }
            otherlv_0=(Token)match(input,RULE_ID,FOLLOW_79); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_0, grammarAccess.getRelationshipEndAccess().getFromObjectDeclarationCrossReference_0_0());
              				
            }

            }


            }

            // InternalMASLParser.g:5064:3: ( (lv_conditionality_1_0= ruleConditionality ) )
            // InternalMASLParser.g:5065:4: (lv_conditionality_1_0= ruleConditionality )
            {
            // InternalMASLParser.g:5065:4: (lv_conditionality_1_0= ruleConditionality )
            // InternalMASLParser.g:5066:5: lv_conditionality_1_0= ruleConditionality
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipEndAccess().getConditionalityConditionalityEnumRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_conditionality_1_0=ruleConditionality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipEndRule());
              					}
              					set(
              						current,
              						"conditionality",
              						lv_conditionality_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Conditionality");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5083:3: ( (lv_name_2_0= RULE_ID ) )
            // InternalMASLParser.g:5084:4: (lv_name_2_0= RULE_ID )
            {
            // InternalMASLParser.g:5084:4: (lv_name_2_0= RULE_ID )
            // InternalMASLParser.g:5085:5: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_2_0, grammarAccess.getRelationshipEndAccess().getNameIDTerminalRuleCall_2_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRelationshipEndRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            // InternalMASLParser.g:5101:3: ( (lv_multiplicity_3_0= ruleMultiplicity ) )
            // InternalMASLParser.g:5102:4: (lv_multiplicity_3_0= ruleMultiplicity )
            {
            // InternalMASLParser.g:5102:4: (lv_multiplicity_3_0= ruleMultiplicity )
            // InternalMASLParser.g:5103:5: lv_multiplicity_3_0= ruleMultiplicity
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipEndAccess().getMultiplicityMultiplicityEnumRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_multiplicity_3_0=ruleMultiplicity();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRelationshipEndRule());
              					}
              					set(
              						current,
              						"multiplicity",
              						lv_multiplicity_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.Multiplicity");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5120:3: ( (otherlv_4= RULE_ID ) )
            // InternalMASLParser.g:5121:4: (otherlv_4= RULE_ID )
            {
            // InternalMASLParser.g:5121:4: (otherlv_4= RULE_ID )
            // InternalMASLParser.g:5122:5: otherlv_4= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRelationshipEndRule());
              					}
              				
            }
            otherlv_4=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getRelationshipEndAccess().getToObjectDeclarationCrossReference_4_0());
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipEnd"


    // $ANTLR start "entryRuleSubtypeRelationshipDefinition"
    // InternalMASLParser.g:5137:1: entryRuleSubtypeRelationshipDefinition returns [EObject current=null] : iv_ruleSubtypeRelationshipDefinition= ruleSubtypeRelationshipDefinition EOF ;
    public final EObject entryRuleSubtypeRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubtypeRelationshipDefinition = null;


        try {
            // InternalMASLParser.g:5137:70: (iv_ruleSubtypeRelationshipDefinition= ruleSubtypeRelationshipDefinition EOF )
            // InternalMASLParser.g:5138:2: iv_ruleSubtypeRelationshipDefinition= ruleSubtypeRelationshipDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSubtypeRelationshipDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSubtypeRelationshipDefinition=ruleSubtypeRelationshipDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSubtypeRelationshipDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSubtypeRelationshipDefinition"


    // $ANTLR start "ruleSubtypeRelationshipDefinition"
    // InternalMASLParser.g:5144:1: ruleSubtypeRelationshipDefinition returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (otherlv_2= RULE_ID ) ) otherlv_3= Is_a otherlv_4= LeftParenthesis ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )? otherlv_8= RightParenthesis ) ;
    public final EObject ruleSubtypeRelationshipDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;


        	enterRule();

        try {
            // InternalMASLParser.g:5150:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (otherlv_2= RULE_ID ) ) otherlv_3= Is_a otherlv_4= LeftParenthesis ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )? otherlv_8= RightParenthesis ) )
            // InternalMASLParser.g:5151:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (otherlv_2= RULE_ID ) ) otherlv_3= Is_a otherlv_4= LeftParenthesis ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )? otherlv_8= RightParenthesis )
            {
            // InternalMASLParser.g:5151:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (otherlv_2= RULE_ID ) ) otherlv_3= Is_a otherlv_4= LeftParenthesis ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )? otherlv_8= RightParenthesis )
            // InternalMASLParser.g:5152:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Is ( (otherlv_2= RULE_ID ) ) otherlv_3= Is_a otherlv_4= LeftParenthesis ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )? otherlv_8= RightParenthesis
            {
            // InternalMASLParser.g:5152:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:5153:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:5153:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:5154:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getSubtypeRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Is,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSubtypeRelationshipDefinitionAccess().getIsKeyword_1());
              		
            }
            // InternalMASLParser.g:5174:3: ( (otherlv_2= RULE_ID ) )
            // InternalMASLParser.g:5175:4: (otherlv_2= RULE_ID )
            {
            // InternalMASLParser.g:5175:4: (otherlv_2= RULE_ID )
            // InternalMASLParser.g:5176:5: otherlv_2= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
              					}
              				
            }
            otherlv_2=(Token)match(input,RULE_ID,FOLLOW_81); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSupertypeObjectDeclarationCrossReference_2_0());
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Is_a,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSubtypeRelationshipDefinitionAccess().getIs_aKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSubtypeRelationshipDefinitionAccess().getLeftParenthesisKeyword_4());
              		
            }
            // InternalMASLParser.g:5195:3: ( ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )* )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==RULE_ID) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // InternalMASLParser.g:5196:4: ( (otherlv_5= RULE_ID ) ) (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )*
                    {
                    // InternalMASLParser.g:5196:4: ( (otherlv_5= RULE_ID ) )
                    // InternalMASLParser.g:5197:5: (otherlv_5= RULE_ID )
                    {
                    // InternalMASLParser.g:5197:5: (otherlv_5= RULE_ID )
                    // InternalMASLParser.g:5198:6: otherlv_5= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
                      						}
                      					
                    }
                    otherlv_5=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSubtypesObjectDeclarationCrossReference_5_0_0());
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:5209:4: (otherlv_6= Comma ( (otherlv_7= RULE_ID ) ) )*
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==Comma) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // InternalMASLParser.g:5210:5: otherlv_6= Comma ( (otherlv_7= RULE_ID ) )
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_6, grammarAccess.getSubtypeRelationshipDefinitionAccess().getCommaKeyword_5_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:5214:5: ( (otherlv_7= RULE_ID ) )
                    	    // InternalMASLParser.g:5215:6: (otherlv_7= RULE_ID )
                    	    {
                    	    // InternalMASLParser.g:5215:6: (otherlv_7= RULE_ID )
                    	    // InternalMASLParser.g:5216:7: otherlv_7= RULE_ID
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
                    	      							}
                    	      						
                    	    }
                    	    otherlv_7=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							newLeafNode(otherlv_7, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSubtypesObjectDeclarationCrossReference_5_1_1_0());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop97;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getSubtypeRelationshipDefinitionAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSubtypeRelationshipDefinition"


    // $ANTLR start "entryRuleRelationshipNavigation"
    // InternalMASLParser.g:5237:1: entryRuleRelationshipNavigation returns [EObject current=null] : iv_ruleRelationshipNavigation= ruleRelationshipNavigation EOF ;
    public final EObject entryRuleRelationshipNavigation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationshipNavigation = null;


        try {
            // InternalMASLParser.g:5237:63: (iv_ruleRelationshipNavigation= ruleRelationshipNavigation EOF )
            // InternalMASLParser.g:5238:2: iv_ruleRelationshipNavigation= ruleRelationshipNavigation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationshipNavigationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationshipNavigation=ruleRelationshipNavigation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationshipNavigation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationshipNavigation"


    // $ANTLR start "ruleRelationshipNavigation"
    // InternalMASLParser.g:5244:1: ruleRelationshipNavigation returns [EObject current=null] : ( ( ( ruleScopedName ) ) (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )? ) ;
    public final EObject ruleRelationshipNavigation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;


        	enterRule();

        try {
            // InternalMASLParser.g:5250:2: ( ( ( ( ruleScopedName ) ) (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )? ) )
            // InternalMASLParser.g:5251:2: ( ( ( ruleScopedName ) ) (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )? )
            {
            // InternalMASLParser.g:5251:2: ( ( ( ruleScopedName ) ) (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )? )
            // InternalMASLParser.g:5252:3: ( ( ruleScopedName ) ) (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )?
            {
            // InternalMASLParser.g:5252:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:5253:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:5253:4: ( ruleScopedName )
            // InternalMASLParser.g:5254:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRelationshipNavigationRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRelationshipNavigationAccess().getRelationshipRelationshipDefinitionCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_82);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5268:3: (otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )? )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==FullStop) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // InternalMASLParser.g:5269:4: otherlv_1= FullStop ( (otherlv_2= RULE_ID ) ) (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )?
                    {
                    otherlv_1=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getRelationshipNavigationAccess().getFullStopKeyword_1_0());
                      			
                    }
                    // InternalMASLParser.g:5273:4: ( (otherlv_2= RULE_ID ) )
                    // InternalMASLParser.g:5274:5: (otherlv_2= RULE_ID )
                    {
                    // InternalMASLParser.g:5274:5: (otherlv_2= RULE_ID )
                    // InternalMASLParser.g:5275:6: otherlv_2= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getRelationshipNavigationRule());
                      						}
                      					
                    }
                    otherlv_2=(Token)match(input,RULE_ID,FOLLOW_82); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getRelationshipNavigationAccess().getObjectOrRoleObjectOrRoleCrossReference_1_1_0());
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:5286:4: (otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==FullStop) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // InternalMASLParser.g:5287:5: otherlv_3= FullStop ( (otherlv_4= RULE_ID ) )
                            {
                            otherlv_3=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getRelationshipNavigationAccess().getFullStopKeyword_1_2_0());
                              				
                            }
                            // InternalMASLParser.g:5291:5: ( (otherlv_4= RULE_ID ) )
                            // InternalMASLParser.g:5292:6: (otherlv_4= RULE_ID )
                            {
                            // InternalMASLParser.g:5292:6: (otherlv_4= RULE_ID )
                            // InternalMASLParser.g:5293:7: otherlv_4= RULE_ID
                            {
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getRelationshipNavigationRule());
                              							}
                              						
                            }
                            otherlv_4=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_4, grammarAccess.getRelationshipNavigationAccess().getObjectObjectDeclarationCrossReference_1_2_1_0());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationshipNavigation"


    // $ANTLR start "entryRuleDomainServiceDefinition"
    // InternalMASLParser.g:5310:1: entryRuleDomainServiceDefinition returns [EObject current=null] : iv_ruleDomainServiceDefinition= ruleDomainServiceDefinition EOF ;
    public final EObject entryRuleDomainServiceDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDomainServiceDefinition = null;


        try {
            // InternalMASLParser.g:5310:64: (iv_ruleDomainServiceDefinition= ruleDomainServiceDefinition EOF )
            // InternalMASLParser.g:5311:2: iv_ruleDomainServiceDefinition= ruleDomainServiceDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDomainServiceDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDomainServiceDefinition=ruleDomainServiceDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDomainServiceDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDomainServiceDefinition"


    // $ANTLR start "ruleDomainServiceDefinition"
    // InternalMASLParser.g:5317:1: ruleDomainServiceDefinition returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (lv_name_5_0= RULE_ID ) ) this_ParameterList_6= ruleParameterList[$current] (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )? otherlv_9= Is ( (lv_body_10_0= ruleCodeBlock ) ) (otherlv_11= Service | otherlv_12= Function )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] ) ;
    public final EObject ruleDomainServiceDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token lv_name_5_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_6 = null;

        EObject lv_returnType_8_0 = null;

        EObject lv_body_10_0 = null;

        EObject this_PragmaList_14 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:5323:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (lv_name_5_0= RULE_ID ) ) this_ParameterList_6= ruleParameterList[$current] (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )? otherlv_9= Is ( (lv_body_10_0= ruleCodeBlock ) ) (otherlv_11= Service | otherlv_12= Function )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] ) )
            // InternalMASLParser.g:5324:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (lv_name_5_0= RULE_ID ) ) this_ParameterList_6= ruleParameterList[$current] (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )? otherlv_9= Is ( (lv_body_10_0= ruleCodeBlock ) ) (otherlv_11= Service | otherlv_12= Function )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:5324:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (lv_name_5_0= RULE_ID ) ) this_ParameterList_6= ruleParameterList[$current] (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )? otherlv_9= Is ( (lv_body_10_0= ruleCodeBlock ) ) (otherlv_11= Service | otherlv_12= Function )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current] )
            // InternalMASLParser.g:5325:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (lv_name_5_0= RULE_ID ) ) this_ParameterList_6= ruleParameterList[$current] (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )? otherlv_9= Is ( (lv_body_10_0= ruleCodeBlock ) ) (otherlv_11= Service | otherlv_12= Function )? (otherlv_13= Semicolon )? this_PragmaList_14= rulePragmaList[$current]
            {
            // InternalMASLParser.g:5325:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==Private||LA101_0==Public) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // InternalMASLParser.g:5326:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:5326:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:5327:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5344:3: (otherlv_1= Service | otherlv_2= Function )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==Service) ) {
                alt102=1;
            }
            else if ( (LA102_0==Function) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // InternalMASLParser.g:5345:4: otherlv_1= Service
                    {
                    otherlv_1=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5350:4: otherlv_2= Function
                    {
                    otherlv_2=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5355:3: ( (otherlv_3= RULE_ID ) )
            // InternalMASLParser.g:5356:4: (otherlv_3= RULE_ID )
            {
            // InternalMASLParser.g:5356:4: (otherlv_3= RULE_ID )
            // InternalMASLParser.g:5357:5: otherlv_3= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
              					}
              				
            }
            otherlv_3=(Token)match(input,RULE_ID,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getDomainServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
              				
            }

            }


            }

            otherlv_4=(Token)match(input,ColonColon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getDomainServiceDefinitionAccess().getColonColonKeyword_3());
              		
            }
            // InternalMASLParser.g:5372:3: ( (lv_name_5_0= RULE_ID ) )
            // InternalMASLParser.g:5373:4: (lv_name_5_0= RULE_ID )
            {
            // InternalMASLParser.g:5373:4: (lv_name_5_0= RULE_ID )
            // InternalMASLParser.g:5374:5: lv_name_5_0= RULE_ID
            {
            lv_name_5_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_5_0, grammarAccess.getDomainServiceDefinitionAccess().getNameIDTerminalRuleCall_4_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_5_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getParameterListParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_83);
            this_ParameterList_6=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_6;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:5401:3: (otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) ) )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==Return) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalMASLParser.g:5402:4: otherlv_7= Return ( (lv_returnType_8_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_7=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getDomainServiceDefinitionAccess().getReturnKeyword_6_0());
                      			
                    }
                    // InternalMASLParser.g:5406:4: ( (lv_returnType_8_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:5407:5: (lv_returnType_8_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:5407:5: (lv_returnType_8_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:5408:6: lv_returnType_8_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_16);
                    lv_returnType_8_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_8_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,Is,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getDomainServiceDefinitionAccess().getIsKeyword_7());
              		
            }
            // InternalMASLParser.g:5430:3: ( (lv_body_10_0= ruleCodeBlock ) )
            // InternalMASLParser.g:5431:4: (lv_body_10_0= ruleCodeBlock )
            {
            // InternalMASLParser.g:5431:4: (lv_body_10_0= ruleCodeBlock )
            // InternalMASLParser.g:5432:5: lv_body_10_0= ruleCodeBlock
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_8_0());
              				
            }
            pushFollow(FOLLOW_85);
            lv_body_10_0=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_10_0,
              						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5449:3: (otherlv_11= Service | otherlv_12= Function )?
            int alt104=3;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==Service) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==EOF||(LA104_1>=Assigner && LA104_1<=Deferred)||LA104_1==Function||LA104_1==Instance||LA104_1==Terminal||(LA104_1>=Private && LA104_1<=Project)||LA104_1==Service||LA104_1==Domain||(LA104_1>=Pragma && LA104_1<=Public)||LA104_1==State||LA104_1==Semicolon) ) {
                    alt104=1;
                }
            }
            else if ( (LA104_0==Function) ) {
                int LA104_2 = input.LA(2);

                if ( (LA104_2==EOF||(LA104_2>=Assigner && LA104_2<=Deferred)||LA104_2==Function||LA104_2==Instance||LA104_2==Terminal||(LA104_2>=Private && LA104_2<=Project)||LA104_2==Service||LA104_2==Domain||(LA104_2>=Pragma && LA104_2<=Public)||LA104_2==State||LA104_2==Semicolon) ) {
                    alt104=2;
                }
            }
            switch (alt104) {
                case 1 :
                    // InternalMASLParser.g:5450:4: otherlv_11= Service
                    {
                    otherlv_11=(Token)match(input,Service,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_9_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5455:4: otherlv_12= Function
                    {
                    otherlv_12=(Token)match(input,Function,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_9_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5460:3: (otherlv_13= Semicolon )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==Semicolon) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalMASLParser.g:5461:4: otherlv_13= Semicolon
                    {
                    otherlv_13=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getDomainServiceDefinitionAccess().getSemicolonKeyword_10());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getPragmaListParserRuleCall_11());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_14=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_14;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDomainServiceDefinition"


    // $ANTLR start "entryRuleObjectServiceDefinition"
    // InternalMASLParser.g:5481:1: entryRuleObjectServiceDefinition returns [EObject current=null] : iv_ruleObjectServiceDefinition= ruleObjectServiceDefinition EOF ;
    public final EObject entryRuleObjectServiceDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectServiceDefinition = null;


        try {
            // InternalMASLParser.g:5481:64: (iv_ruleObjectServiceDefinition= ruleObjectServiceDefinition EOF )
            // InternalMASLParser.g:5482:2: iv_ruleObjectServiceDefinition= ruleObjectServiceDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectServiceDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectServiceDefinition=ruleObjectServiceDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectServiceDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleObjectServiceDefinition"


    // $ANTLR start "ruleObjectServiceDefinition"
    // InternalMASLParser.g:5488:1: ruleObjectServiceDefinition returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (otherlv_6= RULE_ID ) ) otherlv_7= ColonColon ( (otherlv_8= RULE_ID ) ) otherlv_9= FullStop ( (lv_name_10_0= RULE_ID ) ) this_ParameterList_11= ruleParameterList[$current] (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )? otherlv_14= Is ( (lv_body_15_0= ruleCodeBlock ) ) (otherlv_16= Service | otherlv_17= Function )? (otherlv_18= Semicolon )? this_PragmaList_19= rulePragmaList[$current] ) ;
    public final EObject ruleObjectServiceDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_instance_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token lv_name_10_0=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_11 = null;

        EObject lv_returnType_13_0 = null;

        EObject lv_body_15_0 = null;

        EObject this_PragmaList_19 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:5494:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (otherlv_6= RULE_ID ) ) otherlv_7= ColonColon ( (otherlv_8= RULE_ID ) ) otherlv_9= FullStop ( (lv_name_10_0= RULE_ID ) ) this_ParameterList_11= ruleParameterList[$current] (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )? otherlv_14= Is ( (lv_body_15_0= ruleCodeBlock ) ) (otherlv_16= Service | otherlv_17= Function )? (otherlv_18= Semicolon )? this_PragmaList_19= rulePragmaList[$current] ) )
            // InternalMASLParser.g:5495:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (otherlv_6= RULE_ID ) ) otherlv_7= ColonColon ( (otherlv_8= RULE_ID ) ) otherlv_9= FullStop ( (lv_name_10_0= RULE_ID ) ) this_ParameterList_11= ruleParameterList[$current] (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )? otherlv_14= Is ( (lv_body_15_0= ruleCodeBlock ) ) (otherlv_16= Service | otherlv_17= Function )? (otherlv_18= Semicolon )? this_PragmaList_19= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:5495:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (otherlv_6= RULE_ID ) ) otherlv_7= ColonColon ( (otherlv_8= RULE_ID ) ) otherlv_9= FullStop ( (lv_name_10_0= RULE_ID ) ) this_ParameterList_11= ruleParameterList[$current] (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )? otherlv_14= Is ( (lv_body_15_0= ruleCodeBlock ) ) (otherlv_16= Service | otherlv_17= Function )? (otherlv_18= Semicolon )? this_PragmaList_19= rulePragmaList[$current] )
            // InternalMASLParser.g:5496:3: ( (lv_visibility_0_0= ruleVisibility ) )? ( (lv_instance_1_0= Instance ) )? (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )? (otherlv_4= Service | otherlv_5= Function ) ( (otherlv_6= RULE_ID ) ) otherlv_7= ColonColon ( (otherlv_8= RULE_ID ) ) otherlv_9= FullStop ( (lv_name_10_0= RULE_ID ) ) this_ParameterList_11= ruleParameterList[$current] (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )? otherlv_14= Is ( (lv_body_15_0= ruleCodeBlock ) ) (otherlv_16= Service | otherlv_17= Function )? (otherlv_18= Semicolon )? this_PragmaList_19= rulePragmaList[$current]
            {
            // InternalMASLParser.g:5496:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Private||LA106_0==Public) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // InternalMASLParser.g:5497:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:5497:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:5498:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_65);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5515:3: ( (lv_instance_1_0= Instance ) )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==Instance) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // InternalMASLParser.g:5516:4: (lv_instance_1_0= Instance )
                    {
                    // InternalMASLParser.g:5516:4: (lv_instance_1_0= Instance )
                    // InternalMASLParser.g:5517:5: lv_instance_1_0= Instance
                    {
                    lv_instance_1_0=(Token)match(input,Instance,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_instance_1_0, grammarAccess.getObjectServiceDefinitionAccess().getInstanceInstanceKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
                      					}
                      					setWithLastConsumed(current, "instance", true, "instance");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5529:3: (otherlv_2= Deferred ( (otherlv_3= RULE_ID ) ) )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Deferred) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // InternalMASLParser.g:5530:4: otherlv_2= Deferred ( (otherlv_3= RULE_ID ) )
                    {
                    otherlv_2=(Token)match(input,Deferred,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getObjectServiceDefinitionAccess().getDeferredKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:5534:4: ( (otherlv_3= RULE_ID ) )
                    // InternalMASLParser.g:5535:5: (otherlv_3= RULE_ID )
                    {
                    // InternalMASLParser.g:5535:5: (otherlv_3= RULE_ID )
                    // InternalMASLParser.g:5536:6: otherlv_3= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
                      						}
                      					
                    }
                    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_3, grammarAccess.getObjectServiceDefinitionAccess().getRelationshipRelationshipDefinitionCrossReference_2_1_0());
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5548:3: (otherlv_4= Service | otherlv_5= Function )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==Service) ) {
                alt109=1;
            }
            else if ( (LA109_0==Function) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // InternalMASLParser.g:5549:4: otherlv_4= Service
                    {
                    otherlv_4=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_3_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5554:4: otherlv_5= Function
                    {
                    otherlv_5=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_3_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5559:3: ( (otherlv_6= RULE_ID ) )
            // InternalMASLParser.g:5560:4: (otherlv_6= RULE_ID )
            {
            // InternalMASLParser.g:5560:4: (otherlv_6= RULE_ID )
            // InternalMASLParser.g:5561:5: otherlv_6= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
              					}
              				
            }
            otherlv_6=(Token)match(input,RULE_ID,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_6, grammarAccess.getObjectServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_4_0());
              				
            }

            }


            }

            otherlv_7=(Token)match(input,ColonColon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getObjectServiceDefinitionAccess().getColonColonKeyword_5());
              		
            }
            // InternalMASLParser.g:5576:3: ( (otherlv_8= RULE_ID ) )
            // InternalMASLParser.g:5577:4: (otherlv_8= RULE_ID )
            {
            // InternalMASLParser.g:5577:4: (otherlv_8= RULE_ID )
            // InternalMASLParser.g:5578:5: otherlv_8= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
              					}
              				
            }
            otherlv_8=(Token)match(input,RULE_ID,FOLLOW_64); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_8, grammarAccess.getObjectServiceDefinitionAccess().getObjectObjectDeclarationCrossReference_6_0());
              				
            }

            }


            }

            otherlv_9=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getObjectServiceDefinitionAccess().getFullStopKeyword_7());
              		
            }
            // InternalMASLParser.g:5593:3: ( (lv_name_10_0= RULE_ID ) )
            // InternalMASLParser.g:5594:4: (lv_name_10_0= RULE_ID )
            {
            // InternalMASLParser.g:5594:4: (lv_name_10_0= RULE_ID )
            // InternalMASLParser.g:5595:5: lv_name_10_0= RULE_ID
            {
            lv_name_10_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_10_0, grammarAccess.getObjectServiceDefinitionAccess().getNameIDTerminalRuleCall_8_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_10_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getParameterListParserRuleCall_9());
              		
            }
            pushFollow(FOLLOW_83);
            this_ParameterList_11=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_11;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:5622:3: (otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) ) )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==Return) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalMASLParser.g:5623:4: otherlv_12= Return ( (lv_returnType_13_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_12=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getObjectServiceDefinitionAccess().getReturnKeyword_10_0());
                      			
                    }
                    // InternalMASLParser.g:5627:4: ( (lv_returnType_13_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:5628:5: (lv_returnType_13_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:5628:5: (lv_returnType_13_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:5629:6: lv_returnType_13_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_10_1_0());
                      					
                    }
                    pushFollow(FOLLOW_16);
                    lv_returnType_13_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_13_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_14=(Token)match(input,Is,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_14, grammarAccess.getObjectServiceDefinitionAccess().getIsKeyword_11());
              		
            }
            // InternalMASLParser.g:5651:3: ( (lv_body_15_0= ruleCodeBlock ) )
            // InternalMASLParser.g:5652:4: (lv_body_15_0= ruleCodeBlock )
            {
            // InternalMASLParser.g:5652:4: (lv_body_15_0= ruleCodeBlock )
            // InternalMASLParser.g:5653:5: lv_body_15_0= ruleCodeBlock
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_12_0());
              				
            }
            pushFollow(FOLLOW_85);
            lv_body_15_0=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_15_0,
              						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5670:3: (otherlv_16= Service | otherlv_17= Function )?
            int alt111=3;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==Service) ) {
                int LA111_1 = input.LA(2);

                if ( (LA111_1==EOF||(LA111_1>=Assigner && LA111_1<=Deferred)||LA111_1==Function||LA111_1==Instance||LA111_1==Terminal||(LA111_1>=Private && LA111_1<=Project)||LA111_1==Service||LA111_1==Domain||(LA111_1>=Pragma && LA111_1<=Public)||LA111_1==State||LA111_1==Semicolon) ) {
                    alt111=1;
                }
            }
            else if ( (LA111_0==Function) ) {
                int LA111_2 = input.LA(2);

                if ( (LA111_2==EOF||(LA111_2>=Assigner && LA111_2<=Deferred)||LA111_2==Function||LA111_2==Instance||LA111_2==Terminal||(LA111_2>=Private && LA111_2<=Project)||LA111_2==Service||LA111_2==Domain||(LA111_2>=Pragma && LA111_2<=Public)||LA111_2==State||LA111_2==Semicolon) ) {
                    alt111=2;
                }
            }
            switch (alt111) {
                case 1 :
                    // InternalMASLParser.g:5671:4: otherlv_16= Service
                    {
                    otherlv_16=(Token)match(input,Service,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_13_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5676:4: otherlv_17= Function
                    {
                    otherlv_17=(Token)match(input,Function,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_17, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_13_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5681:3: (otherlv_18= Semicolon )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==Semicolon) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalMASLParser.g:5682:4: otherlv_18= Semicolon
                    {
                    otherlv_18=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_18, grammarAccess.getObjectServiceDefinitionAccess().getSemicolonKeyword_14());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getPragmaListParserRuleCall_15());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_19=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_19;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleObjectServiceDefinition"


    // $ANTLR start "entryRuleTerminatorServiceDefinition"
    // InternalMASLParser.g:5702:1: entryRuleTerminatorServiceDefinition returns [EObject current=null] : iv_ruleTerminatorServiceDefinition= ruleTerminatorServiceDefinition EOF ;
    public final EObject entryRuleTerminatorServiceDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTerminatorServiceDefinition = null;


        try {
            // InternalMASLParser.g:5702:68: (iv_ruleTerminatorServiceDefinition= ruleTerminatorServiceDefinition EOF )
            // InternalMASLParser.g:5703:2: iv_ruleTerminatorServiceDefinition= ruleTerminatorServiceDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTerminatorServiceDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTerminatorServiceDefinition=ruleTerminatorServiceDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTerminatorServiceDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTerminatorServiceDefinition"


    // $ANTLR start "ruleTerminatorServiceDefinition"
    // InternalMASLParser.g:5709:1: ruleTerminatorServiceDefinition returns [EObject current=null] : ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (otherlv_5= RULE_ID ) ) otherlv_6= TildeGreaterThanSign ( (lv_name_7_0= RULE_ID ) ) this_ParameterList_8= ruleParameterList[$current] (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )? otherlv_11= Is ( (lv_body_12_0= ruleCodeBlock ) ) (otherlv_13= Service | otherlv_14= Function )? (otherlv_15= Semicolon )? this_PragmaList_16= rulePragmaList[$current] ) ;
    public final EObject ruleTerminatorServiceDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token lv_name_7_0=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Enumerator lv_visibility_0_0 = null;

        EObject this_ParameterList_8 = null;

        EObject lv_returnType_10_0 = null;

        EObject lv_body_12_0 = null;

        EObject this_PragmaList_16 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:5715:2: ( ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (otherlv_5= RULE_ID ) ) otherlv_6= TildeGreaterThanSign ( (lv_name_7_0= RULE_ID ) ) this_ParameterList_8= ruleParameterList[$current] (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )? otherlv_11= Is ( (lv_body_12_0= ruleCodeBlock ) ) (otherlv_13= Service | otherlv_14= Function )? (otherlv_15= Semicolon )? this_PragmaList_16= rulePragmaList[$current] ) )
            // InternalMASLParser.g:5716:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (otherlv_5= RULE_ID ) ) otherlv_6= TildeGreaterThanSign ( (lv_name_7_0= RULE_ID ) ) this_ParameterList_8= ruleParameterList[$current] (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )? otherlv_11= Is ( (lv_body_12_0= ruleCodeBlock ) ) (otherlv_13= Service | otherlv_14= Function )? (otherlv_15= Semicolon )? this_PragmaList_16= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:5716:2: ( ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (otherlv_5= RULE_ID ) ) otherlv_6= TildeGreaterThanSign ( (lv_name_7_0= RULE_ID ) ) this_ParameterList_8= ruleParameterList[$current] (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )? otherlv_11= Is ( (lv_body_12_0= ruleCodeBlock ) ) (otherlv_13= Service | otherlv_14= Function )? (otherlv_15= Semicolon )? this_PragmaList_16= rulePragmaList[$current] )
            // InternalMASLParser.g:5717:3: ( (lv_visibility_0_0= ruleVisibility ) )? (otherlv_1= Service | otherlv_2= Function ) ( (otherlv_3= RULE_ID ) ) otherlv_4= ColonColon ( (otherlv_5= RULE_ID ) ) otherlv_6= TildeGreaterThanSign ( (lv_name_7_0= RULE_ID ) ) this_ParameterList_8= ruleParameterList[$current] (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )? otherlv_11= Is ( (lv_body_12_0= ruleCodeBlock ) ) (otherlv_13= Service | otherlv_14= Function )? (otherlv_15= Semicolon )? this_PragmaList_16= rulePragmaList[$current]
            {
            // InternalMASLParser.g:5717:3: ( (lv_visibility_0_0= ruleVisibility ) )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==Private||LA113_0==Public) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // InternalMASLParser.g:5718:4: (lv_visibility_0_0= ruleVisibility )
                    {
                    // InternalMASLParser.g:5718:4: (lv_visibility_0_0= ruleVisibility )
                    // InternalMASLParser.g:5719:5: lv_visibility_0_0= ruleVisibility
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_57);
                    lv_visibility_0_0=ruleVisibility();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"visibility",
                      						lv_visibility_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.Visibility");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:5736:3: (otherlv_1= Service | otherlv_2= Function )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==Service) ) {
                alt114=1;
            }
            else if ( (LA114_0==Function) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // InternalMASLParser.g:5737:4: otherlv_1= Service
                    {
                    otherlv_1=(Token)match(input,Service,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5742:4: otherlv_2= Function
                    {
                    otherlv_2=(Token)match(input,Function,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5747:3: ( (otherlv_3= RULE_ID ) )
            // InternalMASLParser.g:5748:4: (otherlv_3= RULE_ID )
            {
            // InternalMASLParser.g:5748:4: (otherlv_3= RULE_ID )
            // InternalMASLParser.g:5749:5: otherlv_3= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
              					}
              				
            }
            otherlv_3=(Token)match(input,RULE_ID,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTerminatorServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
              				
            }

            }


            }

            otherlv_4=(Token)match(input,ColonColon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTerminatorServiceDefinitionAccess().getColonColonKeyword_3());
              		
            }
            // InternalMASLParser.g:5764:3: ( (otherlv_5= RULE_ID ) )
            // InternalMASLParser.g:5765:4: (otherlv_5= RULE_ID )
            {
            // InternalMASLParser.g:5765:4: (otherlv_5= RULE_ID )
            // InternalMASLParser.g:5766:5: otherlv_5= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
              					}
              				
            }
            otherlv_5=(Token)match(input,RULE_ID,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_5, grammarAccess.getTerminatorServiceDefinitionAccess().getTerminatorTerminatorDefinitionCrossReference_4_0());
              				
            }

            }


            }

            otherlv_6=(Token)match(input,TildeGreaterThanSign,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTerminatorServiceDefinitionAccess().getTildeGreaterThanSignKeyword_5());
              		
            }
            // InternalMASLParser.g:5781:3: ( (lv_name_7_0= RULE_ID ) )
            // InternalMASLParser.g:5782:4: (lv_name_7_0= RULE_ID )
            {
            // InternalMASLParser.g:5782:4: (lv_name_7_0= RULE_ID )
            // InternalMASLParser.g:5783:5: lv_name_7_0= RULE_ID
            {
            lv_name_7_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_7_0, grammarAccess.getTerminatorServiceDefinitionAccess().getNameIDTerminalRuleCall_6_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_7_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getParameterListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_83);
            this_ParameterList_8=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_8;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:5810:3: (otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) ) )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==Return) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalMASLParser.g:5811:4: otherlv_9= Return ( (lv_returnType_10_0= ruleAbstractTypeReference ) )
                    {
                    otherlv_9=(Token)match(input,Return,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTerminatorServiceDefinitionAccess().getReturnKeyword_8_0());
                      			
                    }
                    // InternalMASLParser.g:5815:4: ( (lv_returnType_10_0= ruleAbstractTypeReference ) )
                    // InternalMASLParser.g:5816:5: (lv_returnType_10_0= ruleAbstractTypeReference )
                    {
                    // InternalMASLParser.g:5816:5: (lv_returnType_10_0= ruleAbstractTypeReference )
                    // InternalMASLParser.g:5817:6: lv_returnType_10_0= ruleAbstractTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_16);
                    lv_returnType_10_0=ruleAbstractTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"returnType",
                      							lv_returnType_10_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_11=(Token)match(input,Is,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_11, grammarAccess.getTerminatorServiceDefinitionAccess().getIsKeyword_9());
              		
            }
            // InternalMASLParser.g:5839:3: ( (lv_body_12_0= ruleCodeBlock ) )
            // InternalMASLParser.g:5840:4: (lv_body_12_0= ruleCodeBlock )
            {
            // InternalMASLParser.g:5840:4: (lv_body_12_0= ruleCodeBlock )
            // InternalMASLParser.g:5841:5: lv_body_12_0= ruleCodeBlock
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_10_0());
              				
            }
            pushFollow(FOLLOW_85);
            lv_body_12_0=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_12_0,
              						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:5858:3: (otherlv_13= Service | otherlv_14= Function )?
            int alt116=3;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==Service) ) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==EOF||(LA116_1>=Assigner && LA116_1<=Deferred)||LA116_1==Function||LA116_1==Instance||LA116_1==Terminal||(LA116_1>=Private && LA116_1<=Project)||LA116_1==Service||LA116_1==Domain||(LA116_1>=Pragma && LA116_1<=Public)||LA116_1==State||LA116_1==Semicolon) ) {
                    alt116=1;
                }
            }
            else if ( (LA116_0==Function) ) {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==EOF||(LA116_2>=Assigner && LA116_2<=Deferred)||LA116_2==Function||LA116_2==Instance||LA116_2==Terminal||(LA116_2>=Private && LA116_2<=Project)||LA116_2==Service||LA116_2==Domain||(LA116_2>=Pragma && LA116_2<=Public)||LA116_2==State||LA116_2==Semicolon) ) {
                    alt116=2;
                }
            }
            switch (alt116) {
                case 1 :
                    // InternalMASLParser.g:5859:4: otherlv_13= Service
                    {
                    otherlv_13=(Token)match(input,Service,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_11_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:5864:4: otherlv_14= Function
                    {
                    otherlv_14=(Token)match(input,Function,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_11_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:5869:3: (otherlv_15= Semicolon )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==Semicolon) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalMASLParser.g:5870:4: otherlv_15= Semicolon
                    {
                    otherlv_15=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_15, grammarAccess.getTerminatorServiceDefinitionAccess().getSemicolonKeyword_12());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getPragmaListParserRuleCall_13());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_16=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_16;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTerminatorServiceDefinition"


    // $ANTLR start "entryRuleStateDefinition"
    // InternalMASLParser.g:5890:1: entryRuleStateDefinition returns [EObject current=null] : iv_ruleStateDefinition= ruleStateDefinition EOF ;
    public final EObject entryRuleStateDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStateDefinition = null;


        try {
            // InternalMASLParser.g:5890:56: (iv_ruleStateDefinition= ruleStateDefinition EOF )
            // InternalMASLParser.g:5891:2: iv_ruleStateDefinition= ruleStateDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStateDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStateDefinition=ruleStateDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStateDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStateDefinition"


    // $ANTLR start "ruleStateDefinition"
    // InternalMASLParser.g:5897:1: ruleStateDefinition returns [EObject current=null] : ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (otherlv_2= RULE_ID ) ) otherlv_3= ColonColon ( (otherlv_4= RULE_ID ) ) otherlv_5= FullStop ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] otherlv_8= Is ( (lv_body_9_0= ruleCodeBlock ) ) (otherlv_10= State )? (otherlv_11= Semicolon )? this_PragmaList_12= rulePragmaList[$current] ) ;
    public final EObject ruleStateDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token lv_name_6_0=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        AntlrDatatypeRuleToken lv_type_0_0 = null;

        EObject this_ParameterList_7 = null;

        EObject lv_body_9_0 = null;

        EObject this_PragmaList_12 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:5903:2: ( ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (otherlv_2= RULE_ID ) ) otherlv_3= ColonColon ( (otherlv_4= RULE_ID ) ) otherlv_5= FullStop ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] otherlv_8= Is ( (lv_body_9_0= ruleCodeBlock ) ) (otherlv_10= State )? (otherlv_11= Semicolon )? this_PragmaList_12= rulePragmaList[$current] ) )
            // InternalMASLParser.g:5904:2: ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (otherlv_2= RULE_ID ) ) otherlv_3= ColonColon ( (otherlv_4= RULE_ID ) ) otherlv_5= FullStop ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] otherlv_8= Is ( (lv_body_9_0= ruleCodeBlock ) ) (otherlv_10= State )? (otherlv_11= Semicolon )? this_PragmaList_12= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:5904:2: ( ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (otherlv_2= RULE_ID ) ) otherlv_3= ColonColon ( (otherlv_4= RULE_ID ) ) otherlv_5= FullStop ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] otherlv_8= Is ( (lv_body_9_0= ruleCodeBlock ) ) (otherlv_10= State )? (otherlv_11= Semicolon )? this_PragmaList_12= rulePragmaList[$current] )
            // InternalMASLParser.g:5905:3: ( (lv_type_0_0= ruleStateTypeSyntax ) )? otherlv_1= State ( (otherlv_2= RULE_ID ) ) otherlv_3= ColonColon ( (otherlv_4= RULE_ID ) ) otherlv_5= FullStop ( (lv_name_6_0= RULE_ID ) ) this_ParameterList_7= ruleParameterList[$current] otherlv_8= Is ( (lv_body_9_0= ruleCodeBlock ) ) (otherlv_10= State )? (otherlv_11= Semicolon )? this_PragmaList_12= rulePragmaList[$current]
            {
            // InternalMASLParser.g:5905:3: ( (lv_type_0_0= ruleStateTypeSyntax ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( ((LA118_0>=Assigner && LA118_0<=Creation)||LA118_0==Terminal) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalMASLParser.g:5906:4: (lv_type_0_0= ruleStateTypeSyntax )
                    {
                    // InternalMASLParser.g:5906:4: (lv_type_0_0= ruleStateTypeSyntax )
                    // InternalMASLParser.g:5907:5: lv_type_0_0= ruleStateTypeSyntax
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStateDefinitionAccess().getTypeStateTypeSyntaxParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_68);
                    lv_type_0_0=ruleStateTypeSyntax();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStateDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"type",
                      						lv_type_0_0,
                      						"org.xtuml.bp.xtext.masl.MASL.StateTypeSyntax");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,State,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStateDefinitionAccess().getStateKeyword_1());
              		
            }
            // InternalMASLParser.g:5928:3: ( (otherlv_2= RULE_ID ) )
            // InternalMASLParser.g:5929:4: (otherlv_2= RULE_ID )
            {
            // InternalMASLParser.g:5929:4: (otherlv_2= RULE_ID )
            // InternalMASLParser.g:5930:5: otherlv_2= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getStateDefinitionRule());
              					}
              				
            }
            otherlv_2=(Token)match(input,RULE_ID,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getStateDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
              				
            }

            }


            }

            otherlv_3=(Token)match(input,ColonColon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getStateDefinitionAccess().getColonColonKeyword_3());
              		
            }
            // InternalMASLParser.g:5945:3: ( (otherlv_4= RULE_ID ) )
            // InternalMASLParser.g:5946:4: (otherlv_4= RULE_ID )
            {
            // InternalMASLParser.g:5946:4: (otherlv_4= RULE_ID )
            // InternalMASLParser.g:5947:5: otherlv_4= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getStateDefinitionRule());
              					}
              				
            }
            otherlv_4=(Token)match(input,RULE_ID,FOLLOW_64); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getStateDefinitionAccess().getObjectObjectDeclarationCrossReference_4_0());
              				
            }

            }


            }

            otherlv_5=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getStateDefinitionAccess().getFullStopKeyword_5());
              		
            }
            // InternalMASLParser.g:5962:3: ( (lv_name_6_0= RULE_ID ) )
            // InternalMASLParser.g:5963:4: (lv_name_6_0= RULE_ID )
            {
            // InternalMASLParser.g:5963:4: (lv_name_6_0= RULE_ID )
            // InternalMASLParser.g:5964:5: lv_name_6_0= RULE_ID
            {
            lv_name_6_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_6_0, grammarAccess.getStateDefinitionAccess().getNameIDTerminalRuleCall_6_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getStateDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_6_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getStateDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getStateDefinitionAccess().getParameterListParserRuleCall_7());
              		
            }
            pushFollow(FOLLOW_16);
            this_ParameterList_7=ruleParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ParameterList_7;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_8=(Token)match(input,Is,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getStateDefinitionAccess().getIsKeyword_8());
              		
            }
            // InternalMASLParser.g:5995:3: ( (lv_body_9_0= ruleCodeBlock ) )
            // InternalMASLParser.g:5996:4: (lv_body_9_0= ruleCodeBlock )
            {
            // InternalMASLParser.g:5996:4: (lv_body_9_0= ruleCodeBlock )
            // InternalMASLParser.g:5997:5: lv_body_9_0= ruleCodeBlock
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStateDefinitionAccess().getBodyCodeBlockParserRuleCall_9_0());
              				
            }
            pushFollow(FOLLOW_87);
            lv_body_9_0=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStateDefinitionRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_9_0,
              						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6014:3: (otherlv_10= State )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==State) ) {
                int LA119_1 = input.LA(2);

                if ( (LA119_1==EOF||(LA119_1>=Assigner && LA119_1<=Deferred)||LA119_1==Function||LA119_1==Instance||LA119_1==Terminal||(LA119_1>=Private && LA119_1<=Project)||LA119_1==Service||LA119_1==Domain||(LA119_1>=Pragma && LA119_1<=Public)||LA119_1==State||LA119_1==Semicolon) ) {
                    alt119=1;
                }
            }
            switch (alt119) {
                case 1 :
                    // InternalMASLParser.g:6015:4: otherlv_10= State
                    {
                    otherlv_10=(Token)match(input,State,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getStateDefinitionAccess().getStateKeyword_10());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:6020:3: (otherlv_11= Semicolon )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==Semicolon) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // InternalMASLParser.g:6021:4: otherlv_11= Semicolon
                    {
                    otherlv_11=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getStateDefinitionAccess().getSemicolonKeyword_11());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getStateDefinitionRule());
              			}
              			newCompositeNode(grammarAccess.getStateDefinitionAccess().getPragmaListParserRuleCall_12());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_12=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_12;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStateDefinition"


    // $ANTLR start "entryRuleAbstractStatement"
    // InternalMASLParser.g:6041:1: entryRuleAbstractStatement returns [EObject current=null] : iv_ruleAbstractStatement= ruleAbstractStatement EOF ;
    public final EObject entryRuleAbstractStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAbstractStatement = null;


        try {
            // InternalMASLParser.g:6041:58: (iv_ruleAbstractStatement= ruleAbstractStatement EOF )
            // InternalMASLParser.g:6042:2: iv_ruleAbstractStatement= ruleAbstractStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAbstractStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAbstractStatement=ruleAbstractStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAbstractStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAbstractStatement"


    // $ANTLR start "ruleAbstractStatement"
    // InternalMASLParser.g:6048:1: ruleAbstractStatement returns [EObject current=null] : ( (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement ) otherlv_15= Semicolon this_PragmaList_16= rulePragmaList[$current] ) ;
    public final EObject ruleAbstractStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_15=null;
        EObject this_CodeBlockStatement_0 = null;

        EObject this_AssignStatement_1 = null;

        EObject this_ExitStatement_2 = null;

        EObject this_ReturnStatement_3 = null;

        EObject this_DelayStatement_4 = null;

        EObject this_RaiseStatement_5 = null;

        EObject this_DeleteStatement_6 = null;

        EObject this_EraseStatement_7 = null;

        EObject this_ScheduleStatement_8 = null;

        EObject this_CancelTimerStatement_9 = null;

        EObject this_GenerateStatement_10 = null;

        EObject this_IfStatement_11 = null;

        EObject this_CaseStatement_12 = null;

        EObject this_ForStatement_13 = null;

        EObject this_WhileStatement_14 = null;

        EObject this_PragmaList_16 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6054:2: ( ( (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement ) otherlv_15= Semicolon this_PragmaList_16= rulePragmaList[$current] ) )
            // InternalMASLParser.g:6055:2: ( (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement ) otherlv_15= Semicolon this_PragmaList_16= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:6055:2: ( (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement ) otherlv_15= Semicolon this_PragmaList_16= rulePragmaList[$current] )
            // InternalMASLParser.g:6056:3: (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement ) otherlv_15= Semicolon this_PragmaList_16= rulePragmaList[$current]
            {
            // InternalMASLParser.g:6056:3: (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement )
            int alt121=15;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // InternalMASLParser.g:6057:4: this_CodeBlockStatement_0= ruleCodeBlockStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getCodeBlockStatementParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_CodeBlockStatement_0=ruleCodeBlockStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_CodeBlockStatement_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:6066:4: this_AssignStatement_1= ruleAssignStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getAssignStatementParserRuleCall_0_1());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_AssignStatement_1=ruleAssignStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AssignStatement_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:6075:4: this_ExitStatement_2= ruleExitStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getExitStatementParserRuleCall_0_2());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_ExitStatement_2=ruleExitStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ExitStatement_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:6084:4: this_ReturnStatement_3= ruleReturnStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getReturnStatementParserRuleCall_0_3());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_ReturnStatement_3=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ReturnStatement_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 5 :
                    // InternalMASLParser.g:6093:4: this_DelayStatement_4= ruleDelayStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getDelayStatementParserRuleCall_0_4());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_DelayStatement_4=ruleDelayStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_DelayStatement_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 6 :
                    // InternalMASLParser.g:6102:4: this_RaiseStatement_5= ruleRaiseStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getRaiseStatementParserRuleCall_0_5());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_RaiseStatement_5=ruleRaiseStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_RaiseStatement_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 7 :
                    // InternalMASLParser.g:6111:4: this_DeleteStatement_6= ruleDeleteStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getDeleteStatementParserRuleCall_0_6());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_DeleteStatement_6=ruleDeleteStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_DeleteStatement_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 8 :
                    // InternalMASLParser.g:6120:4: this_EraseStatement_7= ruleEraseStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getEraseStatementParserRuleCall_0_7());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_EraseStatement_7=ruleEraseStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_EraseStatement_7;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 9 :
                    // InternalMASLParser.g:6129:4: this_ScheduleStatement_8= ruleScheduleStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getScheduleStatementParserRuleCall_0_8());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_ScheduleStatement_8=ruleScheduleStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ScheduleStatement_8;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 10 :
                    // InternalMASLParser.g:6138:4: this_CancelTimerStatement_9= ruleCancelTimerStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getCancelTimerStatementParserRuleCall_0_9());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_CancelTimerStatement_9=ruleCancelTimerStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_CancelTimerStatement_9;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 11 :
                    // InternalMASLParser.g:6147:4: this_GenerateStatement_10= ruleGenerateStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getGenerateStatementParserRuleCall_0_10());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_GenerateStatement_10=ruleGenerateStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_GenerateStatement_10;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 12 :
                    // InternalMASLParser.g:6156:4: this_IfStatement_11= ruleIfStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getIfStatementParserRuleCall_0_11());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_IfStatement_11=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_IfStatement_11;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 13 :
                    // InternalMASLParser.g:6165:4: this_CaseStatement_12= ruleCaseStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getCaseStatementParserRuleCall_0_12());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_CaseStatement_12=ruleCaseStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_CaseStatement_12;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 14 :
                    // InternalMASLParser.g:6174:4: this_ForStatement_13= ruleForStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getForStatementParserRuleCall_0_13());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_ForStatement_13=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ForStatement_13;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 15 :
                    // InternalMASLParser.g:6183:4: this_WhileStatement_14= ruleWhileStatement
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAbstractStatementAccess().getWhileStatementParserRuleCall_0_14());
                      			
                    }
                    pushFollow(FOLLOW_6);
                    this_WhileStatement_14=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WhileStatement_14;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_15=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getAbstractStatementAccess().getSemicolonKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAbstractStatementRule());
              			}
              			newCompositeNode(grammarAccess.getAbstractStatementAccess().getPragmaListParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_16=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_16;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAbstractStatement"


    // $ANTLR start "entryRuleAssignStatement"
    // InternalMASLParser.g:6211:1: entryRuleAssignStatement returns [EObject current=null] : iv_ruleAssignStatement= ruleAssignStatement EOF ;
    public final EObject entryRuleAssignStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssignStatement = null;


        try {
            // InternalMASLParser.g:6211:56: (iv_ruleAssignStatement= ruleAssignStatement EOF )
            // InternalMASLParser.g:6212:2: iv_ruleAssignStatement= ruleAssignStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignStatement=ruleAssignStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAssignStatement"


    // $ANTLR start "ruleAssignStatement"
    // InternalMASLParser.g:6218:1: ruleAssignStatement returns [EObject current=null] : (this_Expression_0= ruleExpression ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )? ) ;
    public final EObject ruleAssignStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Expression_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6224:2: ( (this_Expression_0= ruleExpression ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )? ) )
            // InternalMASLParser.g:6225:2: (this_Expression_0= ruleExpression ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )? )
            {
            // InternalMASLParser.g:6225:2: (this_Expression_0= ruleExpression ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )? )
            // InternalMASLParser.g:6226:3: this_Expression_0= ruleExpression ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAssignStatementAccess().getExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_88);
            this_Expression_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Expression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:6234:3: ( () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) ) )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ColonEqualsSign) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // InternalMASLParser.g:6235:4: () otherlv_2= ColonEqualsSign ( (lv_rhs_3_0= ruleExpression ) )
                    {
                    // InternalMASLParser.g:6235:4: ()
                    // InternalMASLParser.g:6236:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getAssignStatementAccess().getAssignStatementLhsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,ColonEqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getAssignStatementAccess().getColonEqualsSignKeyword_1_1());
                      			
                    }
                    // InternalMASLParser.g:6246:4: ( (lv_rhs_3_0= ruleExpression ) )
                    // InternalMASLParser.g:6247:5: (lv_rhs_3_0= ruleExpression )
                    {
                    // InternalMASLParser.g:6247:5: (lv_rhs_3_0= ruleExpression )
                    // InternalMASLParser.g:6248:6: lv_rhs_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAssignStatementAccess().getRhsExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAssignStatementRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAssignStatement"


    // $ANTLR start "entryRuleExitStatement"
    // InternalMASLParser.g:6270:1: entryRuleExitStatement returns [EObject current=null] : iv_ruleExitStatement= ruleExitStatement EOF ;
    public final EObject entryRuleExitStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExitStatement = null;


        try {
            // InternalMASLParser.g:6270:54: (iv_ruleExitStatement= ruleExitStatement EOF )
            // InternalMASLParser.g:6271:2: iv_ruleExitStatement= ruleExitStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExitStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExitStatement=ruleExitStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExitStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExitStatement"


    // $ANTLR start "ruleExitStatement"
    // InternalMASLParser.g:6277:1: ruleExitStatement returns [EObject current=null] : ( () otherlv_1= Exit (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )? ) ;
    public final EObject ruleExitStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_condition_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6283:2: ( ( () otherlv_1= Exit (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )? ) )
            // InternalMASLParser.g:6284:2: ( () otherlv_1= Exit (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )? )
            {
            // InternalMASLParser.g:6284:2: ( () otherlv_1= Exit (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )? )
            // InternalMASLParser.g:6285:3: () otherlv_1= Exit (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )?
            {
            // InternalMASLParser.g:6285:3: ()
            // InternalMASLParser.g:6286:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExitStatementAccess().getExitStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Exit,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExitStatementAccess().getExitKeyword_1());
              		
            }
            // InternalMASLParser.g:6296:3: (otherlv_2= When ( (lv_condition_3_0= ruleExpression ) ) )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==When) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // InternalMASLParser.g:6297:4: otherlv_2= When ( (lv_condition_3_0= ruleExpression ) )
                    {
                    otherlv_2=(Token)match(input,When,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExitStatementAccess().getWhenKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:6301:4: ( (lv_condition_3_0= ruleExpression ) )
                    // InternalMASLParser.g:6302:5: (lv_condition_3_0= ruleExpression )
                    {
                    // InternalMASLParser.g:6302:5: (lv_condition_3_0= ruleExpression )
                    // InternalMASLParser.g:6303:6: lv_condition_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExitStatementAccess().getConditionExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_condition_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExitStatementRule());
                      						}
                      						set(
                      							current,
                      							"condition",
                      							lv_condition_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExitStatement"


    // $ANTLR start "entryRuleReturnStatement"
    // InternalMASLParser.g:6325:1: entryRuleReturnStatement returns [EObject current=null] : iv_ruleReturnStatement= ruleReturnStatement EOF ;
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnStatement = null;


        try {
            // InternalMASLParser.g:6325:56: (iv_ruleReturnStatement= ruleReturnStatement EOF )
            // InternalMASLParser.g:6326:2: iv_ruleReturnStatement= ruleReturnStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleReturnStatement"


    // $ANTLR start "ruleReturnStatement"
    // InternalMASLParser.g:6332:1: ruleReturnStatement returns [EObject current=null] : (otherlv_0= Return ( (lv_value_1_0= ruleExpression ) ) ) ;
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6338:2: ( (otherlv_0= Return ( (lv_value_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:6339:2: (otherlv_0= Return ( (lv_value_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:6339:2: (otherlv_0= Return ( (lv_value_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:6340:3: otherlv_0= Return ( (lv_value_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Return,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
              		
            }
            // InternalMASLParser.g:6344:3: ( (lv_value_1_0= ruleExpression ) )
            // InternalMASLParser.g:6345:4: (lv_value_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6345:4: (lv_value_1_0= ruleExpression )
            // InternalMASLParser.g:6346:5: lv_value_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getReturnStatementAccess().getValueExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleReturnStatement"


    // $ANTLR start "entryRuleDelayStatement"
    // InternalMASLParser.g:6367:1: entryRuleDelayStatement returns [EObject current=null] : iv_ruleDelayStatement= ruleDelayStatement EOF ;
    public final EObject entryRuleDelayStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDelayStatement = null;


        try {
            // InternalMASLParser.g:6367:55: (iv_ruleDelayStatement= ruleDelayStatement EOF )
            // InternalMASLParser.g:6368:2: iv_ruleDelayStatement= ruleDelayStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDelayStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDelayStatement=ruleDelayStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDelayStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDelayStatement"


    // $ANTLR start "ruleDelayStatement"
    // InternalMASLParser.g:6374:1: ruleDelayStatement returns [EObject current=null] : (otherlv_0= Delay ( (lv_value_1_0= ruleExpression ) ) ) ;
    public final EObject ruleDelayStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6380:2: ( (otherlv_0= Delay ( (lv_value_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:6381:2: (otherlv_0= Delay ( (lv_value_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:6381:2: (otherlv_0= Delay ( (lv_value_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:6382:3: otherlv_0= Delay ( (lv_value_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Delay,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDelayStatementAccess().getDelayKeyword_0());
              		
            }
            // InternalMASLParser.g:6386:3: ( (lv_value_1_0= ruleExpression ) )
            // InternalMASLParser.g:6387:4: (lv_value_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6387:4: (lv_value_1_0= ruleExpression )
            // InternalMASLParser.g:6388:5: lv_value_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDelayStatementAccess().getValueExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDelayStatementRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDelayStatement"


    // $ANTLR start "entryRuleRaiseStatement"
    // InternalMASLParser.g:6409:1: entryRuleRaiseStatement returns [EObject current=null] : iv_ruleRaiseStatement= ruleRaiseStatement EOF ;
    public final EObject entryRuleRaiseStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRaiseStatement = null;


        try {
            // InternalMASLParser.g:6409:55: (iv_ruleRaiseStatement= ruleRaiseStatement EOF )
            // InternalMASLParser.g:6410:2: iv_ruleRaiseStatement= ruleRaiseStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRaiseStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRaiseStatement=ruleRaiseStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRaiseStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRaiseStatement"


    // $ANTLR start "ruleRaiseStatement"
    // InternalMASLParser.g:6416:1: ruleRaiseStatement returns [EObject current=null] : (otherlv_0= Raise ( ( ruleScopedName ) ) (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )? ) ;
    public final EObject ruleRaiseStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_argument_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6422:2: ( (otherlv_0= Raise ( ( ruleScopedName ) ) (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )? ) )
            // InternalMASLParser.g:6423:2: (otherlv_0= Raise ( ( ruleScopedName ) ) (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )? )
            {
            // InternalMASLParser.g:6423:2: (otherlv_0= Raise ( ( ruleScopedName ) ) (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )? )
            // InternalMASLParser.g:6424:3: otherlv_0= Raise ( ( ruleScopedName ) ) (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )?
            {
            otherlv_0=(Token)match(input,Raise,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRaiseStatementAccess().getRaiseKeyword_0());
              		
            }
            // InternalMASLParser.g:6428:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:6429:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:6429:4: ( ruleScopedName )
            // InternalMASLParser.g:6430:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getRaiseStatementRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRaiseStatementAccess().getExceptionExceptionDeclarationCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_90);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6444:3: (otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LeftParenthesis) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // InternalMASLParser.g:6445:4: otherlv_2= LeftParenthesis ( (lv_argument_3_0= ruleExpression ) )? otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getRaiseStatementAccess().getLeftParenthesisKeyword_2_0());
                      			
                    }
                    // InternalMASLParser.g:6449:4: ( (lv_argument_3_0= ruleExpression ) )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Dictionary||LA124_0==Anonymous||LA124_0==Find_only||(LA124_0>=Find_all && LA124_0<=Find_one)||LA124_0==Instance||LA124_0==Sequence||LA124_0==Console||(LA124_0>=FILE && LA124_0<=LINE)||LA124_0==Create||(LA124_0>=Unlink && LA124_0<=Array)||(LA124_0>=False && LA124_0<=Flush)||LA124_0==Endl||LA124_0==Find||LA124_0==Link||LA124_0==Null||(LA124_0>=This && LA124_0<=True)||LA124_0==Abs||LA124_0==Bag||LA124_0==Not||LA124_0==Set||LA124_0==LeftParenthesis||LA124_0==PlusSign||LA124_0==HyphenMinus||(LA124_0>=RULE_ID && LA124_0<=RULE_TIMESTAMP)) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // InternalMASLParser.g:6450:5: (lv_argument_3_0= ruleExpression )
                            {
                            // InternalMASLParser.g:6450:5: (lv_argument_3_0= ruleExpression )
                            // InternalMASLParser.g:6451:6: lv_argument_3_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getRaiseStatementAccess().getArgumentExpressionParserRuleCall_2_1_0());
                              					
                            }
                            pushFollow(FOLLOW_28);
                            lv_argument_3_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getRaiseStatementRule());
                              						}
                              						set(
                              							current,
                              							"argument",
                              							lv_argument_3_0,
                              							"org.xtuml.bp.xtext.masl.MASL.Expression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getRaiseStatementAccess().getRightParenthesisKeyword_2_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRaiseStatement"


    // $ANTLR start "entryRuleDeleteStatement"
    // InternalMASLParser.g:6477:1: entryRuleDeleteStatement returns [EObject current=null] : iv_ruleDeleteStatement= ruleDeleteStatement EOF ;
    public final EObject entryRuleDeleteStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDeleteStatement = null;


        try {
            // InternalMASLParser.g:6477:56: (iv_ruleDeleteStatement= ruleDeleteStatement EOF )
            // InternalMASLParser.g:6478:2: iv_ruleDeleteStatement= ruleDeleteStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeleteStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDeleteStatement=ruleDeleteStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDeleteStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDeleteStatement"


    // $ANTLR start "ruleDeleteStatement"
    // InternalMASLParser.g:6484:1: ruleDeleteStatement returns [EObject current=null] : (otherlv_0= Delete ( (lv_value_1_0= ruleExpression ) ) ) ;
    public final EObject ruleDeleteStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6490:2: ( (otherlv_0= Delete ( (lv_value_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:6491:2: (otherlv_0= Delete ( (lv_value_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:6491:2: (otherlv_0= Delete ( (lv_value_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:6492:3: otherlv_0= Delete ( (lv_value_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Delete,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDeleteStatementAccess().getDeleteKeyword_0());
              		
            }
            // InternalMASLParser.g:6496:3: ( (lv_value_1_0= ruleExpression ) )
            // InternalMASLParser.g:6497:4: (lv_value_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6497:4: (lv_value_1_0= ruleExpression )
            // InternalMASLParser.g:6498:5: lv_value_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDeleteStatementAccess().getValueExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDeleteStatement"


    // $ANTLR start "entryRuleEraseStatement"
    // InternalMASLParser.g:6519:1: entryRuleEraseStatement returns [EObject current=null] : iv_ruleEraseStatement= ruleEraseStatement EOF ;
    public final EObject entryRuleEraseStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEraseStatement = null;


        try {
            // InternalMASLParser.g:6519:55: (iv_ruleEraseStatement= ruleEraseStatement EOF )
            // InternalMASLParser.g:6520:2: iv_ruleEraseStatement= ruleEraseStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEraseStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEraseStatement=ruleEraseStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEraseStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEraseStatement"


    // $ANTLR start "ruleEraseStatement"
    // InternalMASLParser.g:6526:1: ruleEraseStatement returns [EObject current=null] : (otherlv_0= Erase ( (lv_value_1_0= ruleExpression ) ) ) ;
    public final EObject ruleEraseStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_value_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6532:2: ( (otherlv_0= Erase ( (lv_value_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:6533:2: (otherlv_0= Erase ( (lv_value_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:6533:2: (otherlv_0= Erase ( (lv_value_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:6534:3: otherlv_0= Erase ( (lv_value_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Erase,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getEraseStatementAccess().getEraseKeyword_0());
              		
            }
            // InternalMASLParser.g:6538:3: ( (lv_value_1_0= ruleExpression ) )
            // InternalMASLParser.g:6539:4: (lv_value_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6539:4: (lv_value_1_0= ruleExpression )
            // InternalMASLParser.g:6540:5: lv_value_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getEraseStatementAccess().getValueExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getEraseStatementRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEraseStatement"


    // $ANTLR start "entryRuleScheduleStatement"
    // InternalMASLParser.g:6561:1: entryRuleScheduleStatement returns [EObject current=null] : iv_ruleScheduleStatement= ruleScheduleStatement EOF ;
    public final EObject entryRuleScheduleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScheduleStatement = null;


        try {
            // InternalMASLParser.g:6561:58: (iv_ruleScheduleStatement= ruleScheduleStatement EOF )
            // InternalMASLParser.g:6562:2: iv_ruleScheduleStatement= ruleScheduleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScheduleStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScheduleStatement=ruleScheduleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScheduleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScheduleStatement"


    // $ANTLR start "ruleScheduleStatement"
    // InternalMASLParser.g:6568:1: ruleScheduleStatement returns [EObject current=null] : (otherlv_0= Schedule ( (lv_timerId_1_0= ruleExpression ) ) ( (lv_generateStatement_2_0= ruleGenerateStatement ) ) ( (lv_type_3_0= ruleScheduleType ) ) ( (lv_time_4_0= ruleExpression ) ) (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )? ) ;
    public final EObject ruleScheduleStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_5=null;
        EObject lv_timerId_1_0 = null;

        EObject lv_generateStatement_2_0 = null;

        Enumerator lv_type_3_0 = null;

        EObject lv_time_4_0 = null;

        EObject lv_period_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6574:2: ( (otherlv_0= Schedule ( (lv_timerId_1_0= ruleExpression ) ) ( (lv_generateStatement_2_0= ruleGenerateStatement ) ) ( (lv_type_3_0= ruleScheduleType ) ) ( (lv_time_4_0= ruleExpression ) ) (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )? ) )
            // InternalMASLParser.g:6575:2: (otherlv_0= Schedule ( (lv_timerId_1_0= ruleExpression ) ) ( (lv_generateStatement_2_0= ruleGenerateStatement ) ) ( (lv_type_3_0= ruleScheduleType ) ) ( (lv_time_4_0= ruleExpression ) ) (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )? )
            {
            // InternalMASLParser.g:6575:2: (otherlv_0= Schedule ( (lv_timerId_1_0= ruleExpression ) ) ( (lv_generateStatement_2_0= ruleGenerateStatement ) ) ( (lv_type_3_0= ruleScheduleType ) ) ( (lv_time_4_0= ruleExpression ) ) (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )? )
            // InternalMASLParser.g:6576:3: otherlv_0= Schedule ( (lv_timerId_1_0= ruleExpression ) ) ( (lv_generateStatement_2_0= ruleGenerateStatement ) ) ( (lv_type_3_0= ruleScheduleType ) ) ( (lv_time_4_0= ruleExpression ) ) (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )?
            {
            otherlv_0=(Token)match(input,Schedule,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getScheduleStatementAccess().getScheduleKeyword_0());
              		
            }
            // InternalMASLParser.g:6580:3: ( (lv_timerId_1_0= ruleExpression ) )
            // InternalMASLParser.g:6581:4: (lv_timerId_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6581:4: (lv_timerId_1_0= ruleExpression )
            // InternalMASLParser.g:6582:5: lv_timerId_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTimerIdExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_92);
            lv_timerId_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
              					}
              					set(
              						current,
              						"timerId",
              						lv_timerId_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6599:3: ( (lv_generateStatement_2_0= ruleGenerateStatement ) )
            // InternalMASLParser.g:6600:4: (lv_generateStatement_2_0= ruleGenerateStatement )
            {
            // InternalMASLParser.g:6600:4: (lv_generateStatement_2_0= ruleGenerateStatement )
            // InternalMASLParser.g:6601:5: lv_generateStatement_2_0= ruleGenerateStatement
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getScheduleStatementAccess().getGenerateStatementGenerateStatementParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_93);
            lv_generateStatement_2_0=ruleGenerateStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
              					}
              					set(
              						current,
              						"generateStatement",
              						lv_generateStatement_2_0,
              						"org.xtuml.bp.xtext.masl.MASL.GenerateStatement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6618:3: ( (lv_type_3_0= ruleScheduleType ) )
            // InternalMASLParser.g:6619:4: (lv_type_3_0= ruleScheduleType )
            {
            // InternalMASLParser.g:6619:4: (lv_type_3_0= ruleScheduleType )
            // InternalMASLParser.g:6620:5: lv_type_3_0= ruleScheduleType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTypeScheduleTypeEnumRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_39);
            lv_type_3_0=ruleScheduleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.ScheduleType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6637:3: ( (lv_time_4_0= ruleExpression ) )
            // InternalMASLParser.g:6638:4: (lv_time_4_0= ruleExpression )
            {
            // InternalMASLParser.g:6638:4: (lv_time_4_0= ruleExpression )
            // InternalMASLParser.g:6639:5: lv_time_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTimeExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_time_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
              					}
              					set(
              						current,
              						"time",
              						lv_time_4_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:6656:3: (otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) ) )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==Delta) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // InternalMASLParser.g:6657:4: otherlv_5= Delta ( (lv_period_6_0= ruleExpression ) )
                    {
                    otherlv_5=(Token)match(input,Delta,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getScheduleStatementAccess().getDeltaKeyword_5_0());
                      			
                    }
                    // InternalMASLParser.g:6661:4: ( (lv_period_6_0= ruleExpression ) )
                    // InternalMASLParser.g:6662:5: (lv_period_6_0= ruleExpression )
                    {
                    // InternalMASLParser.g:6662:5: (lv_period_6_0= ruleExpression )
                    // InternalMASLParser.g:6663:6: lv_period_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getScheduleStatementAccess().getPeriodExpressionParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_period_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
                      						}
                      						set(
                      							current,
                      							"period",
                      							lv_period_6_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScheduleStatement"


    // $ANTLR start "entryRuleCancelTimerStatement"
    // InternalMASLParser.g:6685:1: entryRuleCancelTimerStatement returns [EObject current=null] : iv_ruleCancelTimerStatement= ruleCancelTimerStatement EOF ;
    public final EObject entryRuleCancelTimerStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCancelTimerStatement = null;


        try {
            // InternalMASLParser.g:6685:61: (iv_ruleCancelTimerStatement= ruleCancelTimerStatement EOF )
            // InternalMASLParser.g:6686:2: iv_ruleCancelTimerStatement= ruleCancelTimerStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCancelTimerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCancelTimerStatement=ruleCancelTimerStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCancelTimerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCancelTimerStatement"


    // $ANTLR start "ruleCancelTimerStatement"
    // InternalMASLParser.g:6692:1: ruleCancelTimerStatement returns [EObject current=null] : (otherlv_0= Cancel ( (lv_timerId_1_0= ruleExpression ) ) ) ;
    public final EObject ruleCancelTimerStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_timerId_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6698:2: ( (otherlv_0= Cancel ( (lv_timerId_1_0= ruleExpression ) ) ) )
            // InternalMASLParser.g:6699:2: (otherlv_0= Cancel ( (lv_timerId_1_0= ruleExpression ) ) )
            {
            // InternalMASLParser.g:6699:2: (otherlv_0= Cancel ( (lv_timerId_1_0= ruleExpression ) ) )
            // InternalMASLParser.g:6700:3: otherlv_0= Cancel ( (lv_timerId_1_0= ruleExpression ) )
            {
            otherlv_0=(Token)match(input,Cancel,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCancelTimerStatementAccess().getCancelKeyword_0());
              		
            }
            // InternalMASLParser.g:6704:3: ( (lv_timerId_1_0= ruleExpression ) )
            // InternalMASLParser.g:6705:4: (lv_timerId_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6705:4: (lv_timerId_1_0= ruleExpression )
            // InternalMASLParser.g:6706:5: lv_timerId_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCancelTimerStatementAccess().getTimerIdExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_timerId_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCancelTimerStatementRule());
              					}
              					set(
              						current,
              						"timerId",
              						lv_timerId_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCancelTimerStatement"


    // $ANTLR start "entryRuleGenerateStatement"
    // InternalMASLParser.g:6727:1: entryRuleGenerateStatement returns [EObject current=null] : iv_ruleGenerateStatement= ruleGenerateStatement EOF ;
    public final EObject entryRuleGenerateStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGenerateStatement = null;


        try {
            // InternalMASLParser.g:6727:58: (iv_ruleGenerateStatement= ruleGenerateStatement EOF )
            // InternalMASLParser.g:6728:2: iv_ruleGenerateStatement= ruleGenerateStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGenerateStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGenerateStatement=ruleGenerateStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGenerateStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGenerateStatement"


    // $ANTLR start "ruleGenerateStatement"
    // InternalMASLParser.g:6734:1: ruleGenerateStatement returns [EObject current=null] : (otherlv_0= Generate ( ( ( ruleScopedName ) ) otherlv_2= FullStop )? ( (otherlv_3= RULE_ID ) ) otherlv_4= LeftParenthesis ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )? otherlv_8= RightParenthesis (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )? ) ;
    public final EObject ruleGenerateStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_arguments_5_0 = null;

        EObject lv_arguments_7_0 = null;

        EObject lv_to_10_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6740:2: ( (otherlv_0= Generate ( ( ( ruleScopedName ) ) otherlv_2= FullStop )? ( (otherlv_3= RULE_ID ) ) otherlv_4= LeftParenthesis ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )? otherlv_8= RightParenthesis (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )? ) )
            // InternalMASLParser.g:6741:2: (otherlv_0= Generate ( ( ( ruleScopedName ) ) otherlv_2= FullStop )? ( (otherlv_3= RULE_ID ) ) otherlv_4= LeftParenthesis ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )? otherlv_8= RightParenthesis (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )? )
            {
            // InternalMASLParser.g:6741:2: (otherlv_0= Generate ( ( ( ruleScopedName ) ) otherlv_2= FullStop )? ( (otherlv_3= RULE_ID ) ) otherlv_4= LeftParenthesis ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )? otherlv_8= RightParenthesis (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )? )
            // InternalMASLParser.g:6742:3: otherlv_0= Generate ( ( ( ruleScopedName ) ) otherlv_2= FullStop )? ( (otherlv_3= RULE_ID ) ) otherlv_4= LeftParenthesis ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )? otherlv_8= RightParenthesis (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )?
            {
            otherlv_0=(Token)match(input,Generate,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getGenerateStatementAccess().getGenerateKeyword_0());
              		
            }
            // InternalMASLParser.g:6746:3: ( ( ( ruleScopedName ) ) otherlv_2= FullStop )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==RULE_ID) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==ColonColon||LA127_1==FullStop) ) {
                    alt127=1;
                }
            }
            switch (alt127) {
                case 1 :
                    // InternalMASLParser.g:6747:4: ( ( ruleScopedName ) ) otherlv_2= FullStop
                    {
                    // InternalMASLParser.g:6747:4: ( ( ruleScopedName ) )
                    // InternalMASLParser.g:6748:5: ( ruleScopedName )
                    {
                    // InternalMASLParser.g:6748:5: ( ruleScopedName )
                    // InternalMASLParser.g:6749:6: ruleScopedName
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getGenerateStatementRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getGenerateStatementAccess().getObjectObjectDeclarationCrossReference_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_64);
                    ruleScopedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getGenerateStatementAccess().getFullStopKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalMASLParser.g:6768:3: ( (otherlv_3= RULE_ID ) )
            // InternalMASLParser.g:6769:4: (otherlv_3= RULE_ID )
            {
            // InternalMASLParser.g:6769:4: (otherlv_3= RULE_ID )
            // InternalMASLParser.g:6770:5: otherlv_3= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getGenerateStatementRule());
              					}
              				
            }
            otherlv_3=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getGenerateStatementAccess().getEventEventDefinitionCrossReference_2_0());
              				
            }

            }


            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getGenerateStatementAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalMASLParser.g:6785:3: ( ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )* )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Dictionary||LA129_0==Anonymous||LA129_0==Find_only||(LA129_0>=Find_all && LA129_0<=Find_one)||LA129_0==Instance||LA129_0==Sequence||LA129_0==Console||(LA129_0>=FILE && LA129_0<=LINE)||LA129_0==Create||(LA129_0>=Unlink && LA129_0<=Array)||(LA129_0>=False && LA129_0<=Flush)||LA129_0==Endl||LA129_0==Find||LA129_0==Link||LA129_0==Null||(LA129_0>=This && LA129_0<=True)||LA129_0==Abs||LA129_0==Bag||LA129_0==Not||LA129_0==Set||LA129_0==LeftParenthesis||LA129_0==PlusSign||LA129_0==HyphenMinus||(LA129_0>=RULE_ID && LA129_0<=RULE_TIMESTAMP)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalMASLParser.g:6786:4: ( (lv_arguments_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )*
                    {
                    // InternalMASLParser.g:6786:4: ( (lv_arguments_5_0= ruleExpression ) )
                    // InternalMASLParser.g:6787:5: (lv_arguments_5_0= ruleExpression )
                    {
                    // InternalMASLParser.g:6787:5: (lv_arguments_5_0= ruleExpression )
                    // InternalMASLParser.g:6788:6: lv_arguments_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getGenerateStatementAccess().getArgumentsExpressionParserRuleCall_4_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_arguments_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
                      						}
                      						add(
                      							current,
                      							"arguments",
                      							lv_arguments_5_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:6805:4: (otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) ) )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==Comma) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // InternalMASLParser.g:6806:5: otherlv_6= Comma ( (lv_arguments_7_0= ruleExpression ) )
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_6, grammarAccess.getGenerateStatementAccess().getCommaKeyword_4_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:6810:5: ( (lv_arguments_7_0= ruleExpression ) )
                    	    // InternalMASLParser.g:6811:6: (lv_arguments_7_0= ruleExpression )
                    	    {
                    	    // InternalMASLParser.g:6811:6: (lv_arguments_7_0= ruleExpression )
                    	    // InternalMASLParser.g:6812:7: lv_arguments_7_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getGenerateStatementAccess().getArgumentsExpressionParserRuleCall_4_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_arguments_7_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"arguments",
                    	      								lv_arguments_7_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getGenerateStatementAccess().getRightParenthesisKeyword_5());
              		
            }
            // InternalMASLParser.g:6835:3: (otherlv_9= To ( (lv_to_10_0= ruleExpression ) ) )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==To) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // InternalMASLParser.g:6836:4: otherlv_9= To ( (lv_to_10_0= ruleExpression ) )
                    {
                    otherlv_9=(Token)match(input,To,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getGenerateStatementAccess().getToKeyword_6_0());
                      			
                    }
                    // InternalMASLParser.g:6840:4: ( (lv_to_10_0= ruleExpression ) )
                    // InternalMASLParser.g:6841:5: (lv_to_10_0= ruleExpression )
                    {
                    // InternalMASLParser.g:6841:5: (lv_to_10_0= ruleExpression )
                    // InternalMASLParser.g:6842:6: lv_to_10_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getGenerateStatementAccess().getToExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_to_10_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
                      						}
                      						set(
                      							current,
                      							"to",
                      							lv_to_10_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGenerateStatement"


    // $ANTLR start "entryRuleIfStatement"
    // InternalMASLParser.g:6864:1: entryRuleIfStatement returns [EObject current=null] : iv_ruleIfStatement= ruleIfStatement EOF ;
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIfStatement = null;


        try {
            // InternalMASLParser.g:6864:52: (iv_ruleIfStatement= ruleIfStatement EOF )
            // InternalMASLParser.g:6865:2: iv_ruleIfStatement= ruleIfStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIfStatement"


    // $ANTLR start "ruleIfStatement"
    // InternalMASLParser.g:6871:1: ruleIfStatement returns [EObject current=null] : (otherlv_0= If ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ( (lv_elseIfs_4_0= ruleElsifBlock ) )* ( (lv_else_5_0= ruleElseBlock ) )? otherlv_6= End (otherlv_7= If )? ) ;
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_condition_1_0 = null;

        EObject lv_statements_3_0 = null;

        EObject lv_elseIfs_4_0 = null;

        EObject lv_else_5_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6877:2: ( (otherlv_0= If ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ( (lv_elseIfs_4_0= ruleElsifBlock ) )* ( (lv_else_5_0= ruleElseBlock ) )? otherlv_6= End (otherlv_7= If )? ) )
            // InternalMASLParser.g:6878:2: (otherlv_0= If ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ( (lv_elseIfs_4_0= ruleElsifBlock ) )* ( (lv_else_5_0= ruleElseBlock ) )? otherlv_6= End (otherlv_7= If )? )
            {
            // InternalMASLParser.g:6878:2: (otherlv_0= If ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ( (lv_elseIfs_4_0= ruleElsifBlock ) )* ( (lv_else_5_0= ruleElseBlock ) )? otherlv_6= End (otherlv_7= If )? )
            // InternalMASLParser.g:6879:3: otherlv_0= If ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ( (lv_elseIfs_4_0= ruleElsifBlock ) )* ( (lv_else_5_0= ruleElseBlock ) )? otherlv_6= End (otherlv_7= If )?
            {
            otherlv_0=(Token)match(input,If,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            // InternalMASLParser.g:6883:3: ( (lv_condition_1_0= ruleExpression ) )
            // InternalMASLParser.g:6884:4: (lv_condition_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6884:4: (lv_condition_1_0= ruleExpression )
            // InternalMASLParser.g:6885:5: lv_condition_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_96);
            lv_condition_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"condition",
              						lv_condition_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Then,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getThenKeyword_2());
              		
            }
            // InternalMASLParser.g:6906:3: ( (lv_statements_3_0= ruleAbstractStatement ) )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==Dictionary||LA131_0==Anonymous||LA131_0==Find_only||(LA131_0>=Find_all && LA131_0<=Find_one)||(LA131_0>=Generate && LA131_0<=Instance)||(LA131_0>=Schedule && LA131_0<=Sequence)||(LA131_0>=Console && LA131_0<=Declare)||(LA131_0>=FILE && LA131_0<=LINE)||(LA131_0>=Cancel && LA131_0<=Delete)||LA131_0==Return||(LA131_0>=Unlink && LA131_0<=Delay)||LA131_0==Erase||(LA131_0>=False && LA131_0<=Raise)||(LA131_0>=While && LA131_0<=Case)||LA131_0==Endl||(LA131_0>=Exit && LA131_0<=Find)||LA131_0==Link||LA131_0==Null||(LA131_0>=This && LA131_0<=True)||LA131_0==Abs||LA131_0==Bag||LA131_0==For||LA131_0==Not||LA131_0==Set||LA131_0==If||LA131_0==LeftParenthesis||LA131_0==PlusSign||LA131_0==HyphenMinus||(LA131_0>=RULE_ID && LA131_0<=RULE_TIMESTAMP)) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // InternalMASLParser.g:6907:4: (lv_statements_3_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:6907:4: (lv_statements_3_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:6908:5: lv_statements_3_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getIfStatementAccess().getStatementsAbstractStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_statements_3_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getIfStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            // InternalMASLParser.g:6925:3: ( (lv_elseIfs_4_0= ruleElsifBlock ) )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==Elsif) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // InternalMASLParser.g:6926:4: (lv_elseIfs_4_0= ruleElsifBlock )
            	    {
            	    // InternalMASLParser.g:6926:4: (lv_elseIfs_4_0= ruleElsifBlock )
            	    // InternalMASLParser.g:6927:5: lv_elseIfs_4_0= ruleElsifBlock
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfsElsifBlockParserRuleCall_4_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_elseIfs_4_0=ruleElsifBlock();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getIfStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elseIfs",
            	      						lv_elseIfs_4_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.ElsifBlock");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            // InternalMASLParser.g:6944:3: ( (lv_else_5_0= ruleElseBlock ) )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==Else) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // InternalMASLParser.g:6945:4: (lv_else_5_0= ruleElseBlock )
                    {
                    // InternalMASLParser.g:6945:4: (lv_else_5_0= ruleElseBlock )
                    // InternalMASLParser.g:6946:5: lv_else_5_0= ruleElseBlock
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getIfStatementAccess().getElseElseBlockParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_99);
                    lv_else_5_0=ruleElseBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      					}
                      					set(
                      						current,
                      						"else",
                      						lv_else_5_0,
                      						"org.xtuml.bp.xtext.masl.MASL.ElseBlock");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,End,FOLLOW_100); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getEndKeyword_6());
              		
            }
            // InternalMASLParser.g:6967:3: (otherlv_7= If )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==If) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // InternalMASLParser.g:6968:4: otherlv_7= If
                    {
                    otherlv_7=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getIfKeyword_7());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIfStatement"


    // $ANTLR start "entryRuleElsifBlock"
    // InternalMASLParser.g:6977:1: entryRuleElsifBlock returns [EObject current=null] : iv_ruleElsifBlock= ruleElsifBlock EOF ;
    public final EObject entryRuleElsifBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElsifBlock = null;


        try {
            // InternalMASLParser.g:6977:51: (iv_ruleElsifBlock= ruleElsifBlock EOF )
            // InternalMASLParser.g:6978:2: iv_ruleElsifBlock= ruleElsifBlock EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElsifBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElsifBlock=ruleElsifBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElsifBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleElsifBlock"


    // $ANTLR start "ruleElsifBlock"
    // InternalMASLParser.g:6984:1: ruleElsifBlock returns [EObject current=null] : (otherlv_0= Elsif ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleElsifBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_condition_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:6990:2: ( (otherlv_0= Elsif ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:6991:2: (otherlv_0= Elsif ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:6991:2: (otherlv_0= Elsif ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:6992:3: otherlv_0= Elsif ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Then ( (lv_statements_3_0= ruleAbstractStatement ) )*
            {
            otherlv_0=(Token)match(input,Elsif,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getElsifBlockAccess().getElsifKeyword_0());
              		
            }
            // InternalMASLParser.g:6996:3: ( (lv_condition_1_0= ruleExpression ) )
            // InternalMASLParser.g:6997:4: (lv_condition_1_0= ruleExpression )
            {
            // InternalMASLParser.g:6997:4: (lv_condition_1_0= ruleExpression )
            // InternalMASLParser.g:6998:5: lv_condition_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getElsifBlockAccess().getConditionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_96);
            lv_condition_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getElsifBlockRule());
              					}
              					set(
              						current,
              						"condition",
              						lv_condition_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Then,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getElsifBlockAccess().getThenKeyword_2());
              		
            }
            // InternalMASLParser.g:7019:3: ( (lv_statements_3_0= ruleAbstractStatement ) )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==Dictionary||LA135_0==Anonymous||LA135_0==Find_only||(LA135_0>=Find_all && LA135_0<=Find_one)||(LA135_0>=Generate && LA135_0<=Instance)||(LA135_0>=Schedule && LA135_0<=Sequence)||(LA135_0>=Console && LA135_0<=Declare)||(LA135_0>=FILE && LA135_0<=LINE)||(LA135_0>=Cancel && LA135_0<=Delete)||LA135_0==Return||(LA135_0>=Unlink && LA135_0<=Delay)||LA135_0==Erase||(LA135_0>=False && LA135_0<=Raise)||(LA135_0>=While && LA135_0<=Case)||LA135_0==Endl||(LA135_0>=Exit && LA135_0<=Find)||LA135_0==Link||LA135_0==Null||(LA135_0>=This && LA135_0<=True)||LA135_0==Abs||LA135_0==Bag||LA135_0==For||LA135_0==Not||LA135_0==Set||LA135_0==If||LA135_0==LeftParenthesis||LA135_0==PlusSign||LA135_0==HyphenMinus||(LA135_0>=RULE_ID && LA135_0<=RULE_TIMESTAMP)) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // InternalMASLParser.g:7020:4: (lv_statements_3_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7020:4: (lv_statements_3_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7021:5: lv_statements_3_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getElsifBlockAccess().getStatementsAbstractStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_3_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getElsifBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleElsifBlock"


    // $ANTLR start "entryRuleElseBlock"
    // InternalMASLParser.g:7042:1: entryRuleElseBlock returns [EObject current=null] : iv_ruleElseBlock= ruleElseBlock EOF ;
    public final EObject entryRuleElseBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElseBlock = null;


        try {
            // InternalMASLParser.g:7042:50: (iv_ruleElseBlock= ruleElseBlock EOF )
            // InternalMASLParser.g:7043:2: iv_ruleElseBlock= ruleElseBlock EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElseBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElseBlock=ruleElseBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElseBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleElseBlock"


    // $ANTLR start "ruleElseBlock"
    // InternalMASLParser.g:7049:1: ruleElseBlock returns [EObject current=null] : ( () otherlv_1= Else ( (lv_statements_2_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleElseBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7055:2: ( ( () otherlv_1= Else ( (lv_statements_2_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:7056:2: ( () otherlv_1= Else ( (lv_statements_2_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:7056:2: ( () otherlv_1= Else ( (lv_statements_2_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:7057:3: () otherlv_1= Else ( (lv_statements_2_0= ruleAbstractStatement ) )*
            {
            // InternalMASLParser.g:7057:3: ()
            // InternalMASLParser.g:7058:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getElseBlockAccess().getElseBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Else,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getElseBlockAccess().getElseKeyword_1());
              		
            }
            // InternalMASLParser.g:7068:3: ( (lv_statements_2_0= ruleAbstractStatement ) )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==Dictionary||LA136_0==Anonymous||LA136_0==Find_only||(LA136_0>=Find_all && LA136_0<=Find_one)||(LA136_0>=Generate && LA136_0<=Instance)||(LA136_0>=Schedule && LA136_0<=Sequence)||(LA136_0>=Console && LA136_0<=Declare)||(LA136_0>=FILE && LA136_0<=LINE)||(LA136_0>=Cancel && LA136_0<=Delete)||LA136_0==Return||(LA136_0>=Unlink && LA136_0<=Delay)||LA136_0==Erase||(LA136_0>=False && LA136_0<=Raise)||(LA136_0>=While && LA136_0<=Case)||LA136_0==Endl||(LA136_0>=Exit && LA136_0<=Find)||LA136_0==Link||LA136_0==Null||(LA136_0>=This && LA136_0<=True)||LA136_0==Abs||LA136_0==Bag||LA136_0==For||LA136_0==Not||LA136_0==Set||LA136_0==If||LA136_0==LeftParenthesis||LA136_0==PlusSign||LA136_0==HyphenMinus||(LA136_0>=RULE_ID && LA136_0<=RULE_TIMESTAMP)) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // InternalMASLParser.g:7069:4: (lv_statements_2_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7069:4: (lv_statements_2_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7070:5: lv_statements_2_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getElseBlockAccess().getStatementsAbstractStatementParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_2_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getElseBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleElseBlock"


    // $ANTLR start "entryRuleWhileStatement"
    // InternalMASLParser.g:7091:1: entryRuleWhileStatement returns [EObject current=null] : iv_ruleWhileStatement= ruleWhileStatement EOF ;
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhileStatement = null;


        try {
            // InternalMASLParser.g:7091:55: (iv_ruleWhileStatement= ruleWhileStatement EOF )
            // InternalMASLParser.g:7092:2: iv_ruleWhileStatement= ruleWhileStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWhileStatement"


    // $ANTLR start "ruleWhileStatement"
    // InternalMASLParser.g:7098:1: ruleWhileStatement returns [EObject current=null] : (otherlv_0= While ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Loop ( (lv_statements_3_0= ruleAbstractStatement ) )* otherlv_4= End (otherlv_5= Loop )? ) ;
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_condition_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7104:2: ( (otherlv_0= While ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Loop ( (lv_statements_3_0= ruleAbstractStatement ) )* otherlv_4= End (otherlv_5= Loop )? ) )
            // InternalMASLParser.g:7105:2: (otherlv_0= While ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Loop ( (lv_statements_3_0= ruleAbstractStatement ) )* otherlv_4= End (otherlv_5= Loop )? )
            {
            // InternalMASLParser.g:7105:2: (otherlv_0= While ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Loop ( (lv_statements_3_0= ruleAbstractStatement ) )* otherlv_4= End (otherlv_5= Loop )? )
            // InternalMASLParser.g:7106:3: otherlv_0= While ( (lv_condition_1_0= ruleExpression ) ) otherlv_2= Loop ( (lv_statements_3_0= ruleAbstractStatement ) )* otherlv_4= End (otherlv_5= Loop )?
            {
            otherlv_0=(Token)match(input,While,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              		
            }
            // InternalMASLParser.g:7110:3: ( (lv_condition_1_0= ruleExpression ) )
            // InternalMASLParser.g:7111:4: (lv_condition_1_0= ruleExpression )
            {
            // InternalMASLParser.g:7111:4: (lv_condition_1_0= ruleExpression )
            // InternalMASLParser.g:7112:5: lv_condition_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_102);
            lv_condition_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"condition",
              						lv_condition_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Loop,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getLoopKeyword_2());
              		
            }
            // InternalMASLParser.g:7133:3: ( (lv_statements_3_0= ruleAbstractStatement ) )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==Dictionary||LA137_0==Anonymous||LA137_0==Find_only||(LA137_0>=Find_all && LA137_0<=Find_one)||(LA137_0>=Generate && LA137_0<=Instance)||(LA137_0>=Schedule && LA137_0<=Sequence)||(LA137_0>=Console && LA137_0<=Declare)||(LA137_0>=FILE && LA137_0<=LINE)||(LA137_0>=Cancel && LA137_0<=Delete)||LA137_0==Return||(LA137_0>=Unlink && LA137_0<=Delay)||LA137_0==Erase||(LA137_0>=False && LA137_0<=Raise)||(LA137_0>=While && LA137_0<=Case)||LA137_0==Endl||(LA137_0>=Exit && LA137_0<=Find)||LA137_0==Link||LA137_0==Null||(LA137_0>=This && LA137_0<=True)||LA137_0==Abs||LA137_0==Bag||LA137_0==For||LA137_0==Not||LA137_0==Set||LA137_0==If||LA137_0==LeftParenthesis||LA137_0==PlusSign||LA137_0==HyphenMinus||(LA137_0>=RULE_ID && LA137_0<=RULE_TIMESTAMP)) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // InternalMASLParser.g:7134:4: (lv_statements_3_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7134:4: (lv_statements_3_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7135:5: lv_statements_3_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementsAbstractStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_103);
            	    lv_statements_3_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            otherlv_4=(Token)match(input,End,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getEndKeyword_4());
              		
            }
            // InternalMASLParser.g:7156:3: (otherlv_5= Loop )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==Loop) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // InternalMASLParser.g:7157:4: otherlv_5= Loop
                    {
                    otherlv_5=(Token)match(input,Loop,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getWhileStatementAccess().getLoopKeyword_5());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWhileStatement"


    // $ANTLR start "entryRuleCaseStatement"
    // InternalMASLParser.g:7166:1: entryRuleCaseStatement returns [EObject current=null] : iv_ruleCaseStatement= ruleCaseStatement EOF ;
    public final EObject entryRuleCaseStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseStatement = null;


        try {
            // InternalMASLParser.g:7166:54: (iv_ruleCaseStatement= ruleCaseStatement EOF )
            // InternalMASLParser.g:7167:2: iv_ruleCaseStatement= ruleCaseStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseStatement=ruleCaseStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseStatement"


    // $ANTLR start "ruleCaseStatement"
    // InternalMASLParser.g:7173:1: ruleCaseStatement returns [EObject current=null] : (otherlv_0= Case ( (lv_value_1_0= ruleExpression ) ) otherlv_2= Is ( (lv_alternatives_3_0= ruleCaseAlternative ) )* ( (lv_default_4_0= ruleCaseOthers ) )? otherlv_5= End (otherlv_6= Case )? ) ;
    public final EObject ruleCaseStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_value_1_0 = null;

        EObject lv_alternatives_3_0 = null;

        EObject lv_default_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7179:2: ( (otherlv_0= Case ( (lv_value_1_0= ruleExpression ) ) otherlv_2= Is ( (lv_alternatives_3_0= ruleCaseAlternative ) )* ( (lv_default_4_0= ruleCaseOthers ) )? otherlv_5= End (otherlv_6= Case )? ) )
            // InternalMASLParser.g:7180:2: (otherlv_0= Case ( (lv_value_1_0= ruleExpression ) ) otherlv_2= Is ( (lv_alternatives_3_0= ruleCaseAlternative ) )* ( (lv_default_4_0= ruleCaseOthers ) )? otherlv_5= End (otherlv_6= Case )? )
            {
            // InternalMASLParser.g:7180:2: (otherlv_0= Case ( (lv_value_1_0= ruleExpression ) ) otherlv_2= Is ( (lv_alternatives_3_0= ruleCaseAlternative ) )* ( (lv_default_4_0= ruleCaseOthers ) )? otherlv_5= End (otherlv_6= Case )? )
            // InternalMASLParser.g:7181:3: otherlv_0= Case ( (lv_value_1_0= ruleExpression ) ) otherlv_2= Is ( (lv_alternatives_3_0= ruleCaseAlternative ) )* ( (lv_default_4_0= ruleCaseOthers ) )? otherlv_5= End (otherlv_6= Case )?
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCaseKeyword_0());
              		
            }
            // InternalMASLParser.g:7185:3: ( (lv_value_1_0= ruleExpression ) )
            // InternalMASLParser.g:7186:4: (lv_value_1_0= ruleExpression )
            {
            // InternalMASLParser.g:7186:4: (lv_value_1_0= ruleExpression )
            // InternalMASLParser.g:7187:5: lv_value_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseStatementAccess().getValueExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_16);
            lv_value_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseStatementRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Is,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getIsKeyword_2());
              		
            }
            // InternalMASLParser.g:7208:3: ( (lv_alternatives_3_0= ruleCaseAlternative ) )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==When) ) {
                    int LA139_1 = input.LA(2);

                    if ( (LA139_1==Dictionary||LA139_1==Anonymous||LA139_1==Find_only||(LA139_1>=Find_all && LA139_1<=Find_one)||LA139_1==Instance||LA139_1==Sequence||LA139_1==Console||(LA139_1>=FILE && LA139_1<=LINE)||LA139_1==Create||(LA139_1>=Unlink && LA139_1<=Array)||(LA139_1>=False && LA139_1<=Flush)||LA139_1==Endl||LA139_1==Find||LA139_1==Link||LA139_1==Null||(LA139_1>=This && LA139_1<=True)||LA139_1==Abs||LA139_1==Bag||LA139_1==Not||LA139_1==Set||LA139_1==LeftParenthesis||LA139_1==PlusSign||LA139_1==HyphenMinus||(LA139_1>=RULE_ID && LA139_1<=RULE_TIMESTAMP)) ) {
                        alt139=1;
                    }


                }


                switch (alt139) {
            	case 1 :
            	    // InternalMASLParser.g:7209:4: (lv_alternatives_3_0= ruleCaseAlternative )
            	    {
            	    // InternalMASLParser.g:7209:4: (lv_alternatives_3_0= ruleCaseAlternative )
            	    // InternalMASLParser.g:7210:5: lv_alternatives_3_0= ruleCaseAlternative
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseStatementAccess().getAlternativesCaseAlternativeParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_105);
            	    lv_alternatives_3_0=ruleCaseAlternative();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"alternatives",
            	      						lv_alternatives_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.CaseAlternative");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            // InternalMASLParser.g:7227:3: ( (lv_default_4_0= ruleCaseOthers ) )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==When) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // InternalMASLParser.g:7228:4: (lv_default_4_0= ruleCaseOthers )
                    {
                    // InternalMASLParser.g:7228:4: (lv_default_4_0= ruleCaseOthers )
                    // InternalMASLParser.g:7229:5: lv_default_4_0= ruleCaseOthers
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCaseStatementAccess().getDefaultCaseOthersParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_99);
                    lv_default_4_0=ruleCaseOthers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCaseStatementRule());
                      					}
                      					set(
                      						current,
                      						"default",
                      						lv_default_4_0,
                      						"org.xtuml.bp.xtext.masl.MASL.CaseOthers");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,End,FOLLOW_106); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getCaseStatementAccess().getEndKeyword_5());
              		
            }
            // InternalMASLParser.g:7250:3: (otherlv_6= Case )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==Case) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // InternalMASLParser.g:7251:4: otherlv_6= Case
                    {
                    otherlv_6=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getCaseKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseStatement"


    // $ANTLR start "entryRuleCaseAlternative"
    // InternalMASLParser.g:7260:1: entryRuleCaseAlternative returns [EObject current=null] : iv_ruleCaseAlternative= ruleCaseAlternative EOF ;
    public final EObject entryRuleCaseAlternative() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseAlternative = null;


        try {
            // InternalMASLParser.g:7260:56: (iv_ruleCaseAlternative= ruleCaseAlternative EOF )
            // InternalMASLParser.g:7261:2: iv_ruleCaseAlternative= ruleCaseAlternative EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseAlternativeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseAlternative=ruleCaseAlternative();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseAlternative; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseAlternative"


    // $ANTLR start "ruleCaseAlternative"
    // InternalMASLParser.g:7267:1: ruleCaseAlternative returns [EObject current=null] : (otherlv_0= When ( (lv_choices_1_0= ruleExpression ) ) (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )* otherlv_4= EqualsSignGreaterThanSign ( (lv_statements_5_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleCaseAlternative() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_choices_1_0 = null;

        EObject lv_choices_3_0 = null;

        EObject lv_statements_5_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7273:2: ( (otherlv_0= When ( (lv_choices_1_0= ruleExpression ) ) (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )* otherlv_4= EqualsSignGreaterThanSign ( (lv_statements_5_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:7274:2: (otherlv_0= When ( (lv_choices_1_0= ruleExpression ) ) (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )* otherlv_4= EqualsSignGreaterThanSign ( (lv_statements_5_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:7274:2: (otherlv_0= When ( (lv_choices_1_0= ruleExpression ) ) (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )* otherlv_4= EqualsSignGreaterThanSign ( (lv_statements_5_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:7275:3: otherlv_0= When ( (lv_choices_1_0= ruleExpression ) ) (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )* otherlv_4= EqualsSignGreaterThanSign ( (lv_statements_5_0= ruleAbstractStatement ) )*
            {
            otherlv_0=(Token)match(input,When,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseAlternativeAccess().getWhenKeyword_0());
              		
            }
            // InternalMASLParser.g:7279:3: ( (lv_choices_1_0= ruleExpression ) )
            // InternalMASLParser.g:7280:4: (lv_choices_1_0= ruleExpression )
            {
            // InternalMASLParser.g:7280:4: (lv_choices_1_0= ruleExpression )
            // InternalMASLParser.g:7281:5: lv_choices_1_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseAlternativeAccess().getChoicesExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_choices_1_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
              					}
              					add(
              						current,
              						"choices",
              						lv_choices_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:7298:3: (otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) ) )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==VerticalLine) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // InternalMASLParser.g:7299:4: otherlv_2= VerticalLine ( (lv_choices_3_0= ruleExpression ) )
            	    {
            	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getCaseAlternativeAccess().getVerticalLineKeyword_2_0());
            	      			
            	    }
            	    // InternalMASLParser.g:7303:4: ( (lv_choices_3_0= ruleExpression ) )
            	    // InternalMASLParser.g:7304:5: (lv_choices_3_0= ruleExpression )
            	    {
            	    // InternalMASLParser.g:7304:5: (lv_choices_3_0= ruleExpression )
            	    // InternalMASLParser.g:7305:6: lv_choices_3_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCaseAlternativeAccess().getChoicesExpressionParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_107);
            	    lv_choices_3_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
            	      						}
            	      						add(
            	      							current,
            	      							"choices",
            	      							lv_choices_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.Expression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_3());
              		
            }
            // InternalMASLParser.g:7327:3: ( (lv_statements_5_0= ruleAbstractStatement ) )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==Dictionary||LA143_0==Anonymous||LA143_0==Find_only||(LA143_0>=Find_all && LA143_0<=Find_one)||(LA143_0>=Generate && LA143_0<=Instance)||(LA143_0>=Schedule && LA143_0<=Sequence)||(LA143_0>=Console && LA143_0<=Declare)||(LA143_0>=FILE && LA143_0<=LINE)||(LA143_0>=Cancel && LA143_0<=Delete)||LA143_0==Return||(LA143_0>=Unlink && LA143_0<=Delay)||LA143_0==Erase||(LA143_0>=False && LA143_0<=Raise)||(LA143_0>=While && LA143_0<=Case)||LA143_0==Endl||(LA143_0>=Exit && LA143_0<=Find)||LA143_0==Link||LA143_0==Null||(LA143_0>=This && LA143_0<=True)||LA143_0==Abs||LA143_0==Bag||LA143_0==For||LA143_0==Not||LA143_0==Set||LA143_0==If||LA143_0==LeftParenthesis||LA143_0==PlusSign||LA143_0==HyphenMinus||(LA143_0>=RULE_ID && LA143_0<=RULE_TIMESTAMP)) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // InternalMASLParser.g:7328:4: (lv_statements_5_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7328:4: (lv_statements_5_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7329:5: lv_statements_5_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseAlternativeAccess().getStatementsAbstractStatementParserRuleCall_4_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_5_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_5_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseAlternative"


    // $ANTLR start "entryRuleCaseOthers"
    // InternalMASLParser.g:7350:1: entryRuleCaseOthers returns [EObject current=null] : iv_ruleCaseOthers= ruleCaseOthers EOF ;
    public final EObject entryRuleCaseOthers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseOthers = null;


        try {
            // InternalMASLParser.g:7350:51: (iv_ruleCaseOthers= ruleCaseOthers EOF )
            // InternalMASLParser.g:7351:2: iv_ruleCaseOthers= ruleCaseOthers EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseOthersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseOthers=ruleCaseOthers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseOthers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCaseOthers"


    // $ANTLR start "ruleCaseOthers"
    // InternalMASLParser.g:7357:1: ruleCaseOthers returns [EObject current=null] : ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleCaseOthers() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_statements_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7363:2: ( ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:7364:2: ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:7364:2: ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:7365:3: () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )*
            {
            // InternalMASLParser.g:7365:3: ()
            // InternalMASLParser.g:7366:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCaseOthersAccess().getCaseOthersAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,When,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCaseOthersAccess().getWhenKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Others,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseOthersAccess().getOthersKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getCaseOthersAccess().getEqualsSignGreaterThanSignKeyword_3());
              		
            }
            // InternalMASLParser.g:7384:3: ( (lv_statements_4_0= ruleAbstractStatement ) )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==Dictionary||LA144_0==Anonymous||LA144_0==Find_only||(LA144_0>=Find_all && LA144_0<=Find_one)||(LA144_0>=Generate && LA144_0<=Instance)||(LA144_0>=Schedule && LA144_0<=Sequence)||(LA144_0>=Console && LA144_0<=Declare)||(LA144_0>=FILE && LA144_0<=LINE)||(LA144_0>=Cancel && LA144_0<=Delete)||LA144_0==Return||(LA144_0>=Unlink && LA144_0<=Delay)||LA144_0==Erase||(LA144_0>=False && LA144_0<=Raise)||(LA144_0>=While && LA144_0<=Case)||LA144_0==Endl||(LA144_0>=Exit && LA144_0<=Find)||LA144_0==Link||LA144_0==Null||(LA144_0>=This && LA144_0<=True)||LA144_0==Abs||LA144_0==Bag||LA144_0==For||LA144_0==Not||LA144_0==Set||LA144_0==If||LA144_0==LeftParenthesis||LA144_0==PlusSign||LA144_0==HyphenMinus||(LA144_0>=RULE_ID && LA144_0<=RULE_TIMESTAMP)) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // InternalMASLParser.g:7385:4: (lv_statements_4_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7385:4: (lv_statements_4_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7386:5: lv_statements_4_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseOthersAccess().getStatementsAbstractStatementParserRuleCall_4_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_4_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseOthersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_4_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCaseOthers"


    // $ANTLR start "entryRuleForStatement"
    // InternalMASLParser.g:7407:1: entryRuleForStatement returns [EObject current=null] : iv_ruleForStatement= ruleForStatement EOF ;
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForStatement = null;


        try {
            // InternalMASLParser.g:7407:53: (iv_ruleForStatement= ruleForStatement EOF )
            // InternalMASLParser.g:7408:2: iv_ruleForStatement= ruleForStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleForStatement"


    // $ANTLR start "ruleForStatement"
    // InternalMASLParser.g:7414:1: ruleForStatement returns [EObject current=null] : (otherlv_0= For ( (lv_variable_1_0= ruleLoopVariable ) ) otherlv_2= In ( (lv_reverse_3_0= Reverse ) )? ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= Loop ( (lv_statements_6_0= ruleAbstractStatement ) )* otherlv_7= End (otherlv_8= Loop )? ) ;
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_reverse_3_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        EObject lv_variable_1_0 = null;

        EObject lv_expression_4_0 = null;

        EObject lv_statements_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7420:2: ( (otherlv_0= For ( (lv_variable_1_0= ruleLoopVariable ) ) otherlv_2= In ( (lv_reverse_3_0= Reverse ) )? ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= Loop ( (lv_statements_6_0= ruleAbstractStatement ) )* otherlv_7= End (otherlv_8= Loop )? ) )
            // InternalMASLParser.g:7421:2: (otherlv_0= For ( (lv_variable_1_0= ruleLoopVariable ) ) otherlv_2= In ( (lv_reverse_3_0= Reverse ) )? ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= Loop ( (lv_statements_6_0= ruleAbstractStatement ) )* otherlv_7= End (otherlv_8= Loop )? )
            {
            // InternalMASLParser.g:7421:2: (otherlv_0= For ( (lv_variable_1_0= ruleLoopVariable ) ) otherlv_2= In ( (lv_reverse_3_0= Reverse ) )? ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= Loop ( (lv_statements_6_0= ruleAbstractStatement ) )* otherlv_7= End (otherlv_8= Loop )? )
            // InternalMASLParser.g:7422:3: otherlv_0= For ( (lv_variable_1_0= ruleLoopVariable ) ) otherlv_2= In ( (lv_reverse_3_0= Reverse ) )? ( (lv_expression_4_0= ruleExpression ) ) otherlv_5= Loop ( (lv_statements_6_0= ruleAbstractStatement ) )* otherlv_7= End (otherlv_8= Loop )?
            {
            otherlv_0=(Token)match(input,For,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
              		
            }
            // InternalMASLParser.g:7426:3: ( (lv_variable_1_0= ruleLoopVariable ) )
            // InternalMASLParser.g:7427:4: (lv_variable_1_0= ruleLoopVariable )
            {
            // InternalMASLParser.g:7427:4: (lv_variable_1_0= ruleLoopVariable )
            // InternalMASLParser.g:7428:5: lv_variable_1_0= ruleLoopVariable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getVariableLoopVariableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_109);
            lv_variable_1_0=ruleLoopVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"variable",
              						lv_variable_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.LoopVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,In,FOLLOW_110); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getInKeyword_2());
              		
            }
            // InternalMASLParser.g:7449:3: ( (lv_reverse_3_0= Reverse ) )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==Reverse) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // InternalMASLParser.g:7450:4: (lv_reverse_3_0= Reverse )
                    {
                    // InternalMASLParser.g:7450:4: (lv_reverse_3_0= Reverse )
                    // InternalMASLParser.g:7451:5: lv_reverse_3_0= Reverse
                    {
                    lv_reverse_3_0=(Token)match(input,Reverse,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_reverse_3_0, grammarAccess.getForStatementAccess().getReverseReverseKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "reverse", true, "reverse");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:7463:3: ( (lv_expression_4_0= ruleExpression ) )
            // InternalMASLParser.g:7464:4: (lv_expression_4_0= ruleExpression )
            {
            // InternalMASLParser.g:7464:4: (lv_expression_4_0= ruleExpression )
            // InternalMASLParser.g:7465:5: lv_expression_4_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_102);
            lv_expression_4_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.xtuml.bp.xtext.masl.MASL.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,Loop,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getLoopKeyword_5());
              		
            }
            // InternalMASLParser.g:7486:3: ( (lv_statements_6_0= ruleAbstractStatement ) )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==Dictionary||LA146_0==Anonymous||LA146_0==Find_only||(LA146_0>=Find_all && LA146_0<=Find_one)||(LA146_0>=Generate && LA146_0<=Instance)||(LA146_0>=Schedule && LA146_0<=Sequence)||(LA146_0>=Console && LA146_0<=Declare)||(LA146_0>=FILE && LA146_0<=LINE)||(LA146_0>=Cancel && LA146_0<=Delete)||LA146_0==Return||(LA146_0>=Unlink && LA146_0<=Delay)||LA146_0==Erase||(LA146_0>=False && LA146_0<=Raise)||(LA146_0>=While && LA146_0<=Case)||LA146_0==Endl||(LA146_0>=Exit && LA146_0<=Find)||LA146_0==Link||LA146_0==Null||(LA146_0>=This && LA146_0<=True)||LA146_0==Abs||LA146_0==Bag||LA146_0==For||LA146_0==Not||LA146_0==Set||LA146_0==If||LA146_0==LeftParenthesis||LA146_0==PlusSign||LA146_0==HyphenMinus||(LA146_0>=RULE_ID && LA146_0<=RULE_TIMESTAMP)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // InternalMASLParser.g:7487:4: (lv_statements_6_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7487:4: (lv_statements_6_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7488:5: lv_statements_6_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getForStatementAccess().getStatementsAbstractStatementParserRuleCall_6_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_103);
            	    lv_statements_6_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getForStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_6_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            otherlv_7=(Token)match(input,End,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getEndKeyword_7());
              		
            }
            // InternalMASLParser.g:7509:3: (otherlv_8= Loop )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==Loop) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // InternalMASLParser.g:7510:4: otherlv_8= Loop
                    {
                    otherlv_8=(Token)match(input,Loop,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getForStatementAccess().getLoopKeyword_8());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleForStatement"


    // $ANTLR start "entryRuleLoopVariable"
    // InternalMASLParser.g:7519:1: entryRuleLoopVariable returns [EObject current=null] : iv_ruleLoopVariable= ruleLoopVariable EOF ;
    public final EObject entryRuleLoopVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLoopVariable = null;


        try {
            // InternalMASLParser.g:7519:53: (iv_ruleLoopVariable= ruleLoopVariable EOF )
            // InternalMASLParser.g:7520:2: iv_ruleLoopVariable= ruleLoopVariable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLoopVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLoopVariable=ruleLoopVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLoopVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLoopVariable"


    // $ANTLR start "ruleLoopVariable"
    // InternalMASLParser.g:7526:1: ruleLoopVariable returns [EObject current=null] : ( (lv_name_0_0= RULE_ID ) ) ;
    public final EObject ruleLoopVariable() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:7532:2: ( ( (lv_name_0_0= RULE_ID ) ) )
            // InternalMASLParser.g:7533:2: ( (lv_name_0_0= RULE_ID ) )
            {
            // InternalMASLParser.g:7533:2: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:7534:3: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:7534:3: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:7535:4: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_name_0_0, grammarAccess.getLoopVariableAccess().getNameIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getLoopVariableRule());
              				}
              				setWithLastConsumed(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLoopVariable"


    // $ANTLR start "entryRuleCodeBlockStatement"
    // InternalMASLParser.g:7554:1: entryRuleCodeBlockStatement returns [EObject current=null] : iv_ruleCodeBlockStatement= ruleCodeBlockStatement EOF ;
    public final EObject entryRuleCodeBlockStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCodeBlockStatement = null;


        try {
            // InternalMASLParser.g:7554:59: (iv_ruleCodeBlockStatement= ruleCodeBlockStatement EOF )
            // InternalMASLParser.g:7555:2: iv_ruleCodeBlockStatement= ruleCodeBlockStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCodeBlockStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCodeBlockStatement=ruleCodeBlockStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCodeBlockStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCodeBlockStatement"


    // $ANTLR start "ruleCodeBlockStatement"
    // InternalMASLParser.g:7561:1: ruleCodeBlockStatement returns [EObject current=null] : ( (otherlv_0= Declare )? this_CodeBlock_1= ruleCodeBlock ) ;
    public final EObject ruleCodeBlockStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_CodeBlock_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7567:2: ( ( (otherlv_0= Declare )? this_CodeBlock_1= ruleCodeBlock ) )
            // InternalMASLParser.g:7568:2: ( (otherlv_0= Declare )? this_CodeBlock_1= ruleCodeBlock )
            {
            // InternalMASLParser.g:7568:2: ( (otherlv_0= Declare )? this_CodeBlock_1= ruleCodeBlock )
            // InternalMASLParser.g:7569:3: (otherlv_0= Declare )? this_CodeBlock_1= ruleCodeBlock
            {
            // InternalMASLParser.g:7569:3: (otherlv_0= Declare )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==Declare) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // InternalMASLParser.g:7570:4: otherlv_0= Declare
                    {
                    otherlv_0=(Token)match(input,Declare,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getCodeBlockStatementAccess().getDeclareKeyword_0());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCodeBlockStatementAccess().getCodeBlockParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_CodeBlock_1=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_CodeBlock_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCodeBlockStatement"


    // $ANTLR start "entryRuleCodeBlock"
    // InternalMASLParser.g:7587:1: entryRuleCodeBlock returns [EObject current=null] : iv_ruleCodeBlock= ruleCodeBlock EOF ;
    public final EObject entryRuleCodeBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCodeBlock = null;


        try {
            // InternalMASLParser.g:7587:50: (iv_ruleCodeBlock= ruleCodeBlock EOF )
            // InternalMASLParser.g:7588:2: iv_ruleCodeBlock= ruleCodeBlock EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCodeBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCodeBlock=ruleCodeBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCodeBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCodeBlock"


    // $ANTLR start "ruleCodeBlock"
    // InternalMASLParser.g:7594:1: ruleCodeBlock returns [EObject current=null] : ( () ( (lv_variables_1_0= ruleVariableDeclaration ) )* otherlv_2= Begin ( (lv_statements_3_0= ruleAbstractStatement ) )* (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )? otherlv_7= End ) ;
    public final EObject ruleCodeBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        EObject lv_variables_1_0 = null;

        EObject lv_statements_3_0 = null;

        EObject lv_exceptionHandler_5_0 = null;

        EObject lv_defaultHandler_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7600:2: ( ( () ( (lv_variables_1_0= ruleVariableDeclaration ) )* otherlv_2= Begin ( (lv_statements_3_0= ruleAbstractStatement ) )* (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )? otherlv_7= End ) )
            // InternalMASLParser.g:7601:2: ( () ( (lv_variables_1_0= ruleVariableDeclaration ) )* otherlv_2= Begin ( (lv_statements_3_0= ruleAbstractStatement ) )* (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )? otherlv_7= End )
            {
            // InternalMASLParser.g:7601:2: ( () ( (lv_variables_1_0= ruleVariableDeclaration ) )* otherlv_2= Begin ( (lv_statements_3_0= ruleAbstractStatement ) )* (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )? otherlv_7= End )
            // InternalMASLParser.g:7602:3: () ( (lv_variables_1_0= ruleVariableDeclaration ) )* otherlv_2= Begin ( (lv_statements_3_0= ruleAbstractStatement ) )* (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )? otherlv_7= End
            {
            // InternalMASLParser.g:7602:3: ()
            // InternalMASLParser.g:7603:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCodeBlockAccess().getCodeBlockAction_0(),
              					current);
              			
            }

            }

            // InternalMASLParser.g:7609:3: ( (lv_variables_1_0= ruleVariableDeclaration ) )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==RULE_ID) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // InternalMASLParser.g:7610:4: (lv_variables_1_0= ruleVariableDeclaration )
            	    {
            	    // InternalMASLParser.g:7610:4: (lv_variables_1_0= ruleVariableDeclaration )
            	    // InternalMASLParser.g:7611:5: lv_variables_1_0= ruleVariableDeclaration
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCodeBlockAccess().getVariablesVariableDeclarationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_84);
            	    lv_variables_1_0=ruleVariableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCodeBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"variables",
            	      						lv_variables_1_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.VariableDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            otherlv_2=(Token)match(input,Begin,FOLLOW_111); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCodeBlockAccess().getBeginKeyword_2());
              		
            }
            // InternalMASLParser.g:7632:3: ( (lv_statements_3_0= ruleAbstractStatement ) )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==Dictionary||LA150_0==Anonymous||LA150_0==Find_only||(LA150_0>=Find_all && LA150_0<=Find_one)||(LA150_0>=Generate && LA150_0<=Instance)||(LA150_0>=Schedule && LA150_0<=Sequence)||(LA150_0>=Console && LA150_0<=Declare)||(LA150_0>=FILE && LA150_0<=LINE)||(LA150_0>=Cancel && LA150_0<=Delete)||LA150_0==Return||(LA150_0>=Unlink && LA150_0<=Delay)||LA150_0==Erase||(LA150_0>=False && LA150_0<=Raise)||(LA150_0>=While && LA150_0<=Case)||LA150_0==Endl||(LA150_0>=Exit && LA150_0<=Find)||LA150_0==Link||LA150_0==Null||(LA150_0>=This && LA150_0<=True)||LA150_0==Abs||LA150_0==Bag||LA150_0==For||LA150_0==Not||LA150_0==Set||LA150_0==If||LA150_0==LeftParenthesis||LA150_0==PlusSign||LA150_0==HyphenMinus||(LA150_0>=RULE_ID && LA150_0<=RULE_TIMESTAMP)) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // InternalMASLParser.g:7633:4: (lv_statements_3_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7633:4: (lv_statements_3_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7634:5: lv_statements_3_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCodeBlockAccess().getStatementsAbstractStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_111);
            	    lv_statements_3_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCodeBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // InternalMASLParser.g:7651:3: (otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )? )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==Exception) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // InternalMASLParser.g:7652:4: otherlv_4= Exception ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )* ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )?
                    {
                    otherlv_4=(Token)match(input,Exception,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getCodeBlockAccess().getExceptionKeyword_4_0());
                      			
                    }
                    // InternalMASLParser.g:7656:4: ( (lv_exceptionHandler_5_0= ruleExceptionHandler ) )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==When) ) {
                            int LA151_1 = input.LA(2);

                            if ( (LA151_1==RULE_ID) ) {
                                alt151=1;
                            }


                        }


                        switch (alt151) {
                    	case 1 :
                    	    // InternalMASLParser.g:7657:5: (lv_exceptionHandler_5_0= ruleExceptionHandler )
                    	    {
                    	    // InternalMASLParser.g:7657:5: (lv_exceptionHandler_5_0= ruleExceptionHandler )
                    	    // InternalMASLParser.g:7658:6: lv_exceptionHandler_5_0= ruleExceptionHandler
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getCodeBlockAccess().getExceptionHandlerExceptionHandlerParserRuleCall_4_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_105);
                    	    lv_exceptionHandler_5_0=ruleExceptionHandler();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getCodeBlockRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"exceptionHandler",
                    	      							lv_exceptionHandler_5_0,
                    	      							"org.xtuml.bp.xtext.masl.MASL.ExceptionHandler");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);

                    // InternalMASLParser.g:7675:4: ( (lv_defaultHandler_6_0= ruleDefaultExceptionHandler ) )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==When) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // InternalMASLParser.g:7676:5: (lv_defaultHandler_6_0= ruleDefaultExceptionHandler )
                            {
                            // InternalMASLParser.g:7676:5: (lv_defaultHandler_6_0= ruleDefaultExceptionHandler )
                            // InternalMASLParser.g:7677:6: lv_defaultHandler_6_0= ruleDefaultExceptionHandler
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getCodeBlockAccess().getDefaultHandlerDefaultExceptionHandlerParserRuleCall_4_2_0());
                              					
                            }
                            pushFollow(FOLLOW_99);
                            lv_defaultHandler_6_0=ruleDefaultExceptionHandler();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getCodeBlockRule());
                              						}
                              						set(
                              							current,
                              							"defaultHandler",
                              							lv_defaultHandler_6_0,
                              							"org.xtuml.bp.xtext.masl.MASL.DefaultExceptionHandler");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,End,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getCodeBlockAccess().getEndKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCodeBlock"


    // $ANTLR start "entryRuleVariableDeclaration"
    // InternalMASLParser.g:7703:1: entryRuleVariableDeclaration returns [EObject current=null] : iv_ruleVariableDeclaration= ruleVariableDeclaration EOF ;
    public final EObject entryRuleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclaration = null;


        try {
            // InternalMASLParser.g:7703:60: (iv_ruleVariableDeclaration= ruleVariableDeclaration EOF )
            // InternalMASLParser.g:7704:2: iv_ruleVariableDeclaration= ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclaration=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // InternalMASLParser.g:7710:1: ruleVariableDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_readOnly_2_0= Readonly ) )? ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) ) (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) ;
    public final EObject ruleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token lv_readOnly_2_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_type_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject this_PragmaList_7 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7716:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_readOnly_2_0= Readonly ) )? ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) ) (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] ) )
            // InternalMASLParser.g:7717:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_readOnly_2_0= Readonly ) )? ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) ) (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            {
            // InternalMASLParser.g:7717:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_readOnly_2_0= Readonly ) )? ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) ) (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current] )
            // InternalMASLParser.g:7718:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_readOnly_2_0= Readonly ) )? ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) ) (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )? otherlv_6= Semicolon this_PragmaList_7= rulePragmaList[$current]
            {
            // InternalMASLParser.g:7718:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalMASLParser.g:7719:4: (lv_name_0_0= RULE_ID )
            {
            // InternalMASLParser.g:7719:4: (lv_name_0_0= RULE_ID )
            // InternalMASLParser.g:7720:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getVariableDeclarationRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
              		
            }
            // InternalMASLParser.g:7740:3: ( (lv_readOnly_2_0= Readonly ) )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==Readonly) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // InternalMASLParser.g:7741:4: (lv_readOnly_2_0= Readonly )
                    {
                    // InternalMASLParser.g:7741:4: (lv_readOnly_2_0= Readonly )
                    // InternalMASLParser.g:7742:5: lv_readOnly_2_0= Readonly
                    {
                    lv_readOnly_2_0=(Token)match(input,Readonly,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_readOnly_2_0, grammarAccess.getVariableDeclarationAccess().getReadOnlyReadonlyKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getVariableDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "readOnly", lv_readOnly_2_0, "readonly");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:7754:3: ( (lv_type_3_0= ruleAbstractTypeReferenceWithCA ) )
            // InternalMASLParser.g:7755:4: (lv_type_3_0= ruleAbstractTypeReferenceWithCA )
            {
            // InternalMASLParser.g:7755:4: (lv_type_3_0= ruleAbstractTypeReferenceWithCA )
            // InternalMASLParser.g:7756:5: lv_type_3_0= ruleAbstractTypeReferenceWithCA
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeAbstractTypeReferenceWithCAParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_type_3_0=ruleAbstractTypeReferenceWithCA();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithCA");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:7773:3: (otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) ) )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==ColonEqualsSign) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // InternalMASLParser.g:7774:4: otherlv_4= ColonEqualsSign ( (lv_expression_5_0= ruleExpression ) )
                    {
                    otherlv_4=(Token)match(input,ColonEqualsSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_4_0());
                      			
                    }
                    // InternalMASLParser.g:7778:4: ( (lv_expression_5_0= ruleExpression ) )
                    // InternalMASLParser.g:7779:5: (lv_expression_5_0= ruleExpression )
                    {
                    // InternalMASLParser.g:7779:5: (lv_expression_5_0= ruleExpression )
                    // InternalMASLParser.g:7780:6: lv_expression_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_6);
                    lv_expression_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,Semicolon,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getPragmaListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            this_PragmaList_7=rulePragmaList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PragmaList_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleExceptionHandler"
    // InternalMASLParser.g:7817:1: entryRuleExceptionHandler returns [EObject current=null] : iv_ruleExceptionHandler= ruleExceptionHandler EOF ;
    public final EObject entryRuleExceptionHandler() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExceptionHandler = null;


        try {
            // InternalMASLParser.g:7817:57: (iv_ruleExceptionHandler= ruleExceptionHandler EOF )
            // InternalMASLParser.g:7818:2: iv_ruleExceptionHandler= ruleExceptionHandler EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExceptionHandlerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExceptionHandler=ruleExceptionHandler();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExceptionHandler; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExceptionHandler"


    // $ANTLR start "ruleExceptionHandler"
    // InternalMASLParser.g:7824:1: ruleExceptionHandler returns [EObject current=null] : (otherlv_0= When ( ( ruleScopedName ) ) otherlv_2= EqualsSignGreaterThanSign ( (lv_statements_3_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleExceptionHandler() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7830:2: ( (otherlv_0= When ( ( ruleScopedName ) ) otherlv_2= EqualsSignGreaterThanSign ( (lv_statements_3_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:7831:2: (otherlv_0= When ( ( ruleScopedName ) ) otherlv_2= EqualsSignGreaterThanSign ( (lv_statements_3_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:7831:2: (otherlv_0= When ( ( ruleScopedName ) ) otherlv_2= EqualsSignGreaterThanSign ( (lv_statements_3_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:7832:3: otherlv_0= When ( ( ruleScopedName ) ) otherlv_2= EqualsSignGreaterThanSign ( (lv_statements_3_0= ruleAbstractStatement ) )*
            {
            otherlv_0=(Token)match(input,When,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExceptionHandlerAccess().getWhenKeyword_0());
              		
            }
            // InternalMASLParser.g:7836:3: ( ( ruleScopedName ) )
            // InternalMASLParser.g:7837:4: ( ruleScopedName )
            {
            // InternalMASLParser.g:7837:4: ( ruleScopedName )
            // InternalMASLParser.g:7838:5: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExceptionHandlerRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExceptionHandlerAccess().getExceptionExceptionDeclarationCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_74);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getExceptionHandlerAccess().getEqualsSignGreaterThanSignKeyword_2());
              		
            }
            // InternalMASLParser.g:7856:3: ( (lv_statements_3_0= ruleAbstractStatement ) )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==Dictionary||LA156_0==Anonymous||LA156_0==Find_only||(LA156_0>=Find_all && LA156_0<=Find_one)||(LA156_0>=Generate && LA156_0<=Instance)||(LA156_0>=Schedule && LA156_0<=Sequence)||(LA156_0>=Console && LA156_0<=Declare)||(LA156_0>=FILE && LA156_0<=LINE)||(LA156_0>=Cancel && LA156_0<=Delete)||LA156_0==Return||(LA156_0>=Unlink && LA156_0<=Delay)||LA156_0==Erase||(LA156_0>=False && LA156_0<=Raise)||(LA156_0>=While && LA156_0<=Case)||LA156_0==Endl||(LA156_0>=Exit && LA156_0<=Find)||LA156_0==Link||LA156_0==Null||(LA156_0>=This && LA156_0<=True)||LA156_0==Abs||LA156_0==Bag||LA156_0==For||LA156_0==Not||LA156_0==Set||LA156_0==If||LA156_0==LeftParenthesis||LA156_0==PlusSign||LA156_0==HyphenMinus||(LA156_0>=RULE_ID && LA156_0<=RULE_TIMESTAMP)) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // InternalMASLParser.g:7857:4: (lv_statements_3_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7857:4: (lv_statements_3_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7858:5: lv_statements_3_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExceptionHandlerAccess().getStatementsAbstractStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_3_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExceptionHandlerRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExceptionHandler"


    // $ANTLR start "entryRuleDefaultExceptionHandler"
    // InternalMASLParser.g:7879:1: entryRuleDefaultExceptionHandler returns [EObject current=null] : iv_ruleDefaultExceptionHandler= ruleDefaultExceptionHandler EOF ;
    public final EObject entryRuleDefaultExceptionHandler() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaultExceptionHandler = null;


        try {
            // InternalMASLParser.g:7879:64: (iv_ruleDefaultExceptionHandler= ruleDefaultExceptionHandler EOF )
            // InternalMASLParser.g:7880:2: iv_ruleDefaultExceptionHandler= ruleDefaultExceptionHandler EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultExceptionHandlerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultExceptionHandler=ruleDefaultExceptionHandler();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultExceptionHandler; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDefaultExceptionHandler"


    // $ANTLR start "ruleDefaultExceptionHandler"
    // InternalMASLParser.g:7886:1: ruleDefaultExceptionHandler returns [EObject current=null] : ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* ) ;
    public final EObject ruleDefaultExceptionHandler() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_statements_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7892:2: ( ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* ) )
            // InternalMASLParser.g:7893:2: ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* )
            {
            // InternalMASLParser.g:7893:2: ( () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )* )
            // InternalMASLParser.g:7894:3: () otherlv_1= When otherlv_2= Others otherlv_3= EqualsSignGreaterThanSign ( (lv_statements_4_0= ruleAbstractStatement ) )*
            {
            // InternalMASLParser.g:7894:3: ()
            // InternalMASLParser.g:7895:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDefaultExceptionHandlerAccess().getDefaultExceptionHandlerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,When,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultExceptionHandlerAccess().getWhenKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Others,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultExceptionHandlerAccess().getOthersKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_101); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getDefaultExceptionHandlerAccess().getEqualsSignGreaterThanSignKeyword_3());
              		
            }
            // InternalMASLParser.g:7913:3: ( (lv_statements_4_0= ruleAbstractStatement ) )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==Dictionary||LA157_0==Anonymous||LA157_0==Find_only||(LA157_0>=Find_all && LA157_0<=Find_one)||(LA157_0>=Generate && LA157_0<=Instance)||(LA157_0>=Schedule && LA157_0<=Sequence)||(LA157_0>=Console && LA157_0<=Declare)||(LA157_0>=FILE && LA157_0<=LINE)||(LA157_0>=Cancel && LA157_0<=Delete)||LA157_0==Return||(LA157_0>=Unlink && LA157_0<=Delay)||LA157_0==Erase||(LA157_0>=False && LA157_0<=Raise)||(LA157_0>=While && LA157_0<=Case)||LA157_0==Endl||(LA157_0>=Exit && LA157_0<=Find)||LA157_0==Link||LA157_0==Null||(LA157_0>=This && LA157_0<=True)||LA157_0==Abs||LA157_0==Bag||LA157_0==For||LA157_0==Not||LA157_0==Set||LA157_0==If||LA157_0==LeftParenthesis||LA157_0==PlusSign||LA157_0==HyphenMinus||(LA157_0>=RULE_ID && LA157_0<=RULE_TIMESTAMP)) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // InternalMASLParser.g:7914:4: (lv_statements_4_0= ruleAbstractStatement )
            	    {
            	    // InternalMASLParser.g:7914:4: (lv_statements_4_0= ruleAbstractStatement )
            	    // InternalMASLParser.g:7915:5: lv_statements_4_0= ruleAbstractStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getDefaultExceptionHandlerAccess().getStatementsAbstractStatementParserRuleCall_4_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_statements_4_0=ruleAbstractStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultExceptionHandlerRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_4_0,
            	      						"org.xtuml.bp.xtext.masl.MASL.AbstractStatement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDefaultExceptionHandler"


    // $ANTLR start "entryRuleFindCondition"
    // InternalMASLParser.g:7936:1: entryRuleFindCondition returns [EObject current=null] : iv_ruleFindCondition= ruleFindCondition EOF ;
    public final EObject entryRuleFindCondition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindCondition = null;


        try {
            // InternalMASLParser.g:7936:54: (iv_ruleFindCondition= ruleFindCondition EOF )
            // InternalMASLParser.g:7937:2: iv_ruleFindCondition= ruleFindCondition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindConditionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindCondition=ruleFindCondition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindCondition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindCondition"


    // $ANTLR start "ruleFindCondition"
    // InternalMASLParser.g:7943:1: ruleFindCondition returns [EObject current=null] : this_FindLogicalOr_0= ruleFindLogicalOr ;
    public final EObject ruleFindCondition() throws RecognitionException {
        EObject current = null;

        EObject this_FindLogicalOr_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7949:2: (this_FindLogicalOr_0= ruleFindLogicalOr )
            // InternalMASLParser.g:7950:2: this_FindLogicalOr_0= ruleFindLogicalOr
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getFindConditionAccess().getFindLogicalOrParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_FindLogicalOr_0=ruleFindLogicalOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_FindLogicalOr_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindCondition"


    // $ANTLR start "entryRuleFindLogicalOr"
    // InternalMASLParser.g:7961:1: entryRuleFindLogicalOr returns [EObject current=null] : iv_ruleFindLogicalOr= ruleFindLogicalOr EOF ;
    public final EObject entryRuleFindLogicalOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindLogicalOr = null;


        try {
            // InternalMASLParser.g:7961:54: (iv_ruleFindLogicalOr= ruleFindLogicalOr EOF )
            // InternalMASLParser.g:7962:2: iv_ruleFindLogicalOr= ruleFindLogicalOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindLogicalOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindLogicalOr=ruleFindLogicalOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindLogicalOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindLogicalOr"


    // $ANTLR start "ruleFindLogicalOr"
    // InternalMASLParser.g:7968:1: ruleFindLogicalOr returns [EObject current=null] : (this_FindLogicalXor_0= ruleFindLogicalXor ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )* ) ;
    public final EObject ruleFindLogicalOr() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FindLogicalXor_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:7974:2: ( (this_FindLogicalXor_0= ruleFindLogicalXor ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )* ) )
            // InternalMASLParser.g:7975:2: (this_FindLogicalXor_0= ruleFindLogicalXor ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )* )
            {
            // InternalMASLParser.g:7975:2: (this_FindLogicalXor_0= ruleFindLogicalXor ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )* )
            // InternalMASLParser.g:7976:3: this_FindLogicalXor_0= ruleFindLogicalXor ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindLogicalOrAccess().getFindLogicalXorParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_113);
            this_FindLogicalXor_0=ruleFindLogicalXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindLogicalXor_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:7984:3: ( () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) ) )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==Or) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // InternalMASLParser.g:7985:4: () otherlv_2= Or ( (lv_rhs_3_0= ruleFindLogicalXor ) )
            	    {
            	    // InternalMASLParser.g:7985:4: ()
            	    // InternalMASLParser.g:7986:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getFindLogicalOrAccess().getLogicalOrLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,Or,FOLLOW_114); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getFindLogicalOrAccess().getOrKeyword_1_1());
            	      			
            	    }
            	    // InternalMASLParser.g:7996:4: ( (lv_rhs_3_0= ruleFindLogicalXor ) )
            	    // InternalMASLParser.g:7997:5: (lv_rhs_3_0= ruleFindLogicalXor )
            	    {
            	    // InternalMASLParser.g:7997:5: (lv_rhs_3_0= ruleFindLogicalXor )
            	    // InternalMASLParser.g:7998:6: lv_rhs_3_0= ruleFindLogicalXor
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFindLogicalOrAccess().getRhsFindLogicalXorParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_113);
            	    lv_rhs_3_0=ruleFindLogicalXor();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFindLogicalOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.FindLogicalXor");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindLogicalOr"


    // $ANTLR start "entryRuleFindLogicalXor"
    // InternalMASLParser.g:8020:1: entryRuleFindLogicalXor returns [EObject current=null] : iv_ruleFindLogicalXor= ruleFindLogicalXor EOF ;
    public final EObject entryRuleFindLogicalXor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindLogicalXor = null;


        try {
            // InternalMASLParser.g:8020:55: (iv_ruleFindLogicalXor= ruleFindLogicalXor EOF )
            // InternalMASLParser.g:8021:2: iv_ruleFindLogicalXor= ruleFindLogicalXor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindLogicalXorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindLogicalXor=ruleFindLogicalXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindLogicalXor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindLogicalXor"


    // $ANTLR start "ruleFindLogicalXor"
    // InternalMASLParser.g:8027:1: ruleFindLogicalXor returns [EObject current=null] : (this_FindLogicalAnd_0= ruleFindLogicalAnd ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )* ) ;
    public final EObject ruleFindLogicalXor() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FindLogicalAnd_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8033:2: ( (this_FindLogicalAnd_0= ruleFindLogicalAnd ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )* ) )
            // InternalMASLParser.g:8034:2: (this_FindLogicalAnd_0= ruleFindLogicalAnd ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )* )
            {
            // InternalMASLParser.g:8034:2: (this_FindLogicalAnd_0= ruleFindLogicalAnd ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )* )
            // InternalMASLParser.g:8035:3: this_FindLogicalAnd_0= ruleFindLogicalAnd ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindLogicalXorAccess().getFindLogicalAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_115);
            this_FindLogicalAnd_0=ruleFindLogicalAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindLogicalAnd_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8043:3: ( () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) ) )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==Xor) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // InternalMASLParser.g:8044:4: () otherlv_2= Xor ( (lv_rhs_3_0= ruleFindLogicalAnd ) )
            	    {
            	    // InternalMASLParser.g:8044:4: ()
            	    // InternalMASLParser.g:8045:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getFindLogicalXorAccess().getLogicalXorLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,Xor,FOLLOW_114); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getFindLogicalXorAccess().getXorKeyword_1_1());
            	      			
            	    }
            	    // InternalMASLParser.g:8055:4: ( (lv_rhs_3_0= ruleFindLogicalAnd ) )
            	    // InternalMASLParser.g:8056:5: (lv_rhs_3_0= ruleFindLogicalAnd )
            	    {
            	    // InternalMASLParser.g:8056:5: (lv_rhs_3_0= ruleFindLogicalAnd )
            	    // InternalMASLParser.g:8057:6: lv_rhs_3_0= ruleFindLogicalAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFindLogicalXorAccess().getRhsFindLogicalAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_rhs_3_0=ruleFindLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFindLogicalXorRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.FindLogicalAnd");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindLogicalXor"


    // $ANTLR start "entryRuleFindLogicalAnd"
    // InternalMASLParser.g:8079:1: entryRuleFindLogicalAnd returns [EObject current=null] : iv_ruleFindLogicalAnd= ruleFindLogicalAnd EOF ;
    public final EObject entryRuleFindLogicalAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindLogicalAnd = null;


        try {
            // InternalMASLParser.g:8079:55: (iv_ruleFindLogicalAnd= ruleFindLogicalAnd EOF )
            // InternalMASLParser.g:8080:2: iv_ruleFindLogicalAnd= ruleFindLogicalAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindLogicalAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindLogicalAnd=ruleFindLogicalAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindLogicalAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindLogicalAnd"


    // $ANTLR start "ruleFindLogicalAnd"
    // InternalMASLParser.g:8086:1: ruleFindLogicalAnd returns [EObject current=null] : (this_FindPrimary_0= ruleFindPrimary ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )* ) ;
    public final EObject ruleFindLogicalAnd() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FindPrimary_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8092:2: ( (this_FindPrimary_0= ruleFindPrimary ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )* ) )
            // InternalMASLParser.g:8093:2: (this_FindPrimary_0= ruleFindPrimary ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )* )
            {
            // InternalMASLParser.g:8093:2: (this_FindPrimary_0= ruleFindPrimary ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )* )
            // InternalMASLParser.g:8094:3: this_FindPrimary_0= ruleFindPrimary ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindLogicalAndAccess().getFindPrimaryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_116);
            this_FindPrimary_0=ruleFindPrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindPrimary_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8102:3: ( () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) ) )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==And) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // InternalMASLParser.g:8103:4: () otherlv_2= And ( (lv_rhs_3_0= ruleFindPrimary ) )
            	    {
            	    // InternalMASLParser.g:8103:4: ()
            	    // InternalMASLParser.g:8104:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getFindLogicalAndAccess().getLogicalAndLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,And,FOLLOW_114); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getFindLogicalAndAccess().getAndKeyword_1_1());
            	      			
            	    }
            	    // InternalMASLParser.g:8114:4: ( (lv_rhs_3_0= ruleFindPrimary ) )
            	    // InternalMASLParser.g:8115:5: (lv_rhs_3_0= ruleFindPrimary )
            	    {
            	    // InternalMASLParser.g:8115:5: (lv_rhs_3_0= ruleFindPrimary )
            	    // InternalMASLParser.g:8116:6: lv_rhs_3_0= ruleFindPrimary
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFindLogicalAndAccess().getRhsFindPrimaryParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_116);
            	    lv_rhs_3_0=ruleFindPrimary();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFindLogicalAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.FindPrimary");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindLogicalAnd"


    // $ANTLR start "entryRuleFindPrimary"
    // InternalMASLParser.g:8138:1: entryRuleFindPrimary returns [EObject current=null] : iv_ruleFindPrimary= ruleFindPrimary EOF ;
    public final EObject entryRuleFindPrimary() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindPrimary = null;


        try {
            // InternalMASLParser.g:8138:52: (iv_ruleFindPrimary= ruleFindPrimary EOF )
            // InternalMASLParser.g:8139:2: iv_ruleFindPrimary= ruleFindPrimary EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindPrimaryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindPrimary=ruleFindPrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindPrimary; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindPrimary"


    // $ANTLR start "ruleFindPrimary"
    // InternalMASLParser.g:8145:1: ruleFindPrimary returns [EObject current=null] : (this_FindEquality_0= ruleFindEquality | this_FindUnary_1= ruleFindUnary ) ;
    public final EObject ruleFindPrimary() throws RecognitionException {
        EObject current = null;

        EObject this_FindEquality_0 = null;

        EObject this_FindUnary_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8151:2: ( (this_FindEquality_0= ruleFindEquality | this_FindUnary_1= ruleFindUnary ) )
            // InternalMASLParser.g:8152:2: (this_FindEquality_0= ruleFindEquality | this_FindUnary_1= ruleFindUnary )
            {
            // InternalMASLParser.g:8152:2: (this_FindEquality_0= ruleFindEquality | this_FindUnary_1= ruleFindUnary )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==RULE_ID) ) {
                alt161=1;
            }
            else if ( (LA161_0==Not||LA161_0==LeftParenthesis) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // InternalMASLParser.g:8153:3: this_FindEquality_0= ruleFindEquality
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getFindPrimaryAccess().getFindEqualityParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FindEquality_0=ruleFindEquality();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FindEquality_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:8162:3: this_FindUnary_1= ruleFindUnary
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getFindPrimaryAccess().getFindUnaryParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FindUnary_1=ruleFindUnary();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FindUnary_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindPrimary"


    // $ANTLR start "entryRuleFindUnary"
    // InternalMASLParser.g:8174:1: entryRuleFindUnary returns [EObject current=null] : iv_ruleFindUnary= ruleFindUnary EOF ;
    public final EObject entryRuleFindUnary() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindUnary = null;


        try {
            // InternalMASLParser.g:8174:50: (iv_ruleFindUnary= ruleFindUnary EOF )
            // InternalMASLParser.g:8175:2: iv_ruleFindUnary= ruleFindUnary EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindUnaryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindUnary=ruleFindUnary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindUnary; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindUnary"


    // $ANTLR start "ruleFindUnary"
    // InternalMASLParser.g:8181:1: ruleFindUnary returns [EObject current=null] : ( (otherlv_0= Not this_FindUnary_1= ruleFindUnary ) | (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis ) ) ;
    public final EObject ruleFindUnary() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_FindUnary_1 = null;

        EObject this_FindCondition_3 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8187:2: ( ( (otherlv_0= Not this_FindUnary_1= ruleFindUnary ) | (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis ) ) )
            // InternalMASLParser.g:8188:2: ( (otherlv_0= Not this_FindUnary_1= ruleFindUnary ) | (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis ) )
            {
            // InternalMASLParser.g:8188:2: ( (otherlv_0= Not this_FindUnary_1= ruleFindUnary ) | (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis ) )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==Not) ) {
                alt162=1;
            }
            else if ( (LA162_0==LeftParenthesis) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // InternalMASLParser.g:8189:3: (otherlv_0= Not this_FindUnary_1= ruleFindUnary )
                    {
                    // InternalMASLParser.g:8189:3: (otherlv_0= Not this_FindUnary_1= ruleFindUnary )
                    // InternalMASLParser.g:8190:4: otherlv_0= Not this_FindUnary_1= ruleFindUnary
                    {
                    otherlv_0=(Token)match(input,Not,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getFindUnaryAccess().getNotKeyword_0_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFindUnaryAccess().getFindUnaryParserRuleCall_0_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FindUnary_1=ruleFindUnary();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FindUnary_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:8204:3: (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis )
                    {
                    // InternalMASLParser.g:8204:3: (otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis )
                    // InternalMASLParser.g:8205:4: otherlv_2= LeftParenthesis this_FindCondition_3= ruleFindCondition otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getFindUnaryAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFindUnaryAccess().getFindConditionParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_28);
                    this_FindCondition_3=ruleFindCondition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FindCondition_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getFindUnaryAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindUnary"


    // $ANTLR start "entryRuleFindEquality"
    // InternalMASLParser.g:8226:1: entryRuleFindEquality returns [EObject current=null] : iv_ruleFindEquality= ruleFindEquality EOF ;
    public final EObject entryRuleFindEquality() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindEquality = null;


        try {
            // InternalMASLParser.g:8226:53: (iv_ruleFindEquality= ruleFindEquality EOF )
            // InternalMASLParser.g:8227:2: iv_ruleFindEquality= ruleFindEquality EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindEqualityRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindEquality=ruleFindEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindEquality; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindEquality"


    // $ANTLR start "ruleFindEquality"
    // InternalMASLParser.g:8233:1: ruleFindEquality returns [EObject current=null] : (this_FindRelationExp_0= ruleFindRelationExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? ) ;
    public final EObject ruleFindEquality() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_FindRelationExp_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8239:2: ( (this_FindRelationExp_0= ruleFindRelationExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? ) )
            // InternalMASLParser.g:8240:2: (this_FindRelationExp_0= ruleFindRelationExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? )
            {
            // InternalMASLParser.g:8240:2: (this_FindRelationExp_0= ruleFindRelationExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? )
            // InternalMASLParser.g:8241:3: this_FindRelationExp_0= ruleFindRelationExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindEqualityAccess().getFindRelationExpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_FindRelationExp_0=ruleFindRelationExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindRelationExp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8249:3: ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==SolidusEqualsSign||LA164_0==EqualsSign) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // InternalMASLParser.g:8250:4: () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) )
                    {
                    // InternalMASLParser.g:8250:4: ()
                    // InternalMASLParser.g:8251:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getFindEqualityAccess().getEqualityLhsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:8257:4: ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) )
                    // InternalMASLParser.g:8258:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) )
                    {
                    // InternalMASLParser.g:8258:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) )
                    // InternalMASLParser.g:8259:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign )
                    {
                    // InternalMASLParser.g:8259:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign )
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==EqualsSign) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==SolidusEqualsSign) ) {
                        alt163=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }
                    switch (alt163) {
                        case 1 :
                            // InternalMASLParser.g:8260:7: lv_operator_2_1= EqualsSign
                            {
                            lv_operator_2_1=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_1, grammarAccess.getFindEqualityAccess().getOperatorEqualsSignKeyword_1_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindEqualityRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalMASLParser.g:8271:7: lv_operator_2_2= SolidusEqualsSign
                            {
                            lv_operator_2_2=(Token)match(input,SolidusEqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_2, grammarAccess.getFindEqualityAccess().getOperatorSolidusEqualsSignKeyword_1_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindEqualityRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalMASLParser.g:8284:4: ( (lv_rhs_3_0= ruleAdditiveExp ) )
                    // InternalMASLParser.g:8285:5: (lv_rhs_3_0= ruleAdditiveExp )
                    {
                    // InternalMASLParser.g:8285:5: (lv_rhs_3_0= ruleAdditiveExp )
                    // InternalMASLParser.g:8286:6: lv_rhs_3_0= ruleAdditiveExp
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFindEqualityAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=ruleAdditiveExp();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFindEqualityRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindEquality"


    // $ANTLR start "entryRuleFindRelationExp"
    // InternalMASLParser.g:8308:1: entryRuleFindRelationExp returns [EObject current=null] : iv_ruleFindRelationExp= ruleFindRelationExp EOF ;
    public final EObject entryRuleFindRelationExp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindRelationExp = null;


        try {
            // InternalMASLParser.g:8308:56: (iv_ruleFindRelationExp= ruleFindRelationExp EOF )
            // InternalMASLParser.g:8309:2: iv_ruleFindRelationExp= ruleFindRelationExp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindRelationExpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindRelationExp=ruleFindRelationExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindRelationExp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindRelationExp"


    // $ANTLR start "ruleFindRelationExp"
    // InternalMASLParser.g:8315:1: ruleFindRelationExp returns [EObject current=null] : (this_FindName_0= ruleFindName ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? ) ;
    public final EObject ruleFindRelationExp() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        EObject this_FindName_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8321:2: ( (this_FindName_0= ruleFindName ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? ) )
            // InternalMASLParser.g:8322:2: (this_FindName_0= ruleFindName ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? )
            {
            // InternalMASLParser.g:8322:2: (this_FindName_0= ruleFindName ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )? )
            // InternalMASLParser.g:8323:3: this_FindName_0= ruleFindName ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindRelationExpAccess().getFindNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_FindName_0=ruleFindName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8331:3: ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LessThanSignEqualsSign||LA166_0==GreaterThanSignEqualsSign||LA166_0==LessThanSign||LA166_0==GreaterThanSign) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // InternalMASLParser.g:8332:4: () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) )
                    {
                    // InternalMASLParser.g:8332:4: ()
                    // InternalMASLParser.g:8333:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getFindRelationExpAccess().getRelationalExpLhsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:8339:4: ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) )
                    // InternalMASLParser.g:8340:5: ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) )
                    {
                    // InternalMASLParser.g:8340:5: ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) )
                    // InternalMASLParser.g:8341:6: (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign )
                    {
                    // InternalMASLParser.g:8341:6: (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign )
                    int alt165=4;
                    switch ( input.LA(1) ) {
                    case LessThanSign:
                        {
                        alt165=1;
                        }
                        break;
                    case GreaterThanSign:
                        {
                        alt165=2;
                        }
                        break;
                    case LessThanSignEqualsSign:
                        {
                        alt165=3;
                        }
                        break;
                    case GreaterThanSignEqualsSign:
                        {
                        alt165=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }

                    switch (alt165) {
                        case 1 :
                            // InternalMASLParser.g:8342:7: lv_operator_2_1= LessThanSign
                            {
                            lv_operator_2_1=(Token)match(input,LessThanSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_1, grammarAccess.getFindRelationExpAccess().getOperatorLessThanSignKeyword_1_1_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindRelationExpRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalMASLParser.g:8353:7: lv_operator_2_2= GreaterThanSign
                            {
                            lv_operator_2_2=(Token)match(input,GreaterThanSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_2, grammarAccess.getFindRelationExpAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindRelationExpRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
                              						
                            }

                            }
                            break;
                        case 3 :
                            // InternalMASLParser.g:8364:7: lv_operator_2_3= LessThanSignEqualsSign
                            {
                            lv_operator_2_3=(Token)match(input,LessThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_3, grammarAccess.getFindRelationExpAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindRelationExpRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
                              						
                            }

                            }
                            break;
                        case 4 :
                            // InternalMASLParser.g:8375:7: lv_operator_2_4= GreaterThanSignEqualsSign
                            {
                            lv_operator_2_4=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_operator_2_4, grammarAccess.getFindRelationExpAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getFindRelationExpRule());
                              							}
                              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalMASLParser.g:8388:4: ( (lv_rhs_3_0= ruleAdditiveExp ) )
                    // InternalMASLParser.g:8389:5: (lv_rhs_3_0= ruleAdditiveExp )
                    {
                    // InternalMASLParser.g:8389:5: (lv_rhs_3_0= ruleAdditiveExp )
                    // InternalMASLParser.g:8390:6: lv_rhs_3_0= ruleAdditiveExp
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFindRelationExpAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=ruleAdditiveExp();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFindRelationExpRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindRelationExp"


    // $ANTLR start "entryRuleFindName"
    // InternalMASLParser.g:8412:1: entryRuleFindName returns [EObject current=null] : iv_ruleFindName= ruleFindName EOF ;
    public final EObject entryRuleFindName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindName = null;


        try {
            // InternalMASLParser.g:8412:49: (iv_ruleFindName= ruleFindName EOF )
            // InternalMASLParser.g:8413:2: iv_ruleFindName= ruleFindName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindName=ruleFindName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindName"


    // $ANTLR start "ruleFindName"
    // InternalMASLParser.g:8419:1: ruleFindName returns [EObject current=null] : (this_FindReceiverAttribute_0= ruleFindReceiverAttribute ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )* ) ;
    public final EObject ruleFindName() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject this_FindReceiverAttribute_0 = null;

        EObject lv_brackets_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8425:2: ( (this_FindReceiverAttribute_0= ruleFindReceiverAttribute ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )* ) )
            // InternalMASLParser.g:8426:2: (this_FindReceiverAttribute_0= ruleFindReceiverAttribute ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )* )
            {
            // InternalMASLParser.g:8426:2: (this_FindReceiverAttribute_0= ruleFindReceiverAttribute ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )* )
            // InternalMASLParser.g:8427:3: this_FindReceiverAttribute_0= ruleFindReceiverAttribute ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFindNameAccess().getFindReceiverAttributeParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_119);
            this_FindReceiverAttribute_0=ruleFindReceiverAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FindReceiverAttribute_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8435:3: ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) )*
            loop167:
            do {
                int alt167=3;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==FullStop) ) {
                    alt167=1;
                }
                else if ( (LA167_0==LeftSquareBracket) ) {
                    alt167=2;
                }


                switch (alt167) {
            	case 1 :
            	    // InternalMASLParser.g:8436:4: ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) )
            	    {
            	    // InternalMASLParser.g:8436:4: ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) )
            	    // InternalMASLParser.g:8437:5: () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) )
            	    {
            	    // InternalMASLParser.g:8437:5: ()
            	    // InternalMASLParser.g:8438:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getFindNameAccess().getSimpleFeatureCallReceiverAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_2=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_2, grammarAccess.getFindNameAccess().getFullStopKeyword_1_0_1());
            	      				
            	    }
            	    // InternalMASLParser.g:8448:5: ( (otherlv_3= RULE_ID ) )
            	    // InternalMASLParser.g:8449:6: (otherlv_3= RULE_ID )
            	    {
            	    // InternalMASLParser.g:8449:6: (otherlv_3= RULE_ID )
            	    // InternalMASLParser.g:8450:7: otherlv_3= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getFindNameRule());
            	      							}
            	      						
            	    }
            	    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_119); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							newLeafNode(otherlv_3, grammarAccess.getFindNameAccess().getFeatureAbstractFeatureCrossReference_1_0_2_0());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:8463:4: ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            	    {
            	    // InternalMASLParser.g:8463:4: ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            	    // InternalMASLParser.g:8464:5: () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket
            	    {
            	    // InternalMASLParser.g:8464:5: ()
            	    // InternalMASLParser.g:8465:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getFindNameAccess().getIndexedExpressionReceiverAction_1_1_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_5=(Token)match(input,LeftSquareBracket,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_5, grammarAccess.getFindNameAccess().getLeftSquareBracketKeyword_1_1_1());
            	      				
            	    }
            	    // InternalMASLParser.g:8475:5: ( (lv_brackets_6_0= ruleExpression ) )
            	    // InternalMASLParser.g:8476:6: (lv_brackets_6_0= ruleExpression )
            	    {
            	    // InternalMASLParser.g:8476:6: (lv_brackets_6_0= ruleExpression )
            	    // InternalMASLParser.g:8477:7: lv_brackets_6_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getFindNameAccess().getBracketsExpressionParserRuleCall_1_1_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_brackets_6_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFindNameRule());
            	      							}
            	      							set(
            	      								current,
            	      								"brackets",
            	      								lv_brackets_6_0,
            	      								"org.xtuml.bp.xtext.masl.MASL.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_119); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_7, grammarAccess.getFindNameAccess().getRightSquareBracketKeyword_1_1_3());
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindName"


    // $ANTLR start "entryRuleFindReceiverAttribute"
    // InternalMASLParser.g:8504:1: entryRuleFindReceiverAttribute returns [EObject current=null] : iv_ruleFindReceiverAttribute= ruleFindReceiverAttribute EOF ;
    public final EObject entryRuleFindReceiverAttribute() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindReceiverAttribute = null;


        try {
            // InternalMASLParser.g:8504:62: (iv_ruleFindReceiverAttribute= ruleFindReceiverAttribute EOF )
            // InternalMASLParser.g:8505:2: iv_ruleFindReceiverAttribute= ruleFindReceiverAttribute EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindReceiverAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindReceiverAttribute=ruleFindReceiverAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindReceiverAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindReceiverAttribute"


    // $ANTLR start "ruleFindReceiverAttribute"
    // InternalMASLParser.g:8511:1: ruleFindReceiverAttribute returns [EObject current=null] : ( (otherlv_0= RULE_ID ) ) ;
    public final EObject ruleFindReceiverAttribute() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:8517:2: ( ( (otherlv_0= RULE_ID ) ) )
            // InternalMASLParser.g:8518:2: ( (otherlv_0= RULE_ID ) )
            {
            // InternalMASLParser.g:8518:2: ( (otherlv_0= RULE_ID ) )
            // InternalMASLParser.g:8519:3: (otherlv_0= RULE_ID )
            {
            // InternalMASLParser.g:8519:3: (otherlv_0= RULE_ID )
            // InternalMASLParser.g:8520:4: otherlv_0= RULE_ID
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getFindReceiverAttributeRule());
              				}
              			
            }
            otherlv_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_0, grammarAccess.getFindReceiverAttributeAccess().getFeatureAttributeDefinitionCrossReference_0());
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindReceiverAttribute"


    // $ANTLR start "entryRuleConstExpression"
    // InternalMASLParser.g:8534:1: entryRuleConstExpression returns [EObject current=null] : iv_ruleConstExpression= ruleConstExpression EOF ;
    public final EObject entryRuleConstExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConstExpression = null;


        try {
            // InternalMASLParser.g:8534:56: (iv_ruleConstExpression= ruleConstExpression EOF )
            // InternalMASLParser.g:8535:2: iv_ruleConstExpression= ruleConstExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConstExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConstExpression=ruleConstExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConstExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConstExpression"


    // $ANTLR start "ruleConstExpression"
    // InternalMASLParser.g:8541:1: ruleConstExpression returns [EObject current=null] : this_Expression_0= ruleExpression ;
    public final EObject ruleConstExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Expression_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8547:2: (this_Expression_0= ruleExpression )
            // InternalMASLParser.g:8548:2: this_Expression_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getConstExpressionAccess().getExpressionParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_Expression_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Expression_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConstExpression"


    // $ANTLR start "entryRuleExpression"
    // InternalMASLParser.g:8559:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalMASLParser.g:8559:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalMASLParser.g:8560:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalMASLParser.g:8566:1: ruleExpression returns [EObject current=null] : this_StreamExpression_0= ruleStreamExpression ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_StreamExpression_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8572:2: (this_StreamExpression_0= ruleStreamExpression )
            // InternalMASLParser.g:8573:2: this_StreamExpression_0= ruleStreamExpression
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getStreamExpressionParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_StreamExpression_0=ruleStreamExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_StreamExpression_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleStreamExpression"
    // InternalMASLParser.g:8584:1: entryRuleStreamExpression returns [EObject current=null] : iv_ruleStreamExpression= ruleStreamExpression EOF ;
    public final EObject entryRuleStreamExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStreamExpression = null;


        try {
            // InternalMASLParser.g:8584:57: (iv_ruleStreamExpression= ruleStreamExpression EOF )
            // InternalMASLParser.g:8585:2: iv_ruleStreamExpression= ruleStreamExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStreamExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStreamExpression=ruleStreamExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStreamExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStreamExpression"


    // $ANTLR start "ruleStreamExpression"
    // InternalMASLParser.g:8591:1: ruleStreamExpression returns [EObject current=null] : (this_RangeExpression_0= ruleRangeExpression ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )* ) ;
    public final EObject ruleStreamExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RangeExpression_0 = null;

        AntlrDatatypeRuleToken lv_operator_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8597:2: ( (this_RangeExpression_0= ruleRangeExpression ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )* ) )
            // InternalMASLParser.g:8598:2: (this_RangeExpression_0= ruleRangeExpression ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )* )
            {
            // InternalMASLParser.g:8598:2: (this_RangeExpression_0= ruleRangeExpression ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )* )
            // InternalMASLParser.g:8599:3: this_RangeExpression_0= ruleRangeExpression ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getStreamExpressionAccess().getRangeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_121);
            this_RangeExpression_0=ruleRangeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RangeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8607:3: ( () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) ) )*
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( ((LA168_0>=LessThanSignLessThanSignLessThanSign && LA168_0<=GreaterThanSignGreaterThanSignGreaterThanSign)||LA168_0==LessThanSignLessThanSign||LA168_0==GreaterThanSignGreaterThanSign) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // InternalMASLParser.g:8608:4: () ( (lv_operator_2_0= ruleStreamOperator ) ) ( (lv_rhs_3_0= ruleRangeExpression ) )
            	    {
            	    // InternalMASLParser.g:8608:4: ()
            	    // InternalMASLParser.g:8609:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getStreamExpressionAccess().getStreamExpressionLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:8615:4: ( (lv_operator_2_0= ruleStreamOperator ) )
            	    // InternalMASLParser.g:8616:5: (lv_operator_2_0= ruleStreamOperator )
            	    {
            	    // InternalMASLParser.g:8616:5: (lv_operator_2_0= ruleStreamOperator )
            	    // InternalMASLParser.g:8617:6: lv_operator_2_0= ruleStreamOperator
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getStreamExpressionAccess().getOperatorStreamOperatorParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_39);
            	    lv_operator_2_0=ruleStreamOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getStreamExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"operator",
            	      							lv_operator_2_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.StreamOperator");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalMASLParser.g:8634:4: ( (lv_rhs_3_0= ruleRangeExpression ) )
            	    // InternalMASLParser.g:8635:5: (lv_rhs_3_0= ruleRangeExpression )
            	    {
            	    // InternalMASLParser.g:8635:5: (lv_rhs_3_0= ruleRangeExpression )
            	    // InternalMASLParser.g:8636:6: lv_rhs_3_0= ruleRangeExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getStreamExpressionAccess().getRhsRangeExpressionParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_121);
            	    lv_rhs_3_0=ruleRangeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getStreamExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.RangeExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStreamExpression"


    // $ANTLR start "entryRuleStreamOperator"
    // InternalMASLParser.g:8658:1: entryRuleStreamOperator returns [String current=null] : iv_ruleStreamOperator= ruleStreamOperator EOF ;
    public final String entryRuleStreamOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleStreamOperator = null;


        try {
            // InternalMASLParser.g:8658:54: (iv_ruleStreamOperator= ruleStreamOperator EOF )
            // InternalMASLParser.g:8659:2: iv_ruleStreamOperator= ruleStreamOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStreamOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStreamOperator=ruleStreamOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStreamOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStreamOperator"


    // $ANTLR start "ruleStreamOperator"
    // InternalMASLParser.g:8665:1: ruleStreamOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSign | kw= LessThanSignLessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSignGreaterThanSign ) ;
    public final AntlrDatatypeRuleToken ruleStreamOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalMASLParser.g:8671:2: ( (kw= LessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSign | kw= LessThanSignLessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSignGreaterThanSign ) )
            // InternalMASLParser.g:8672:2: (kw= LessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSign | kw= LessThanSignLessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSignGreaterThanSign )
            {
            // InternalMASLParser.g:8672:2: (kw= LessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSign | kw= LessThanSignLessThanSignLessThanSign | kw= GreaterThanSignGreaterThanSignGreaterThanSign )
            int alt169=4;
            switch ( input.LA(1) ) {
            case LessThanSignLessThanSign:
                {
                alt169=1;
                }
                break;
            case GreaterThanSignGreaterThanSign:
                {
                alt169=2;
                }
                break;
            case LessThanSignLessThanSignLessThanSign:
                {
                alt169=3;
                }
                break;
            case GreaterThanSignGreaterThanSignGreaterThanSign:
                {
                alt169=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // InternalMASLParser.g:8673:3: kw= LessThanSignLessThanSign
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getLessThanSignLessThanSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:8679:3: kw= GreaterThanSignGreaterThanSign
                    {
                    kw=(Token)match(input,GreaterThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:8685:3: kw= LessThanSignLessThanSignLessThanSign
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getLessThanSignLessThanSignLessThanSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:8691:3: kw= GreaterThanSignGreaterThanSignGreaterThanSign
                    {
                    kw=(Token)match(input,GreaterThanSignGreaterThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStreamOperator"


    // $ANTLR start "entryRuleRangeExpression"
    // InternalMASLParser.g:8700:1: entryRuleRangeExpression returns [EObject current=null] : iv_ruleRangeExpression= ruleRangeExpression EOF ;
    public final EObject entryRuleRangeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeExpression = null;


        try {
            // InternalMASLParser.g:8700:56: (iv_ruleRangeExpression= ruleRangeExpression EOF )
            // InternalMASLParser.g:8701:2: iv_ruleRangeExpression= ruleRangeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRangeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRangeExpression=ruleRangeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRangeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRangeExpression"


    // $ANTLR start "ruleRangeExpression"
    // InternalMASLParser.g:8707:1: ruleRangeExpression returns [EObject current=null] : (this_LogicalOr_0= ruleLogicalOr ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )? ) ;
    public final EObject ruleRangeExpression() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_LogicalOr_0 = null;

        EObject lv_to_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8713:2: ( (this_LogicalOr_0= ruleLogicalOr ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )? ) )
            // InternalMASLParser.g:8714:2: (this_LogicalOr_0= ruleLogicalOr ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )? )
            {
            // InternalMASLParser.g:8714:2: (this_LogicalOr_0= ruleLogicalOr ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )? )
            // InternalMASLParser.g:8715:3: this_LogicalOr_0= ruleLogicalOr ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRangeExpressionAccess().getLogicalOrParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_122);
            this_LogicalOr_0=ruleLogicalOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalOr_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8723:3: ( () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) ) )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==FullStopFullStop) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // InternalMASLParser.g:8724:4: () ( (lv_operator_2_0= FullStopFullStop ) ) ( (lv_to_3_0= ruleLogicalOr ) )
                    {
                    // InternalMASLParser.g:8724:4: ()
                    // InternalMASLParser.g:8725:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getRangeExpressionAccess().getRangeExpressionFromAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:8731:4: ( (lv_operator_2_0= FullStopFullStop ) )
                    // InternalMASLParser.g:8732:5: (lv_operator_2_0= FullStopFullStop )
                    {
                    // InternalMASLParser.g:8732:5: (lv_operator_2_0= FullStopFullStop )
                    // InternalMASLParser.g:8733:6: lv_operator_2_0= FullStopFullStop
                    {
                    lv_operator_2_0=(Token)match(input,FullStopFullStop,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_2_0, grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getRangeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_2_0, "..");
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:8745:4: ( (lv_to_3_0= ruleLogicalOr ) )
                    // InternalMASLParser.g:8746:5: (lv_to_3_0= ruleLogicalOr )
                    {
                    // InternalMASLParser.g:8746:5: (lv_to_3_0= ruleLogicalOr )
                    // InternalMASLParser.g:8747:6: lv_to_3_0= ruleLogicalOr
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getRangeExpressionAccess().getToLogicalOrParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_to_3_0=ruleLogicalOr();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
                      						}
                      						set(
                      							current,
                      							"to",
                      							lv_to_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.LogicalOr");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRangeExpression"


    // $ANTLR start "entryRuleLogicalOr"
    // InternalMASLParser.g:8769:1: entryRuleLogicalOr returns [EObject current=null] : iv_ruleLogicalOr= ruleLogicalOr EOF ;
    public final EObject entryRuleLogicalOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalOr = null;


        try {
            // InternalMASLParser.g:8769:50: (iv_ruleLogicalOr= ruleLogicalOr EOF )
            // InternalMASLParser.g:8770:2: iv_ruleLogicalOr= ruleLogicalOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOr=ruleLogicalOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLogicalOr"


    // $ANTLR start "ruleLogicalOr"
    // InternalMASLParser.g:8776:1: ruleLogicalOr returns [EObject current=null] : (this_LogicalXor_0= ruleLogicalXor ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )* ) ;
    public final EObject ruleLogicalOr() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_LogicalXor_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8782:2: ( (this_LogicalXor_0= ruleLogicalXor ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )* ) )
            // InternalMASLParser.g:8783:2: (this_LogicalXor_0= ruleLogicalXor ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )* )
            {
            // InternalMASLParser.g:8783:2: (this_LogicalXor_0= ruleLogicalXor ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )* )
            // InternalMASLParser.g:8784:3: this_LogicalXor_0= ruleLogicalXor ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalOrAccess().getLogicalXorParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_113);
            this_LogicalXor_0=ruleLogicalXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalXor_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8792:3: ( () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) ) )*
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==Or) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // InternalMASLParser.g:8793:4: () ( (lv_operator_2_0= Or ) ) ( (lv_rhs_3_0= ruleLogicalXor ) )
            	    {
            	    // InternalMASLParser.g:8793:4: ()
            	    // InternalMASLParser.g:8794:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getLogicalOrAccess().getLogicalOrLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:8800:4: ( (lv_operator_2_0= Or ) )
            	    // InternalMASLParser.g:8801:5: (lv_operator_2_0= Or )
            	    {
            	    // InternalMASLParser.g:8801:5: (lv_operator_2_0= Or )
            	    // InternalMASLParser.g:8802:6: lv_operator_2_0= Or
            	    {
            	    lv_operator_2_0=(Token)match(input,Or,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalOrAccess().getOperatorOrKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getLogicalOrRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "or");
            	      					
            	    }

            	    }


            	    }

            	    // InternalMASLParser.g:8814:4: ( (lv_rhs_3_0= ruleLogicalXor ) )
            	    // InternalMASLParser.g:8815:5: (lv_rhs_3_0= ruleLogicalXor )
            	    {
            	    // InternalMASLParser.g:8815:5: (lv_rhs_3_0= ruleLogicalXor )
            	    // InternalMASLParser.g:8816:6: lv_rhs_3_0= ruleLogicalXor
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalOrAccess().getRhsLogicalXorParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_113);
            	    lv_rhs_3_0=ruleLogicalXor();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.LogicalXor");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLogicalOr"


    // $ANTLR start "entryRuleLogicalXor"
    // InternalMASLParser.g:8838:1: entryRuleLogicalXor returns [EObject current=null] : iv_ruleLogicalXor= ruleLogicalXor EOF ;
    public final EObject entryRuleLogicalXor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalXor = null;


        try {
            // InternalMASLParser.g:8838:51: (iv_ruleLogicalXor= ruleLogicalXor EOF )
            // InternalMASLParser.g:8839:2: iv_ruleLogicalXor= ruleLogicalXor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalXorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalXor=ruleLogicalXor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalXor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLogicalXor"


    // $ANTLR start "ruleLogicalXor"
    // InternalMASLParser.g:8845:1: ruleLogicalXor returns [EObject current=null] : (this_LogicalAnd_0= ruleLogicalAnd ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )* ) ;
    public final EObject ruleLogicalXor() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_LogicalAnd_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8851:2: ( (this_LogicalAnd_0= ruleLogicalAnd ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )* ) )
            // InternalMASLParser.g:8852:2: (this_LogicalAnd_0= ruleLogicalAnd ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )* )
            {
            // InternalMASLParser.g:8852:2: (this_LogicalAnd_0= ruleLogicalAnd ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )* )
            // InternalMASLParser.g:8853:3: this_LogicalAnd_0= ruleLogicalAnd ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalXorAccess().getLogicalAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_115);
            this_LogicalAnd_0=ruleLogicalAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalAnd_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8861:3: ( () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) ) )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==Xor) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // InternalMASLParser.g:8862:4: () ( (lv_operator_2_0= Xor ) ) ( (lv_rhs_3_0= ruleLogicalAnd ) )
            	    {
            	    // InternalMASLParser.g:8862:4: ()
            	    // InternalMASLParser.g:8863:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getLogicalXorAccess().getLogicalXorLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:8869:4: ( (lv_operator_2_0= Xor ) )
            	    // InternalMASLParser.g:8870:5: (lv_operator_2_0= Xor )
            	    {
            	    // InternalMASLParser.g:8870:5: (lv_operator_2_0= Xor )
            	    // InternalMASLParser.g:8871:6: lv_operator_2_0= Xor
            	    {
            	    lv_operator_2_0=(Token)match(input,Xor,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalXorAccess().getOperatorXorKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getLogicalXorRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "xor");
            	      					
            	    }

            	    }


            	    }

            	    // InternalMASLParser.g:8883:4: ( (lv_rhs_3_0= ruleLogicalAnd ) )
            	    // InternalMASLParser.g:8884:5: (lv_rhs_3_0= ruleLogicalAnd )
            	    {
            	    // InternalMASLParser.g:8884:5: (lv_rhs_3_0= ruleLogicalAnd )
            	    // InternalMASLParser.g:8885:6: lv_rhs_3_0= ruleLogicalAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalXorAccess().getRhsLogicalAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_rhs_3_0=ruleLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalXorRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.LogicalAnd");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLogicalXor"


    // $ANTLR start "entryRuleLogicalAnd"
    // InternalMASLParser.g:8907:1: entryRuleLogicalAnd returns [EObject current=null] : iv_ruleLogicalAnd= ruleLogicalAnd EOF ;
    public final EObject entryRuleLogicalAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalAnd = null;


        try {
            // InternalMASLParser.g:8907:51: (iv_ruleLogicalAnd= ruleLogicalAnd EOF )
            // InternalMASLParser.g:8908:2: iv_ruleLogicalAnd= ruleLogicalAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalAnd=ruleLogicalAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLogicalAnd"


    // $ANTLR start "ruleLogicalAnd"
    // InternalMASLParser.g:8914:1: ruleLogicalAnd returns [EObject current=null] : (this_Equality_0= ruleEquality ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )* ) ;
    public final EObject ruleLogicalAnd() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_0=null;
        EObject this_Equality_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8920:2: ( (this_Equality_0= ruleEquality ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )* ) )
            // InternalMASLParser.g:8921:2: (this_Equality_0= ruleEquality ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )* )
            {
            // InternalMASLParser.g:8921:2: (this_Equality_0= ruleEquality ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )* )
            // InternalMASLParser.g:8922:3: this_Equality_0= ruleEquality ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalAndAccess().getEqualityParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_116);
            this_Equality_0=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Equality_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8930:3: ( () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) ) )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==And) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // InternalMASLParser.g:8931:4: () ( (lv_operator_2_0= And ) ) ( (lv_rhs_3_0= ruleEquality ) )
            	    {
            	    // InternalMASLParser.g:8931:4: ()
            	    // InternalMASLParser.g:8932:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getLogicalAndAccess().getLogicalAndLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:8938:4: ( (lv_operator_2_0= And ) )
            	    // InternalMASLParser.g:8939:5: (lv_operator_2_0= And )
            	    {
            	    // InternalMASLParser.g:8939:5: (lv_operator_2_0= And )
            	    // InternalMASLParser.g:8940:6: lv_operator_2_0= And
            	    {
            	    lv_operator_2_0=(Token)match(input,And,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalAndAccess().getOperatorAndKeyword_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getLogicalAndRule());
            	      						}
            	      						setWithLastConsumed(current, "operator", lv_operator_2_0, "and");
            	      					
            	    }

            	    }


            	    }

            	    // InternalMASLParser.g:8952:4: ( (lv_rhs_3_0= ruleEquality ) )
            	    // InternalMASLParser.g:8953:5: (lv_rhs_3_0= ruleEquality )
            	    {
            	    // InternalMASLParser.g:8953:5: (lv_rhs_3_0= ruleEquality )
            	    // InternalMASLParser.g:8954:6: lv_rhs_3_0= ruleEquality
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalAndAccess().getRhsEqualityParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_116);
            	    lv_rhs_3_0=ruleEquality();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.Equality");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLogicalAnd"


    // $ANTLR start "entryRuleEquality"
    // InternalMASLParser.g:8976:1: entryRuleEquality returns [EObject current=null] : iv_ruleEquality= ruleEquality EOF ;
    public final EObject entryRuleEquality() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEquality = null;


        try {
            // InternalMASLParser.g:8976:49: (iv_ruleEquality= ruleEquality EOF )
            // InternalMASLParser.g:8977:2: iv_ruleEquality= ruleEquality EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEquality=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEquality; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEquality"


    // $ANTLR start "ruleEquality"
    // InternalMASLParser.g:8983:1: ruleEquality returns [EObject current=null] : (this_RelationalExp_0= ruleRelationalExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )* ) ;
    public final EObject ruleEquality() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        EObject this_RelationalExp_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:8989:2: ( (this_RelationalExp_0= ruleRelationalExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )* ) )
            // InternalMASLParser.g:8990:2: (this_RelationalExp_0= ruleRelationalExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )* )
            {
            // InternalMASLParser.g:8990:2: (this_RelationalExp_0= ruleRelationalExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )* )
            // InternalMASLParser.g:8991:3: this_RelationalExp_0= ruleRelationalExp ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityAccess().getRelationalExpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_117);
            this_RelationalExp_0=ruleRelationalExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:8999:3: ( () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) ) )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==SolidusEqualsSign||LA175_0==EqualsSign) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // InternalMASLParser.g:9000:4: () ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) ) ( (lv_rhs_3_0= ruleRelationalExp ) )
            	    {
            	    // InternalMASLParser.g:9000:4: ()
            	    // InternalMASLParser.g:9001:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getEqualityAccess().getEqualityLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:9007:4: ( ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) ) )
            	    // InternalMASLParser.g:9008:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) )
            	    {
            	    // InternalMASLParser.g:9008:5: ( (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign ) )
            	    // InternalMASLParser.g:9009:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign )
            	    {
            	    // InternalMASLParser.g:9009:6: (lv_operator_2_1= EqualsSign | lv_operator_2_2= SolidusEqualsSign )
            	    int alt174=2;
            	    int LA174_0 = input.LA(1);

            	    if ( (LA174_0==EqualsSign) ) {
            	        alt174=1;
            	    }
            	    else if ( (LA174_0==SolidusEqualsSign) ) {
            	        alt174=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 174, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt174) {
            	        case 1 :
            	            // InternalMASLParser.g:9010:7: lv_operator_2_1= EqualsSign
            	            {
            	            lv_operator_2_1=(Token)match(input,EqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getEqualityAccess().getOperatorEqualsSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getEqualityRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalMASLParser.g:9021:7: lv_operator_2_2= SolidusEqualsSign
            	            {
            	            lv_operator_2_2=(Token)match(input,SolidusEqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getEqualityAccess().getOperatorSolidusEqualsSignKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getEqualityRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalMASLParser.g:9034:4: ( (lv_rhs_3_0= ruleRelationalExp ) )
            	    // InternalMASLParser.g:9035:5: (lv_rhs_3_0= ruleRelationalExp )
            	    {
            	    // InternalMASLParser.g:9035:5: (lv_rhs_3_0= ruleRelationalExp )
            	    // InternalMASLParser.g:9036:6: lv_rhs_3_0= ruleRelationalExp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityAccess().getRhsRelationalExpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_117);
            	    lv_rhs_3_0=ruleRelationalExp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.RelationalExp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEquality"


    // $ANTLR start "entryRuleRelationalExp"
    // InternalMASLParser.g:9058:1: entryRuleRelationalExp returns [EObject current=null] : iv_ruleRelationalExp= ruleRelationalExp EOF ;
    public final EObject entryRuleRelationalExp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationalExp = null;


        try {
            // InternalMASLParser.g:9058:54: (iv_ruleRelationalExp= ruleRelationalExp EOF )
            // InternalMASLParser.g:9059:2: iv_ruleRelationalExp= ruleRelationalExp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExp=ruleRelationalExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRelationalExp"


    // $ANTLR start "ruleRelationalExp"
    // InternalMASLParser.g:9065:1: ruleRelationalExp returns [EObject current=null] : (this_AdditiveExp_0= ruleAdditiveExp ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )* ) ;
    public final EObject ruleRelationalExp() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        EObject this_AdditiveExp_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9071:2: ( (this_AdditiveExp_0= ruleAdditiveExp ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )* ) )
            // InternalMASLParser.g:9072:2: (this_AdditiveExp_0= ruleAdditiveExp ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )* )
            {
            // InternalMASLParser.g:9072:2: (this_AdditiveExp_0= ruleAdditiveExp ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )* )
            // InternalMASLParser.g:9073:3: this_AdditiveExp_0= ruleAdditiveExp ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpAccess().getAdditiveExpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_118);
            this_AdditiveExp_0=ruleAdditiveExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AdditiveExp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:9081:3: ( () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) ) )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==LessThanSignEqualsSign||LA177_0==GreaterThanSignEqualsSign||LA177_0==LessThanSign||LA177_0==GreaterThanSign) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // InternalMASLParser.g:9082:4: () ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) ) ( (lv_rhs_3_0= ruleAdditiveExp ) )
            	    {
            	    // InternalMASLParser.g:9082:4: ()
            	    // InternalMASLParser.g:9083:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getRelationalExpAccess().getRelationalExpLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:9089:4: ( ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) ) )
            	    // InternalMASLParser.g:9090:5: ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) )
            	    {
            	    // InternalMASLParser.g:9090:5: ( (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign ) )
            	    // InternalMASLParser.g:9091:6: (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign )
            	    {
            	    // InternalMASLParser.g:9091:6: (lv_operator_2_1= LessThanSign | lv_operator_2_2= GreaterThanSign | lv_operator_2_3= LessThanSignEqualsSign | lv_operator_2_4= GreaterThanSignEqualsSign )
            	    int alt176=4;
            	    switch ( input.LA(1) ) {
            	    case LessThanSign:
            	        {
            	        alt176=1;
            	        }
            	        break;
            	    case GreaterThanSign:
            	        {
            	        alt176=2;
            	        }
            	        break;
            	    case LessThanSignEqualsSign:
            	        {
            	        alt176=3;
            	        }
            	        break;
            	    case GreaterThanSignEqualsSign:
            	        {
            	        alt176=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 176, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt176) {
            	        case 1 :
            	            // InternalMASLParser.g:9092:7: lv_operator_2_1= LessThanSign
            	            {
            	            lv_operator_2_1=(Token)match(input,LessThanSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getRelationalExpAccess().getOperatorLessThanSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getRelationalExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalMASLParser.g:9103:7: lv_operator_2_2= GreaterThanSign
            	            {
            	            lv_operator_2_2=(Token)match(input,GreaterThanSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getRelationalExpAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getRelationalExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalMASLParser.g:9114:7: lv_operator_2_3= LessThanSignEqualsSign
            	            {
            	            lv_operator_2_3=(Token)match(input,LessThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getRelationalExpAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getRelationalExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalMASLParser.g:9125:7: lv_operator_2_4= GreaterThanSignEqualsSign
            	            {
            	            lv_operator_2_4=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getRelationalExpAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getRelationalExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalMASLParser.g:9138:4: ( (lv_rhs_3_0= ruleAdditiveExp ) )
            	    // InternalMASLParser.g:9139:5: (lv_rhs_3_0= ruleAdditiveExp )
            	    {
            	    // InternalMASLParser.g:9139:5: (lv_rhs_3_0= ruleAdditiveExp )
            	    // InternalMASLParser.g:9140:6: lv_rhs_3_0= ruleAdditiveExp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getRelationalExpAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=ruleAdditiveExp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getRelationalExpRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRelationalExp"


    // $ANTLR start "entryRuleAdditiveExp"
    // InternalMASLParser.g:9162:1: entryRuleAdditiveExp returns [EObject current=null] : iv_ruleAdditiveExp= ruleAdditiveExp EOF ;
    public final EObject entryRuleAdditiveExp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAdditiveExp = null;


        try {
            // InternalMASLParser.g:9162:52: (iv_ruleAdditiveExp= ruleAdditiveExp EOF )
            // InternalMASLParser.g:9163:2: iv_ruleAdditiveExp= ruleAdditiveExp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExp=ruleAdditiveExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAdditiveExp"


    // $ANTLR start "ruleAdditiveExp"
    // InternalMASLParser.g:9169:1: ruleAdditiveExp returns [EObject current=null] : (this_MultExp_0= ruleMultExp ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )* ) ;
    public final EObject ruleAdditiveExp() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        Token lv_operator_2_5=null;
        EObject this_MultExp_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9175:2: ( (this_MultExp_0= ruleMultExp ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )* ) )
            // InternalMASLParser.g:9176:2: (this_MultExp_0= ruleMultExp ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )* )
            {
            // InternalMASLParser.g:9176:2: (this_MultExp_0= ruleMultExp ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )* )
            // InternalMASLParser.g:9177:3: this_MultExp_0= ruleMultExp ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAdditiveExpAccess().getMultExpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_123);
            this_MultExp_0=ruleMultExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultExp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:9185:3: ( () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) ) )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==Not_in||LA179_0==Union||LA179_0==Ampersand||LA179_0==PlusSign||LA179_0==HyphenMinus) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // InternalMASLParser.g:9186:4: () ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) ) ( (lv_rhs_3_0= ruleMultExp ) )
            	    {
            	    // InternalMASLParser.g:9186:4: ()
            	    // InternalMASLParser.g:9187:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getAdditiveExpAccess().getAdditiveExpLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:9193:4: ( ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) ) )
            	    // InternalMASLParser.g:9194:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) )
            	    {
            	    // InternalMASLParser.g:9194:5: ( (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in ) )
            	    // InternalMASLParser.g:9195:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in )
            	    {
            	    // InternalMASLParser.g:9195:6: (lv_operator_2_1= PlusSign | lv_operator_2_2= HyphenMinus | lv_operator_2_3= Ampersand | lv_operator_2_4= Union | lv_operator_2_5= Not_in )
            	    int alt178=5;
            	    switch ( input.LA(1) ) {
            	    case PlusSign:
            	        {
            	        alt178=1;
            	        }
            	        break;
            	    case HyphenMinus:
            	        {
            	        alt178=2;
            	        }
            	        break;
            	    case Ampersand:
            	        {
            	        alt178=3;
            	        }
            	        break;
            	    case Union:
            	        {
            	        alt178=4;
            	        }
            	        break;
            	    case Not_in:
            	        {
            	        alt178=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 178, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt178) {
            	        case 1 :
            	            // InternalMASLParser.g:9196:7: lv_operator_2_1= PlusSign
            	            {
            	            lv_operator_2_1=(Token)match(input,PlusSign,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getAdditiveExpAccess().getOperatorPlusSignKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAdditiveExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalMASLParser.g:9207:7: lv_operator_2_2= HyphenMinus
            	            {
            	            lv_operator_2_2=(Token)match(input,HyphenMinus,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getAdditiveExpAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAdditiveExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalMASLParser.g:9218:7: lv_operator_2_3= Ampersand
            	            {
            	            lv_operator_2_3=(Token)match(input,Ampersand,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getAdditiveExpAccess().getOperatorAmpersandKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAdditiveExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalMASLParser.g:9229:7: lv_operator_2_4= Union
            	            {
            	            lv_operator_2_4=(Token)match(input,Union,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getAdditiveExpAccess().getOperatorUnionKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAdditiveExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalMASLParser.g:9240:7: lv_operator_2_5= Not_in
            	            {
            	            lv_operator_2_5=(Token)match(input,Not_in,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_5, grammarAccess.getAdditiveExpAccess().getOperatorNot_inKeyword_1_1_0_4());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getAdditiveExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_5, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalMASLParser.g:9253:4: ( (lv_rhs_3_0= ruleMultExp ) )
            	    // InternalMASLParser.g:9254:5: (lv_rhs_3_0= ruleMultExp )
            	    {
            	    // InternalMASLParser.g:9254:5: (lv_rhs_3_0= ruleMultExp )
            	    // InternalMASLParser.g:9255:6: lv_rhs_3_0= ruleMultExp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAdditiveExpAccess().getRhsMultExpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_123);
            	    lv_rhs_3_0=ruleMultExp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.MultExp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAdditiveExp"


    // $ANTLR start "entryRuleMultExp"
    // InternalMASLParser.g:9277:1: entryRuleMultExp returns [EObject current=null] : iv_ruleMultExp= ruleMultExp EOF ;
    public final EObject entryRuleMultExp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultExp = null;


        try {
            // InternalMASLParser.g:9277:48: (iv_ruleMultExp= ruleMultExp EOF )
            // InternalMASLParser.g:9278:2: iv_ruleMultExp= ruleMultExp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultExpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultExp=ruleMultExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultExp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMultExp"


    // $ANTLR start "ruleMultExp"
    // InternalMASLParser.g:9284:1: ruleMultExp returns [EObject current=null] : (this_UnaryExp_0= ruleUnaryExp ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )* ) ;
    public final EObject ruleMultExp() throws RecognitionException {
        EObject current = null;

        Token lv_operator_2_1=null;
        Token lv_operator_2_2=null;
        Token lv_operator_2_3=null;
        Token lv_operator_2_4=null;
        Token lv_operator_2_5=null;
        Token lv_operator_2_6=null;
        Token lv_operator_2_7=null;
        EObject this_UnaryExp_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9290:2: ( (this_UnaryExp_0= ruleUnaryExp ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )* ) )
            // InternalMASLParser.g:9291:2: (this_UnaryExp_0= ruleUnaryExp ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )* )
            {
            // InternalMASLParser.g:9291:2: (this_UnaryExp_0= ruleUnaryExp ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )* )
            // InternalMASLParser.g:9292:3: this_UnaryExp_0= ruleUnaryExp ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultExpAccess().getUnaryExpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_124);
            this_UnaryExp_0=ruleUnaryExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryExp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:9300:3: ( () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) ) )*
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==Intersection||LA181_0==Disunion||LA181_0==Mod||LA181_0==Rem||LA181_0==AsteriskAsterisk||LA181_0==Asterisk||LA181_0==Solidus) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // InternalMASLParser.g:9301:4: () ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) ) ( (lv_rhs_3_0= ruleUnaryExp ) )
            	    {
            	    // InternalMASLParser.g:9301:4: ()
            	    // InternalMASLParser.g:9302:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getMultExpAccess().getMultExpLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:9308:4: ( ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) ) )
            	    // InternalMASLParser.g:9309:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) )
            	    {
            	    // InternalMASLParser.g:9309:5: ( (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion ) )
            	    // InternalMASLParser.g:9310:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion )
            	    {
            	    // InternalMASLParser.g:9310:6: (lv_operator_2_1= Asterisk | lv_operator_2_2= Solidus | lv_operator_2_3= Mod | lv_operator_2_4= AsteriskAsterisk | lv_operator_2_5= Rem | lv_operator_2_6= Intersection | lv_operator_2_7= Disunion )
            	    int alt180=7;
            	    switch ( input.LA(1) ) {
            	    case Asterisk:
            	        {
            	        alt180=1;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt180=2;
            	        }
            	        break;
            	    case Mod:
            	        {
            	        alt180=3;
            	        }
            	        break;
            	    case AsteriskAsterisk:
            	        {
            	        alt180=4;
            	        }
            	        break;
            	    case Rem:
            	        {
            	        alt180=5;
            	        }
            	        break;
            	    case Intersection:
            	        {
            	        alt180=6;
            	        }
            	        break;
            	    case Disunion:
            	        {
            	        alt180=7;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 180, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt180) {
            	        case 1 :
            	            // InternalMASLParser.g:9311:7: lv_operator_2_1= Asterisk
            	            {
            	            lv_operator_2_1=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_1, grammarAccess.getMultExpAccess().getOperatorAsteriskKeyword_1_1_0_0());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_1, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalMASLParser.g:9322:7: lv_operator_2_2= Solidus
            	            {
            	            lv_operator_2_2=(Token)match(input,Solidus,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_2, grammarAccess.getMultExpAccess().getOperatorSolidusKeyword_1_1_0_1());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_2, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // InternalMASLParser.g:9333:7: lv_operator_2_3= Mod
            	            {
            	            lv_operator_2_3=(Token)match(input,Mod,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_3, grammarAccess.getMultExpAccess().getOperatorModKeyword_1_1_0_2());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_3, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // InternalMASLParser.g:9344:7: lv_operator_2_4= AsteriskAsterisk
            	            {
            	            lv_operator_2_4=(Token)match(input,AsteriskAsterisk,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_4, grammarAccess.getMultExpAccess().getOperatorAsteriskAsteriskKeyword_1_1_0_3());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_4, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // InternalMASLParser.g:9355:7: lv_operator_2_5= Rem
            	            {
            	            lv_operator_2_5=(Token)match(input,Rem,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_5, grammarAccess.getMultExpAccess().getOperatorRemKeyword_1_1_0_4());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_5, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // InternalMASLParser.g:9366:7: lv_operator_2_6= Intersection
            	            {
            	            lv_operator_2_6=(Token)match(input,Intersection,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_6, grammarAccess.getMultExpAccess().getOperatorIntersectionKeyword_1_1_0_5());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_6, null);
            	              						
            	            }

            	            }
            	            break;
            	        case 7 :
            	            // InternalMASLParser.g:9377:7: lv_operator_2_7= Disunion
            	            {
            	            lv_operator_2_7=(Token)match(input,Disunion,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(lv_operator_2_7, grammarAccess.getMultExpAccess().getOperatorDisunionKeyword_1_1_0_6());
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElement(grammarAccess.getMultExpRule());
            	              							}
            	              							setWithLastConsumed(current, "operator", lv_operator_2_7, null);
            	              						
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalMASLParser.g:9390:4: ( (lv_rhs_3_0= ruleUnaryExp ) )
            	    // InternalMASLParser.g:9391:5: (lv_rhs_3_0= ruleUnaryExp )
            	    {
            	    // InternalMASLParser.g:9391:5: (lv_rhs_3_0= ruleUnaryExp )
            	    // InternalMASLParser.g:9392:6: lv_rhs_3_0= ruleUnaryExp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultExpAccess().getRhsUnaryExpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_124);
            	    lv_rhs_3_0=ruleUnaryExp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultExpRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.xtuml.bp.xtext.masl.MASL.UnaryExp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMultExp"


    // $ANTLR start "entryRuleUnaryExp"
    // InternalMASLParser.g:9414:1: entryRuleUnaryExp returns [EObject current=null] : iv_ruleUnaryExp= ruleUnaryExp EOF ;
    public final EObject entryRuleUnaryExp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryExp = null;


        try {
            // InternalMASLParser.g:9414:49: (iv_ruleUnaryExp= ruleUnaryExp EOF )
            // InternalMASLParser.g:9415:2: iv_ruleUnaryExp= ruleUnaryExp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExp=ruleUnaryExp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnaryExp"


    // $ANTLR start "ruleUnaryExp"
    // InternalMASLParser.g:9421:1: ruleUnaryExp returns [EObject current=null] : ( ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) ) | this_LinkExpression_3= ruleLinkExpression ) ;
    public final EObject ruleUnaryExp() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_operator_1_0 = null;

        EObject lv_operand_2_0 = null;

        EObject this_LinkExpression_3 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9427:2: ( ( ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) ) | this_LinkExpression_3= ruleLinkExpression ) )
            // InternalMASLParser.g:9428:2: ( ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) ) | this_LinkExpression_3= ruleLinkExpression )
            {
            // InternalMASLParser.g:9428:2: ( ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) ) | this_LinkExpression_3= ruleLinkExpression )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==Abs||LA182_0==Not||LA182_0==PlusSign||LA182_0==HyphenMinus) ) {
                alt182=1;
            }
            else if ( (LA182_0==Dictionary||LA182_0==Anonymous||LA182_0==Find_only||(LA182_0>=Find_all && LA182_0<=Find_one)||LA182_0==Instance||LA182_0==Sequence||LA182_0==Console||(LA182_0>=FILE && LA182_0<=LINE)||LA182_0==Create||(LA182_0>=Unlink && LA182_0<=Array)||(LA182_0>=False && LA182_0<=Flush)||LA182_0==Endl||LA182_0==Find||LA182_0==Link||LA182_0==Null||(LA182_0>=This && LA182_0<=True)||LA182_0==Bag||LA182_0==Set||LA182_0==LeftParenthesis||(LA182_0>=RULE_ID && LA182_0<=RULE_TIMESTAMP)) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // InternalMASLParser.g:9429:3: ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) )
                    {
                    // InternalMASLParser.g:9429:3: ( () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) ) )
                    // InternalMASLParser.g:9430:4: () ( (lv_operator_1_0= ruleUnaryOperator ) ) ( (lv_operand_2_0= ruleUnaryExp ) )
                    {
                    // InternalMASLParser.g:9430:4: ()
                    // InternalMASLParser.g:9431:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpAccess().getUnaryExpAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:9437:4: ( (lv_operator_1_0= ruleUnaryOperator ) )
                    // InternalMASLParser.g:9438:5: (lv_operator_1_0= ruleUnaryOperator )
                    {
                    // InternalMASLParser.g:9438:5: (lv_operator_1_0= ruleUnaryOperator )
                    // InternalMASLParser.g:9439:6: lv_operator_1_0= ruleUnaryOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_39);
                    lv_operator_1_0=ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpRule());
                      						}
                      						set(
                      							current,
                      							"operator",
                      							lv_operator_1_0,
                      							"org.xtuml.bp.xtext.masl.MASL.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:9456:4: ( (lv_operand_2_0= ruleUnaryExp ) )
                    // InternalMASLParser.g:9457:5: (lv_operand_2_0= ruleUnaryExp )
                    {
                    // InternalMASLParser.g:9457:5: (lv_operand_2_0= ruleUnaryExp )
                    // InternalMASLParser.g:9458:6: lv_operand_2_0= ruleUnaryExp
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpAccess().getOperandUnaryExpParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_operand_2_0=ruleUnaryExp();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpRule());
                      						}
                      						set(
                      							current,
                      							"operand",
                      							lv_operand_2_0,
                      							"org.xtuml.bp.xtext.masl.MASL.UnaryExp");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:9477:3: this_LinkExpression_3= ruleLinkExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryExpAccess().getLinkExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LinkExpression_3=ruleLinkExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LinkExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnaryExp"


    // $ANTLR start "entryRuleUnaryOperator"
    // InternalMASLParser.g:9489:1: entryRuleUnaryOperator returns [String current=null] : iv_ruleUnaryOperator= ruleUnaryOperator EOF ;
    public final String entryRuleUnaryOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleUnaryOperator = null;


        try {
            // InternalMASLParser.g:9489:53: (iv_ruleUnaryOperator= ruleUnaryOperator EOF )
            // InternalMASLParser.g:9490:2: iv_ruleUnaryOperator= ruleUnaryOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryOperator=ruleUnaryOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnaryOperator"


    // $ANTLR start "ruleUnaryOperator"
    // InternalMASLParser.g:9496:1: ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= HyphenMinus | kw= PlusSign | kw= Not | kw= Abs ) ;
    public final AntlrDatatypeRuleToken ruleUnaryOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalMASLParser.g:9502:2: ( (kw= HyphenMinus | kw= PlusSign | kw= Not | kw= Abs ) )
            // InternalMASLParser.g:9503:2: (kw= HyphenMinus | kw= PlusSign | kw= Not | kw= Abs )
            {
            // InternalMASLParser.g:9503:2: (kw= HyphenMinus | kw= PlusSign | kw= Not | kw= Abs )
            int alt183=4;
            switch ( input.LA(1) ) {
            case HyphenMinus:
                {
                alt183=1;
                }
                break;
            case PlusSign:
                {
                alt183=2;
                }
                break;
            case Not:
                {
                alt183=3;
                }
                break;
            case Abs:
                {
                alt183=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // InternalMASLParser.g:9504:3: kw= HyphenMinus
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:9510:3: kw= PlusSign
                    {
                    kw=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:9516:3: kw= Not
                    {
                    kw=(Token)match(input,Not,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:9522:3: kw= Abs
                    {
                    kw=(Token)match(input,Abs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getAbsKeyword_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnaryOperator"


    // $ANTLR start "entryRuleLinkExpression"
    // InternalMASLParser.g:9531:1: entryRuleLinkExpression returns [EObject current=null] : iv_ruleLinkExpression= ruleLinkExpression EOF ;
    public final EObject entryRuleLinkExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLinkExpression = null;


        try {
            // InternalMASLParser.g:9531:55: (iv_ruleLinkExpression= ruleLinkExpression EOF )
            // InternalMASLParser.g:9532:2: iv_ruleLinkExpression= ruleLinkExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLinkExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLinkExpression=ruleLinkExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLinkExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLinkExpression"


    // $ANTLR start "ruleLinkExpression"
    // InternalMASLParser.g:9538:1: ruleLinkExpression returns [EObject current=null] : (this_NavigateExpression_0= ruleNavigateExpression | ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? ) ) ;
    public final EObject ruleLinkExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_6=null;
        EObject this_NavigateExpression_0 = null;

        Enumerator lv_type_2_0 = null;

        EObject lv_lhs_3_0 = null;

        EObject lv_navigation_4_0 = null;

        EObject lv_rhs_5_0 = null;

        EObject lv_assoc_7_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9544:2: ( (this_NavigateExpression_0= ruleNavigateExpression | ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? ) ) )
            // InternalMASLParser.g:9545:2: (this_NavigateExpression_0= ruleNavigateExpression | ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? ) )
            {
            // InternalMASLParser.g:9545:2: (this_NavigateExpression_0= ruleNavigateExpression | ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? ) )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==Dictionary||LA186_0==Anonymous||LA186_0==Find_only||(LA186_0>=Find_all && LA186_0<=Find_one)||LA186_0==Instance||LA186_0==Sequence||LA186_0==Console||(LA186_0>=FILE && LA186_0<=LINE)||LA186_0==Create||LA186_0==Array||(LA186_0>=False && LA186_0<=Flush)||LA186_0==Endl||LA186_0==Find||LA186_0==Null||(LA186_0>=This && LA186_0<=True)||LA186_0==Bag||LA186_0==Set||LA186_0==LeftParenthesis||(LA186_0>=RULE_ID && LA186_0<=RULE_TIMESTAMP)) ) {
                alt186=1;
            }
            else if ( (LA186_0==Unlink||LA186_0==Link) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // InternalMASLParser.g:9546:3: this_NavigateExpression_0= ruleNavigateExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLinkExpressionAccess().getNavigateExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NavigateExpression_0=ruleNavigateExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NavigateExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:9555:3: ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? )
                    {
                    // InternalMASLParser.g:9555:3: ( () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )? )
                    // InternalMASLParser.g:9556:4: () ( (lv_type_2_0= ruleLinkType ) ) ( (lv_lhs_3_0= ruleNavigateExpression ) ) ( (lv_navigation_4_0= ruleRelationshipNavigation ) ) ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )?
                    {
                    // InternalMASLParser.g:9556:4: ()
                    // InternalMASLParser.g:9557:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getLinkExpressionAccess().getLinkExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:9563:4: ( (lv_type_2_0= ruleLinkType ) )
                    // InternalMASLParser.g:9564:5: (lv_type_2_0= ruleLinkType )
                    {
                    // InternalMASLParser.g:9564:5: (lv_type_2_0= ruleLinkType )
                    // InternalMASLParser.g:9565:6: lv_type_2_0= ruleLinkType
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLinkExpressionAccess().getTypeLinkTypeEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_125);
                    lv_type_2_0=ruleLinkType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
                      						}
                      						set(
                      							current,
                      							"type",
                      							lv_type_2_0,
                      							"org.xtuml.bp.xtext.masl.MASL.LinkType");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:9582:4: ( (lv_lhs_3_0= ruleNavigateExpression ) )
                    // InternalMASLParser.g:9583:5: (lv_lhs_3_0= ruleNavigateExpression )
                    {
                    // InternalMASLParser.g:9583:5: (lv_lhs_3_0= ruleNavigateExpression )
                    // InternalMASLParser.g:9584:6: lv_lhs_3_0= ruleNavigateExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLinkExpressionAccess().getLhsNavigateExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_45);
                    lv_lhs_3_0=ruleNavigateExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
                      						}
                      						set(
                      							current,
                      							"lhs",
                      							lv_lhs_3_0,
                      							"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:9601:4: ( (lv_navigation_4_0= ruleRelationshipNavigation ) )
                    // InternalMASLParser.g:9602:5: (lv_navigation_4_0= ruleRelationshipNavigation )
                    {
                    // InternalMASLParser.g:9602:5: (lv_navigation_4_0= ruleRelationshipNavigation )
                    // InternalMASLParser.g:9603:6: lv_navigation_4_0= ruleRelationshipNavigation
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLinkExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_126);
                    lv_navigation_4_0=ruleRelationshipNavigation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
                      						}
                      						set(
                      							current,
                      							"navigation",
                      							lv_navigation_4_0,
                      							"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:9620:4: ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )?
                    int alt185=2;
                    alt185 = dfa185.predict(input);
                    switch (alt185) {
                        case 1 :
                            // InternalMASLParser.g:9621:5: ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )?
                            {
                            // InternalMASLParser.g:9621:5: ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) )
                            // InternalMASLParser.g:9622:6: ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression )
                            {
                            // InternalMASLParser.g:9626:6: (lv_rhs_5_0= ruleNavigateExpression )
                            // InternalMASLParser.g:9627:7: lv_rhs_5_0= ruleNavigateExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getLinkExpressionAccess().getRhsNavigateExpressionParserRuleCall_1_4_0_0());
                              						
                            }
                            pushFollow(FOLLOW_127);
                            lv_rhs_5_0=ruleNavigateExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_5_0,
                              								"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalMASLParser.g:9644:5: (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )?
                            int alt184=2;
                            int LA184_0 = input.LA(1);

                            if ( (LA184_0==Using) ) {
                                alt184=1;
                            }
                            switch (alt184) {
                                case 1 :
                                    // InternalMASLParser.g:9645:6: otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) )
                                    {
                                    otherlv_6=(Token)match(input,Using,FOLLOW_125); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(otherlv_6, grammarAccess.getLinkExpressionAccess().getUsingKeyword_1_4_1_0());
                                      					
                                    }
                                    // InternalMASLParser.g:9649:6: ( (lv_assoc_7_0= ruleNavigateExpression ) )
                                    // InternalMASLParser.g:9650:7: (lv_assoc_7_0= ruleNavigateExpression )
                                    {
                                    // InternalMASLParser.g:9650:7: (lv_assoc_7_0= ruleNavigateExpression )
                                    // InternalMASLParser.g:9651:8: lv_assoc_7_0= ruleNavigateExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      								newCompositeNode(grammarAccess.getLinkExpressionAccess().getAssocNavigateExpressionParserRuleCall_1_4_1_1_0());
                                      							
                                    }
                                    pushFollow(FOLLOW_2);
                                    lv_assoc_7_0=ruleNavigateExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
                                      								}
                                      								set(
                                      									current,
                                      									"assoc",
                                      									lv_assoc_7_0,
                                      									"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }


                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLinkExpression"


    // $ANTLR start "entryRuleNavigateExpression"
    // InternalMASLParser.g:9675:1: entryRuleNavigateExpression returns [EObject current=null] : iv_ruleNavigateExpression= ruleNavigateExpression EOF ;
    public final EObject entryRuleNavigateExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNavigateExpression = null;


        try {
            // InternalMASLParser.g:9675:59: (iv_ruleNavigateExpression= ruleNavigateExpression EOF )
            // InternalMASLParser.g:9676:2: iv_ruleNavigateExpression= ruleNavigateExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNavigateExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNavigateExpression=ruleNavigateExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNavigateExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNavigateExpression"


    // $ANTLR start "ruleNavigateExpression"
    // InternalMASLParser.g:9682:1: ruleNavigateExpression returns [EObject current=null] : (this_ExtendedExpression_0= ruleExtendedExpression ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )* ) ;
    public final EObject ruleNavigateExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject this_ExtendedExpression_0 = null;

        EObject lv_navigation_3_0 = null;

        EObject lv_where_5_0 = null;

        EObject lv_with_8_0 = null;

        EObject lv_navigation_10_0 = null;

        EObject lv_order_12_0 = null;

        EObject lv_reverseOrder_14_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9688:2: ( (this_ExtendedExpression_0= ruleExtendedExpression ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )* ) )
            // InternalMASLParser.g:9689:2: (this_ExtendedExpression_0= ruleExtendedExpression ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )* )
            {
            // InternalMASLParser.g:9689:2: (this_ExtendedExpression_0= ruleExtendedExpression ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )* )
            // InternalMASLParser.g:9690:3: this_ExtendedExpression_0= ruleExtendedExpression ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getNavigateExpressionAccess().getExtendedExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_128);
            this_ExtendedExpression_0=ruleExtendedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExtendedExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:9698:3: ( () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) ) )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==Reverse_ordered_by||LA189_0==Ordered_by||LA189_0==With||LA189_0==HyphenMinusGreaterThanSign) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // InternalMASLParser.g:9699:4: () ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) )
            	    {
            	    // InternalMASLParser.g:9699:4: ()
            	    // InternalMASLParser.g:9700:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getNavigateExpressionAccess().getNavigateExpressionLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalMASLParser.g:9706:4: ( (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? ) | (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) ) | (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) ) | (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) ) )
            	    int alt188=4;
            	    switch ( input.LA(1) ) {
            	    case HyphenMinusGreaterThanSign:
            	        {
            	        alt188=1;
            	        }
            	        break;
            	    case With:
            	        {
            	        alt188=2;
            	        }
            	        break;
            	    case Ordered_by:
            	        {
            	        alt188=3;
            	        }
            	        break;
            	    case Reverse_ordered_by:
            	        {
            	        alt188=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 188, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt188) {
            	        case 1 :
            	            // InternalMASLParser.g:9707:5: (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? )
            	            {
            	            // InternalMASLParser.g:9707:5: (otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )? )
            	            // InternalMASLParser.g:9708:6: otherlv_2= HyphenMinusGreaterThanSign ( (lv_navigation_3_0= ruleRelationshipNavigation ) ) (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )?
            	            {
            	            otherlv_2=(Token)match(input,HyphenMinusGreaterThanSign,FOLLOW_45); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getNavigateExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0_0());
            	              					
            	            }
            	            // InternalMASLParser.g:9712:6: ( (lv_navigation_3_0= ruleRelationshipNavigation ) )
            	            // InternalMASLParser.g:9713:7: (lv_navigation_3_0= ruleRelationshipNavigation )
            	            {
            	            // InternalMASLParser.g:9713:7: (lv_navigation_3_0= ruleRelationshipNavigation )
            	            // InternalMASLParser.g:9714:8: lv_navigation_3_0= ruleRelationshipNavigation
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_1_0_1_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_129);
            	            lv_navigation_3_0=ruleRelationshipNavigation();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	              								}
            	              								set(
            	              									current,
            	              									"navigation",
            	              									lv_navigation_3_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }

            	            // InternalMASLParser.g:9731:6: (otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis )?
            	            int alt187=2;
            	            int LA187_0 = input.LA(1);

            	            if ( (LA187_0==LeftParenthesis) ) {
            	                alt187=1;
            	            }
            	            switch (alt187) {
            	                case 1 :
            	                    // InternalMASLParser.g:9732:7: otherlv_4= LeftParenthesis ( (lv_where_5_0= ruleFindCondition ) ) otherlv_6= RightParenthesis
            	                    {
            	                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_114); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      							newLeafNode(otherlv_4, grammarAccess.getNavigateExpressionAccess().getLeftParenthesisKeyword_1_1_0_2_0());
            	                      						
            	                    }
            	                    // InternalMASLParser.g:9736:7: ( (lv_where_5_0= ruleFindCondition ) )
            	                    // InternalMASLParser.g:9737:8: (lv_where_5_0= ruleFindCondition )
            	                    {
            	                    // InternalMASLParser.g:9737:8: (lv_where_5_0= ruleFindCondition )
            	                    // InternalMASLParser.g:9738:9: lv_where_5_0= ruleFindCondition
            	                    {
            	                    if ( state.backtracking==0 ) {

            	                      									newCompositeNode(grammarAccess.getNavigateExpressionAccess().getWhereFindConditionParserRuleCall_1_1_0_2_1_0());
            	                      								
            	                    }
            	                    pushFollow(FOLLOW_28);
            	                    lv_where_5_0=ruleFindCondition();

            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      									if (current==null) {
            	                      										current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	                      									}
            	                      									set(
            	                      										current,
            	                      										"where",
            	                      										lv_where_5_0,
            	                      										"org.xtuml.bp.xtext.masl.MASL.FindCondition");
            	                      									afterParserOrEnumRuleCall();
            	                      								
            	                    }

            	                    }


            	                    }

            	                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_128); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      							newLeafNode(otherlv_6, grammarAccess.getNavigateExpressionAccess().getRightParenthesisKeyword_1_1_0_2_2());
            	                      						
            	                    }

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalMASLParser.g:9762:5: (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) )
            	            {
            	            // InternalMASLParser.g:9762:5: (otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) ) )
            	            // InternalMASLParser.g:9763:6: otherlv_7= With ( (lv_with_8_0= ruleExtendedExpression ) ) otherlv_9= HyphenMinusGreaterThanSign ( (lv_navigation_10_0= ruleRelationshipNavigation ) )
            	            {
            	            otherlv_7=(Token)match(input,With,FOLLOW_125); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_7, grammarAccess.getNavigateExpressionAccess().getWithKeyword_1_1_1_0());
            	              					
            	            }
            	            // InternalMASLParser.g:9767:6: ( (lv_with_8_0= ruleExtendedExpression ) )
            	            // InternalMASLParser.g:9768:7: (lv_with_8_0= ruleExtendedExpression )
            	            {
            	            // InternalMASLParser.g:9768:7: (lv_with_8_0= ruleExtendedExpression )
            	            // InternalMASLParser.g:9769:8: lv_with_8_0= ruleExtendedExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getWithExtendedExpressionParserRuleCall_1_1_1_1_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_130);
            	            lv_with_8_0=ruleExtendedExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	              								}
            	              								set(
            	              									current,
            	              									"with",
            	              									lv_with_8_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.ExtendedExpression");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }

            	            otherlv_9=(Token)match(input,HyphenMinusGreaterThanSign,FOLLOW_45); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_9, grammarAccess.getNavigateExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1_2());
            	              					
            	            }
            	            // InternalMASLParser.g:9790:6: ( (lv_navigation_10_0= ruleRelationshipNavigation ) )
            	            // InternalMASLParser.g:9791:7: (lv_navigation_10_0= ruleRelationshipNavigation )
            	            {
            	            // InternalMASLParser.g:9791:7: (lv_navigation_10_0= ruleRelationshipNavigation )
            	            // InternalMASLParser.g:9792:8: lv_navigation_10_0= ruleRelationshipNavigation
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_1_1_3_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_128);
            	            lv_navigation_10_0=ruleRelationshipNavigation();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	              								}
            	              								set(
            	              									current,
            	              									"navigation",
            	              									lv_navigation_10_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalMASLParser.g:9811:5: (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) )
            	            {
            	            // InternalMASLParser.g:9811:5: (otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) ) )
            	            // InternalMASLParser.g:9812:6: otherlv_11= Ordered_by ( (lv_order_12_0= ruleSortOrder ) )
            	            {
            	            otherlv_11=(Token)match(input,Ordered_by,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_11, grammarAccess.getNavigateExpressionAccess().getOrdered_byKeyword_1_1_2_0());
            	              					
            	            }
            	            // InternalMASLParser.g:9816:6: ( (lv_order_12_0= ruleSortOrder ) )
            	            // InternalMASLParser.g:9817:7: (lv_order_12_0= ruleSortOrder )
            	            {
            	            // InternalMASLParser.g:9817:7: (lv_order_12_0= ruleSortOrder )
            	            // InternalMASLParser.g:9818:8: lv_order_12_0= ruleSortOrder
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getOrderSortOrderParserRuleCall_1_1_2_1_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_128);
            	            lv_order_12_0=ruleSortOrder();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	              								}
            	              								set(
            	              									current,
            	              									"order",
            	              									lv_order_12_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.SortOrder");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalMASLParser.g:9837:5: (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) )
            	            {
            	            // InternalMASLParser.g:9837:5: (otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) ) )
            	            // InternalMASLParser.g:9838:6: otherlv_13= Reverse_ordered_by ( (lv_reverseOrder_14_0= ruleSortOrder ) )
            	            {
            	            otherlv_13=(Token)match(input,Reverse_ordered_by,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_13, grammarAccess.getNavigateExpressionAccess().getReverse_ordered_byKeyword_1_1_3_0());
            	              					
            	            }
            	            // InternalMASLParser.g:9842:6: ( (lv_reverseOrder_14_0= ruleSortOrder ) )
            	            // InternalMASLParser.g:9843:7: (lv_reverseOrder_14_0= ruleSortOrder )
            	            {
            	            // InternalMASLParser.g:9843:7: (lv_reverseOrder_14_0= ruleSortOrder )
            	            // InternalMASLParser.g:9844:8: lv_reverseOrder_14_0= ruleSortOrder
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getReverseOrderSortOrderParserRuleCall_1_1_3_1_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_128);
            	            lv_reverseOrder_14_0=ruleSortOrder();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
            	              								}
            	              								set(
            	              									current,
            	              									"reverseOrder",
            	              									lv_reverseOrder_14_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.SortOrder");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNavigateExpression"


    // $ANTLR start "entryRuleExtendedExpression"
    // InternalMASLParser.g:9868:1: entryRuleExtendedExpression returns [EObject current=null] : iv_ruleExtendedExpression= ruleExtendedExpression EOF ;
    public final EObject entryRuleExtendedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExtendedExpression = null;


        try {
            // InternalMASLParser.g:9868:59: (iv_ruleExtendedExpression= ruleExtendedExpression EOF )
            // InternalMASLParser.g:9869:2: iv_ruleExtendedExpression= ruleExtendedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExtendedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExtendedExpression=ruleExtendedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExtendedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExtendedExpression"


    // $ANTLR start "ruleExtendedExpression"
    // InternalMASLParser.g:9875:1: ruleExtendedExpression returns [EObject current=null] : (this_PostfixExpression_0= rulePostfixExpression | this_CreateExpression_1= ruleCreateExpression | this_FindExpression_2= ruleFindExpression ) ;
    public final EObject ruleExtendedExpression() throws RecognitionException {
        EObject current = null;

        EObject this_PostfixExpression_0 = null;

        EObject this_CreateExpression_1 = null;

        EObject this_FindExpression_2 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9881:2: ( (this_PostfixExpression_0= rulePostfixExpression | this_CreateExpression_1= ruleCreateExpression | this_FindExpression_2= ruleFindExpression ) )
            // InternalMASLParser.g:9882:2: (this_PostfixExpression_0= rulePostfixExpression | this_CreateExpression_1= ruleCreateExpression | this_FindExpression_2= ruleFindExpression )
            {
            // InternalMASLParser.g:9882:2: (this_PostfixExpression_0= rulePostfixExpression | this_CreateExpression_1= ruleCreateExpression | this_FindExpression_2= ruleFindExpression )
            int alt190=3;
            switch ( input.LA(1) ) {
            case Dictionary:
            case Anonymous:
            case Instance:
            case Sequence:
            case Console:
            case FILE:
            case LINE:
            case Array:
            case False:
            case Flush:
            case Endl:
            case Null:
            case This:
            case True:
            case Bag:
            case Set:
            case LeftParenthesis:
            case RULE_ID:
            case RULE_INT:
            case RULE_REAL:
            case RULE_STRING:
            case RULE_CHAR:
            case RULE_DURATION:
            case RULE_TIMESTAMP:
                {
                alt190=1;
                }
                break;
            case Create:
                {
                alt190=2;
                }
                break;
            case Find_only:
            case Find_all:
            case Find_one:
            case Find:
                {
                alt190=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // InternalMASLParser.g:9883:3: this_PostfixExpression_0= rulePostfixExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getPostfixExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PostfixExpression_0=rulePostfixExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PostfixExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:9892:3: this_CreateExpression_1= ruleCreateExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getCreateExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CreateExpression_1=ruleCreateExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CreateExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:9901:3: this_FindExpression_2= ruleFindExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getFindExpressionParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FindExpression_2=ruleFindExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FindExpression_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExtendedExpression"


    // $ANTLR start "entryRuleSortOrder"
    // InternalMASLParser.g:9913:1: entryRuleSortOrder returns [EObject current=null] : iv_ruleSortOrder= ruleSortOrder EOF ;
    public final EObject entryRuleSortOrder() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortOrder = null;


        try {
            // InternalMASLParser.g:9913:50: (iv_ruleSortOrder= ruleSortOrder EOF )
            // InternalMASLParser.g:9914:2: iv_ruleSortOrder= ruleSortOrder EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortOrderRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortOrder=ruleSortOrder();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortOrder; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortOrder"


    // $ANTLR start "ruleSortOrder"
    // InternalMASLParser.g:9920:1: ruleSortOrder returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleSortOrder() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_components_2_0 = null;

        EObject lv_components_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:9926:2: ( ( () otherlv_1= LeftParenthesis ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )? otherlv_5= RightParenthesis ) )
            // InternalMASLParser.g:9927:2: ( () otherlv_1= LeftParenthesis ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )? otherlv_5= RightParenthesis )
            {
            // InternalMASLParser.g:9927:2: ( () otherlv_1= LeftParenthesis ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )? otherlv_5= RightParenthesis )
            // InternalMASLParser.g:9928:3: () otherlv_1= LeftParenthesis ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )? otherlv_5= RightParenthesis
            {
            // InternalMASLParser.g:9928:3: ()
            // InternalMASLParser.g:9929:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSortOrderAccess().getSortOrderAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_131); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSortOrderAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalMASLParser.g:9939:3: ( ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )* )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==Reverse||LA192_0==RULE_ID) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // InternalMASLParser.g:9940:4: ( (lv_components_2_0= ruleSortOrderComponent ) ) (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )*
                    {
                    // InternalMASLParser.g:9940:4: ( (lv_components_2_0= ruleSortOrderComponent ) )
                    // InternalMASLParser.g:9941:5: (lv_components_2_0= ruleSortOrderComponent )
                    {
                    // InternalMASLParser.g:9941:5: (lv_components_2_0= ruleSortOrderComponent )
                    // InternalMASLParser.g:9942:6: lv_components_2_0= ruleSortOrderComponent
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSortOrderAccess().getComponentsSortOrderComponentParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_components_2_0=ruleSortOrderComponent();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSortOrderRule());
                      						}
                      						add(
                      							current,
                      							"components",
                      							lv_components_2_0,
                      							"org.xtuml.bp.xtext.masl.MASL.SortOrderComponent");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:9959:4: (otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) ) )*
                    loop191:
                    do {
                        int alt191=2;
                        int LA191_0 = input.LA(1);

                        if ( (LA191_0==Comma) ) {
                            alt191=1;
                        }


                        switch (alt191) {
                    	case 1 :
                    	    // InternalMASLParser.g:9960:5: otherlv_3= Comma ( (lv_components_4_0= ruleSortOrderComponent ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_132); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getSortOrderAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:9964:5: ( (lv_components_4_0= ruleSortOrderComponent ) )
                    	    // InternalMASLParser.g:9965:6: (lv_components_4_0= ruleSortOrderComponent )
                    	    {
                    	    // InternalMASLParser.g:9965:6: (lv_components_4_0= ruleSortOrderComponent )
                    	    // InternalMASLParser.g:9966:7: lv_components_4_0= ruleSortOrderComponent
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getSortOrderAccess().getComponentsSortOrderComponentParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_components_4_0=ruleSortOrderComponent();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getSortOrderRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"components",
                    	      								lv_components_4_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.SortOrderComponent");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop191;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getSortOrderAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortOrder"


    // $ANTLR start "entryRuleSortOrderComponent"
    // InternalMASLParser.g:9993:1: entryRuleSortOrderComponent returns [EObject current=null] : iv_ruleSortOrderComponent= ruleSortOrderComponent EOF ;
    public final EObject entryRuleSortOrderComponent() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortOrderComponent = null;


        try {
            // InternalMASLParser.g:9993:59: (iv_ruleSortOrderComponent= ruleSortOrderComponent EOF )
            // InternalMASLParser.g:9994:2: iv_ruleSortOrderComponent= ruleSortOrderComponent EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortOrderComponentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortOrderComponent=ruleSortOrderComponent();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortOrderComponent; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortOrderComponent"


    // $ANTLR start "ruleSortOrderComponent"
    // InternalMASLParser.g:10000:1: ruleSortOrderComponent returns [EObject current=null] : ( ( (lv_reverse_0_0= Reverse ) )? ( (lv_feature_1_0= ruleSortOrderFeature ) ) ) ;
    public final EObject ruleSortOrderComponent() throws RecognitionException {
        EObject current = null;

        Token lv_reverse_0_0=null;
        EObject lv_feature_1_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10006:2: ( ( ( (lv_reverse_0_0= Reverse ) )? ( (lv_feature_1_0= ruleSortOrderFeature ) ) ) )
            // InternalMASLParser.g:10007:2: ( ( (lv_reverse_0_0= Reverse ) )? ( (lv_feature_1_0= ruleSortOrderFeature ) ) )
            {
            // InternalMASLParser.g:10007:2: ( ( (lv_reverse_0_0= Reverse ) )? ( (lv_feature_1_0= ruleSortOrderFeature ) ) )
            // InternalMASLParser.g:10008:3: ( (lv_reverse_0_0= Reverse ) )? ( (lv_feature_1_0= ruleSortOrderFeature ) )
            {
            // InternalMASLParser.g:10008:3: ( (lv_reverse_0_0= Reverse ) )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==Reverse) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // InternalMASLParser.g:10009:4: (lv_reverse_0_0= Reverse )
                    {
                    // InternalMASLParser.g:10009:4: (lv_reverse_0_0= Reverse )
                    // InternalMASLParser.g:10010:5: lv_reverse_0_0= Reverse
                    {
                    lv_reverse_0_0=(Token)match(input,Reverse,FOLLOW_132); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_reverse_0_0, grammarAccess.getSortOrderComponentAccess().getReverseReverseKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSortOrderComponentRule());
                      					}
                      					setWithLastConsumed(current, "reverse", true, "reverse");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:10022:3: ( (lv_feature_1_0= ruleSortOrderFeature ) )
            // InternalMASLParser.g:10023:4: (lv_feature_1_0= ruleSortOrderFeature )
            {
            // InternalMASLParser.g:10023:4: (lv_feature_1_0= ruleSortOrderFeature )
            // InternalMASLParser.g:10024:5: lv_feature_1_0= ruleSortOrderFeature
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSortOrderComponentAccess().getFeatureSortOrderFeatureParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_feature_1_0=ruleSortOrderFeature();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSortOrderComponentRule());
              					}
              					set(
              						current,
              						"feature",
              						lv_feature_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.SortOrderFeature");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortOrderComponent"


    // $ANTLR start "entryRuleSortOrderFeature"
    // InternalMASLParser.g:10045:1: entryRuleSortOrderFeature returns [EObject current=null] : iv_ruleSortOrderFeature= ruleSortOrderFeature EOF ;
    public final EObject entryRuleSortOrderFeature() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSortOrderFeature = null;


        try {
            // InternalMASLParser.g:10045:57: (iv_ruleSortOrderFeature= ruleSortOrderFeature EOF )
            // InternalMASLParser.g:10046:2: iv_ruleSortOrderFeature= ruleSortOrderFeature EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSortOrderFeatureRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSortOrderFeature=ruleSortOrderFeature();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSortOrderFeature; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSortOrderFeature"


    // $ANTLR start "ruleSortOrderFeature"
    // InternalMASLParser.g:10052:1: ruleSortOrderFeature returns [EObject current=null] : ( () ( (otherlv_1= RULE_ID ) ) ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )* ) ;
    public final EObject ruleSortOrderFeature() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;


        	enterRule();

        try {
            // InternalMASLParser.g:10058:2: ( ( () ( (otherlv_1= RULE_ID ) ) ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )* ) )
            // InternalMASLParser.g:10059:2: ( () ( (otherlv_1= RULE_ID ) ) ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )* )
            {
            // InternalMASLParser.g:10059:2: ( () ( (otherlv_1= RULE_ID ) ) ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )* )
            // InternalMASLParser.g:10060:3: () ( (otherlv_1= RULE_ID ) ) ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )*
            {
            // InternalMASLParser.g:10060:3: ()
            // InternalMASLParser.g:10061:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSortOrderFeatureAccess().getSortOrderFeatureAction_0(),
              					current);
              			
            }

            }

            // InternalMASLParser.g:10067:3: ( (otherlv_1= RULE_ID ) )
            // InternalMASLParser.g:10068:4: (otherlv_1= RULE_ID )
            {
            // InternalMASLParser.g:10068:4: (otherlv_1= RULE_ID )
            // InternalMASLParser.g:10069:5: otherlv_1= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSortOrderFeatureRule());
              					}
              				
            }
            otherlv_1=(Token)match(input,RULE_ID,FOLLOW_82); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getSortOrderFeatureAccess().getFeatureAbstractFeatureCrossReference_1_0());
              				
            }

            }


            }

            // InternalMASLParser.g:10080:3: ( () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) ) )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==FullStop) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // InternalMASLParser.g:10081:4: () otherlv_3= FullStop ( (otherlv_4= RULE_ID ) )
            	    {
            	    // InternalMASLParser.g:10081:4: ()
            	    // InternalMASLParser.g:10082:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getSortOrderFeatureAccess().getSimpleFeatureCallReceiverAction_2_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_3=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getSortOrderFeatureAccess().getFullStopKeyword_2_1());
            	      			
            	    }
            	    // InternalMASLParser.g:10092:4: ( (otherlv_4= RULE_ID ) )
            	    // InternalMASLParser.g:10093:5: (otherlv_4= RULE_ID )
            	    {
            	    // InternalMASLParser.g:10093:5: (otherlv_4= RULE_ID )
            	    // InternalMASLParser.g:10094:6: otherlv_4= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getSortOrderFeatureRule());
            	      						}
            	      					
            	    }
            	    otherlv_4=(Token)match(input,RULE_ID,FOLLOW_82); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_4, grammarAccess.getSortOrderFeatureAccess().getFeatureAbstractFeatureCrossReference_2_2_0());
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSortOrderFeature"


    // $ANTLR start "entryRuleCreateExpression"
    // InternalMASLParser.g:10110:1: entryRuleCreateExpression returns [EObject current=null] : iv_ruleCreateExpression= ruleCreateExpression EOF ;
    public final EObject entryRuleCreateExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateExpression = null;


        try {
            // InternalMASLParser.g:10110:57: (iv_ruleCreateExpression= ruleCreateExpression EOF )
            // InternalMASLParser.g:10111:2: iv_ruleCreateExpression= ruleCreateExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateExpression=ruleCreateExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateExpression"


    // $ANTLR start "ruleCreateExpression"
    // InternalMASLParser.g:10117:1: ruleCreateExpression returns [EObject current=null] : (otherlv_0= Create ( (lv_unique_1_0= Unique ) )? ( (otherlv_2= RULE_ID ) ) otherlv_3= LeftParenthesis ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )? otherlv_7= RightParenthesis ) ;
    public final EObject ruleCreateExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_unique_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_arguments_4_0 = null;

        EObject lv_arguments_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10123:2: ( (otherlv_0= Create ( (lv_unique_1_0= Unique ) )? ( (otherlv_2= RULE_ID ) ) otherlv_3= LeftParenthesis ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )? otherlv_7= RightParenthesis ) )
            // InternalMASLParser.g:10124:2: (otherlv_0= Create ( (lv_unique_1_0= Unique ) )? ( (otherlv_2= RULE_ID ) ) otherlv_3= LeftParenthesis ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )? otherlv_7= RightParenthesis )
            {
            // InternalMASLParser.g:10124:2: (otherlv_0= Create ( (lv_unique_1_0= Unique ) )? ( (otherlv_2= RULE_ID ) ) otherlv_3= LeftParenthesis ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )? otherlv_7= RightParenthesis )
            // InternalMASLParser.g:10125:3: otherlv_0= Create ( (lv_unique_1_0= Unique ) )? ( (otherlv_2= RULE_ID ) ) otherlv_3= LeftParenthesis ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )? otherlv_7= RightParenthesis
            {
            otherlv_0=(Token)match(input,Create,FOLLOW_133); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateExpressionAccess().getCreateKeyword_0());
              		
            }
            // InternalMASLParser.g:10129:3: ( (lv_unique_1_0= Unique ) )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==Unique) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // InternalMASLParser.g:10130:4: (lv_unique_1_0= Unique )
                    {
                    // InternalMASLParser.g:10130:4: (lv_unique_1_0= Unique )
                    // InternalMASLParser.g:10131:5: lv_unique_1_0= Unique
                    {
                    lv_unique_1_0=(Token)match(input,Unique,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_unique_1_0, grammarAccess.getCreateExpressionAccess().getUniqueUniqueKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getCreateExpressionRule());
                      					}
                      					setWithLastConsumed(current, "unique", true, "unique");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalMASLParser.g:10143:3: ( (otherlv_2= RULE_ID ) )
            // InternalMASLParser.g:10144:4: (otherlv_2= RULE_ID )
            {
            // InternalMASLParser.g:10144:4: (otherlv_2= RULE_ID )
            // InternalMASLParser.g:10145:5: otherlv_2= RULE_ID
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getCreateExpressionRule());
              					}
              				
            }
            otherlv_2=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getCreateExpressionAccess().getObjectObjectDeclarationCrossReference_2_0());
              				
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_134); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getCreateExpressionAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalMASLParser.g:10160:3: ( ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )* )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==Current_State||LA197_0==RULE_ID) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // InternalMASLParser.g:10161:4: ( (lv_arguments_4_0= ruleCreateArgument ) ) (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )*
                    {
                    // InternalMASLParser.g:10161:4: ( (lv_arguments_4_0= ruleCreateArgument ) )
                    // InternalMASLParser.g:10162:5: (lv_arguments_4_0= ruleCreateArgument )
                    {
                    // InternalMASLParser.g:10162:5: (lv_arguments_4_0= ruleCreateArgument )
                    // InternalMASLParser.g:10163:6: lv_arguments_4_0= ruleCreateArgument
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCreateExpressionAccess().getArgumentsCreateArgumentParserRuleCall_4_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_arguments_4_0=ruleCreateArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCreateExpressionRule());
                      						}
                      						add(
                      							current,
                      							"arguments",
                      							lv_arguments_4_0,
                      							"org.xtuml.bp.xtext.masl.MASL.CreateArgument");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalMASLParser.g:10180:4: (otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) ) )*
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);

                        if ( (LA196_0==Comma) ) {
                            alt196=1;
                        }


                        switch (alt196) {
                    	case 1 :
                    	    // InternalMASLParser.g:10181:5: otherlv_5= Comma ( (lv_arguments_6_0= ruleCreateArgument ) )
                    	    {
                    	    otherlv_5=(Token)match(input,Comma,FOLLOW_135); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_5, grammarAccess.getCreateExpressionAccess().getCommaKeyword_4_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:10185:5: ( (lv_arguments_6_0= ruleCreateArgument ) )
                    	    // InternalMASLParser.g:10186:6: (lv_arguments_6_0= ruleCreateArgument )
                    	    {
                    	    // InternalMASLParser.g:10186:6: (lv_arguments_6_0= ruleCreateArgument )
                    	    // InternalMASLParser.g:10187:7: lv_arguments_6_0= ruleCreateArgument
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getCreateExpressionAccess().getArgumentsCreateArgumentParserRuleCall_4_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_arguments_6_0=ruleCreateArgument();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getCreateExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"arguments",
                    	      								lv_arguments_6_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.CreateArgument");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop196;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getCreateExpressionAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateExpression"


    // $ANTLR start "entryRuleCreateArgument"
    // InternalMASLParser.g:10214:1: entryRuleCreateArgument returns [EObject current=null] : iv_ruleCreateArgument= ruleCreateArgument EOF ;
    public final EObject entryRuleCreateArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateArgument = null;


        try {
            // InternalMASLParser.g:10214:55: (iv_ruleCreateArgument= ruleCreateArgument EOF )
            // InternalMASLParser.g:10215:2: iv_ruleCreateArgument= ruleCreateArgument EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateArgument=ruleCreateArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateArgument"


    // $ANTLR start "ruleCreateArgument"
    // InternalMASLParser.g:10221:1: ruleCreateArgument returns [EObject current=null] : ( ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) ) | (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) ) ) ;
    public final EObject ruleCreateArgument() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10227:2: ( ( ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) ) | (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) ) ) )
            // InternalMASLParser.g:10228:2: ( ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) ) | (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) ) )
            {
            // InternalMASLParser.g:10228:2: ( ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) ) | (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) ) )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==RULE_ID) ) {
                alt198=1;
            }
            else if ( (LA198_0==Current_State) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // InternalMASLParser.g:10229:3: ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) )
                    {
                    // InternalMASLParser.g:10229:3: ( ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) ) )
                    // InternalMASLParser.g:10230:4: ( (otherlv_0= RULE_ID ) ) otherlv_1= EqualsSignGreaterThanSign ( (lv_value_2_0= ruleExpression ) )
                    {
                    // InternalMASLParser.g:10230:4: ( (otherlv_0= RULE_ID ) )
                    // InternalMASLParser.g:10231:5: (otherlv_0= RULE_ID )
                    {
                    // InternalMASLParser.g:10231:5: (otherlv_0= RULE_ID )
                    // InternalMASLParser.g:10232:6: otherlv_0= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCreateArgumentRule());
                      						}
                      					
                    }
                    otherlv_0=(Token)match(input,RULE_ID,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_0, grammarAccess.getCreateArgumentAccess().getAttributeAttributeDefinitionCrossReference_0_0_0());
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getCreateArgumentAccess().getEqualsSignGreaterThanSignKeyword_0_1());
                      			
                    }
                    // InternalMASLParser.g:10247:4: ( (lv_value_2_0= ruleExpression ) )
                    // InternalMASLParser.g:10248:5: (lv_value_2_0= ruleExpression )
                    {
                    // InternalMASLParser.g:10248:5: (lv_value_2_0= ruleExpression )
                    // InternalMASLParser.g:10249:6: lv_value_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCreateArgumentAccess().getValueExpressionParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCreateArgumentRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.xtuml.bp.xtext.masl.MASL.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:10268:3: (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) )
                    {
                    // InternalMASLParser.g:10268:3: (otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) ) )
                    // InternalMASLParser.g:10269:4: otherlv_3= Current_State otherlv_4= EqualsSignGreaterThanSign ( (otherlv_5= RULE_ID ) )
                    {
                    otherlv_3=(Token)match(input,Current_State,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getCreateArgumentAccess().getCurrent_StateKeyword_1_0());
                      			
                    }
                    otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getCreateArgumentAccess().getEqualsSignGreaterThanSignKeyword_1_1());
                      			
                    }
                    // InternalMASLParser.g:10277:4: ( (otherlv_5= RULE_ID ) )
                    // InternalMASLParser.g:10278:5: (otherlv_5= RULE_ID )
                    {
                    // InternalMASLParser.g:10278:5: (otherlv_5= RULE_ID )
                    // InternalMASLParser.g:10279:6: otherlv_5= RULE_ID
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCreateArgumentRule());
                      						}
                      					
                    }
                    otherlv_5=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getCreateArgumentAccess().getCurrentStateStateDeclarationCrossReference_1_2_0());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateArgument"


    // $ANTLR start "entryRuleFindExpression"
    // InternalMASLParser.g:10295:1: entryRuleFindExpression returns [EObject current=null] : iv_ruleFindExpression= ruleFindExpression EOF ;
    public final EObject entryRuleFindExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFindExpression = null;


        try {
            // InternalMASLParser.g:10295:55: (iv_ruleFindExpression= ruleFindExpression EOF )
            // InternalMASLParser.g:10296:2: iv_ruleFindExpression= ruleFindExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFindExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFindExpression=ruleFindExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFindExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFindExpression"


    // $ANTLR start "ruleFindExpression"
    // InternalMASLParser.g:10302:1: ruleFindExpression returns [EObject current=null] : ( ( (lv_type_0_0= ruleFindType ) ) ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) ) otherlv_2= LeftParenthesis ( (lv_where_3_0= ruleFindCondition ) )? otherlv_4= RightParenthesis ) ;
    public final EObject ruleFindExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Enumerator lv_type_0_0 = null;

        EObject lv_expression_1_0 = null;

        EObject lv_where_3_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10308:2: ( ( ( (lv_type_0_0= ruleFindType ) ) ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) ) otherlv_2= LeftParenthesis ( (lv_where_3_0= ruleFindCondition ) )? otherlv_4= RightParenthesis ) )
            // InternalMASLParser.g:10309:2: ( ( (lv_type_0_0= ruleFindType ) ) ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) ) otherlv_2= LeftParenthesis ( (lv_where_3_0= ruleFindCondition ) )? otherlv_4= RightParenthesis )
            {
            // InternalMASLParser.g:10309:2: ( ( (lv_type_0_0= ruleFindType ) ) ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) ) otherlv_2= LeftParenthesis ( (lv_where_3_0= ruleFindCondition ) )? otherlv_4= RightParenthesis )
            // InternalMASLParser.g:10310:3: ( (lv_type_0_0= ruleFindType ) ) ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) ) otherlv_2= LeftParenthesis ( (lv_where_3_0= ruleFindCondition ) )? otherlv_4= RightParenthesis
            {
            // InternalMASLParser.g:10310:3: ( (lv_type_0_0= ruleFindType ) )
            // InternalMASLParser.g:10311:4: (lv_type_0_0= ruleFindType )
            {
            // InternalMASLParser.g:10311:4: (lv_type_0_0= ruleFindType )
            // InternalMASLParser.g:10312:5: lv_type_0_0= ruleFindType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFindExpressionAccess().getTypeFindTypeEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_136);
            lv_type_0_0=ruleFindType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFindExpressionRule());
              					}
              					set(
              						current,
              						"type",
              						lv_type_0_0,
              						"org.xtuml.bp.xtext.masl.MASL.FindType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalMASLParser.g:10329:3: ( (lv_expression_1_0= rulePostfixNoActionCallExpression ) )
            // InternalMASLParser.g:10330:4: (lv_expression_1_0= rulePostfixNoActionCallExpression )
            {
            // InternalMASLParser.g:10330:4: (lv_expression_1_0= rulePostfixNoActionCallExpression )
            // InternalMASLParser.g:10331:5: lv_expression_1_0= rulePostfixNoActionCallExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFindExpressionAccess().getExpressionPostfixNoActionCallExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_expression_1_0=rulePostfixNoActionCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFindExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.xtuml.bp.xtext.masl.MASL.PostfixNoActionCallExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_137); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFindExpressionAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalMASLParser.g:10352:3: ( (lv_where_3_0= ruleFindCondition ) )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==Not||LA199_0==LeftParenthesis||LA199_0==RULE_ID) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // InternalMASLParser.g:10353:4: (lv_where_3_0= ruleFindCondition )
                    {
                    // InternalMASLParser.g:10353:4: (lv_where_3_0= ruleFindCondition )
                    // InternalMASLParser.g:10354:5: lv_where_3_0= ruleFindCondition
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFindExpressionAccess().getWhereFindConditionParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_28);
                    lv_where_3_0=ruleFindCondition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFindExpressionRule());
                      					}
                      					set(
                      						current,
                      						"where",
                      						lv_where_3_0,
                      						"org.xtuml.bp.xtext.masl.MASL.FindCondition");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getFindExpressionAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindExpression"


    // $ANTLR start "entryRulePostfixExpression"
    // InternalMASLParser.g:10379:1: entryRulePostfixExpression returns [EObject current=null] : iv_rulePostfixExpression= rulePostfixExpression EOF ;
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePostfixExpression = null;


        try {
            // InternalMASLParser.g:10379:58: (iv_rulePostfixExpression= rulePostfixExpression EOF )
            // InternalMASLParser.g:10380:2: iv_rulePostfixExpression= rulePostfixExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePostfixExpression"


    // $ANTLR start "rulePostfixExpression"
    // InternalMASLParser.g:10386:1: rulePostfixExpression returns [EObject current=null] : (this_PrimaryExpression_0= rulePrimaryExpression ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )* ) ;
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_19=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token otherlv_29=null;
        EObject this_PrimaryExpression_0 = null;

        EObject lv_arguments_3_0 = null;

        EObject lv_arguments_5_0 = null;

        EObject lv_arguments_14_0 = null;

        EObject lv_arguments_16_0 = null;

        EObject lv_brackets_20_0 = null;

        EObject lv_arguments_26_0 = null;

        EObject lv_arguments_28_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10392:2: ( (this_PrimaryExpression_0= rulePrimaryExpression ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )* ) )
            // InternalMASLParser.g:10393:2: (this_PrimaryExpression_0= rulePrimaryExpression ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )* )
            {
            // InternalMASLParser.g:10393:2: (this_PrimaryExpression_0= rulePrimaryExpression ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )* )
            // InternalMASLParser.g:10394:3: this_PrimaryExpression_0= rulePrimaryExpression ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_138);
            this_PrimaryExpression_0=rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PrimaryExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:10402:3: ( ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis ) | ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) ) | ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis ) | ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket ) | ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? ) )*
            loop207:
            do {
                int alt207=6;
                switch ( input.LA(1) ) {
                case LeftParenthesis:
                    {
                    alt207=1;
                    }
                    break;
                case FullStop:
                    {
                    alt207=2;
                    }
                    break;
                case TildeGreaterThanSign:
                    {
                    alt207=3;
                    }
                    break;
                case LeftSquareBracket:
                    {
                    alt207=4;
                    }
                    break;
                case Apostrophe:
                    {
                    alt207=5;
                    }
                    break;

                }

                switch (alt207) {
            	case 1 :
            	    // InternalMASLParser.g:10403:4: ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            	    {
            	    // InternalMASLParser.g:10403:4: ( () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis )
            	    // InternalMASLParser.g:10404:5: () ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis ) ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )? otherlv_6= RightParenthesis
            	    {
            	    // InternalMASLParser.g:10404:5: ()
            	    // InternalMASLParser.g:10405:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixExpressionAccess().getActionCallReceiverAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    // InternalMASLParser.g:10411:5: ( ( LeftParenthesis )=>otherlv_2= LeftParenthesis )
            	    // InternalMASLParser.g:10412:6: ( LeftParenthesis )=>otherlv_2= LeftParenthesis
            	    {
            	    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_2, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_0_1());
            	      					
            	    }

            	    }

            	    // InternalMASLParser.g:10418:5: ( ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )* )?
            	    int alt201=2;
            	    int LA201_0 = input.LA(1);

            	    if ( (LA201_0==Dictionary||LA201_0==Anonymous||LA201_0==Find_only||(LA201_0>=Find_all && LA201_0<=Find_one)||LA201_0==Instance||LA201_0==Sequence||LA201_0==Console||(LA201_0>=FILE && LA201_0<=LINE)||LA201_0==Create||(LA201_0>=Unlink && LA201_0<=Array)||(LA201_0>=False && LA201_0<=Flush)||LA201_0==Endl||LA201_0==Find||LA201_0==Link||LA201_0==Null||(LA201_0>=This && LA201_0<=True)||LA201_0==Abs||LA201_0==Bag||LA201_0==Not||LA201_0==Set||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||(LA201_0>=RULE_ID && LA201_0<=RULE_TIMESTAMP)) ) {
            	        alt201=1;
            	    }
            	    switch (alt201) {
            	        case 1 :
            	            // InternalMASLParser.g:10419:6: ( (lv_arguments_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )*
            	            {
            	            // InternalMASLParser.g:10419:6: ( (lv_arguments_3_0= ruleExpression ) )
            	            // InternalMASLParser.g:10420:7: (lv_arguments_3_0= ruleExpression )
            	            {
            	            // InternalMASLParser.g:10420:7: (lv_arguments_3_0= ruleExpression )
            	            // InternalMASLParser.g:10421:8: lv_arguments_3_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_0_2_0_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_10);
            	            lv_arguments_3_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	              								}
            	              								add(
            	              									current,
            	              									"arguments",
            	              									lv_arguments_3_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.Expression");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }

            	            // InternalMASLParser.g:10438:6: (otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) ) )*
            	            loop200:
            	            do {
            	                int alt200=2;
            	                int LA200_0 = input.LA(1);

            	                if ( (LA200_0==Comma) ) {
            	                    alt200=1;
            	                }


            	                switch (alt200) {
            	            	case 1 :
            	            	    // InternalMASLParser.g:10439:7: otherlv_4= Comma ( (lv_arguments_5_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_4=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      							newLeafNode(otherlv_4, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_0_2_1_0());
            	            	      						
            	            	    }
            	            	    // InternalMASLParser.g:10443:7: ( (lv_arguments_5_0= ruleExpression ) )
            	            	    // InternalMASLParser.g:10444:8: (lv_arguments_5_0= ruleExpression )
            	            	    {
            	            	    // InternalMASLParser.g:10444:8: (lv_arguments_5_0= ruleExpression )
            	            	    // InternalMASLParser.g:10445:9: lv_arguments_5_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_0_2_1_1_0());
            	            	      								
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_arguments_5_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      									if (current==null) {
            	            	      										current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	            	      									}
            	            	      									add(
            	            	      										current,
            	            	      										"arguments",
            	            	      										lv_arguments_5_0,
            	            	      										"org.xtuml.bp.xtext.masl.MASL.Expression");
            	            	      									afterParserOrEnumRuleCall();
            	            	      								
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop200;
            	                }
            	            } while (true);


            	            }
            	            break;

            	    }

            	    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_138); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_6, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_0_3());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:10470:4: ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) )
            	    {
            	    // InternalMASLParser.g:10470:4: ( () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) ) )
            	    // InternalMASLParser.g:10471:5: () otherlv_8= FullStop ( (otherlv_9= RULE_ID ) )
            	    {
            	    // InternalMASLParser.g:10471:5: ()
            	    // InternalMASLParser.g:10472:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixExpressionAccess().getSimpleFeatureCallReceiverAction_1_1_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_8=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_8, grammarAccess.getPostfixExpressionAccess().getFullStopKeyword_1_1_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10482:5: ( (otherlv_9= RULE_ID ) )
            	    // InternalMASLParser.g:10483:6: (otherlv_9= RULE_ID )
            	    {
            	    // InternalMASLParser.g:10483:6: (otherlv_9= RULE_ID )
            	    // InternalMASLParser.g:10484:7: otherlv_9= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getPostfixExpressionRule());
            	      							}
            	      						
            	    }
            	    otherlv_9=(Token)match(input,RULE_ID,FOLLOW_138); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							newLeafNode(otherlv_9, grammarAccess.getPostfixExpressionAccess().getFeatureAbstractFeatureCrossReference_1_1_2_0());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalMASLParser.g:10497:4: ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis )
            	    {
            	    // InternalMASLParser.g:10497:4: ( () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis )
            	    // InternalMASLParser.g:10498:5: () otherlv_11= TildeGreaterThanSign ( (otherlv_12= RULE_ID ) ) otherlv_13= LeftParenthesis ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )? otherlv_17= RightParenthesis
            	    {
            	    // InternalMASLParser.g:10498:5: ()
            	    // InternalMASLParser.g:10499:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixExpressionAccess().getTerminatorActionCallReceiverAction_1_2_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_11=(Token)match(input,TildeGreaterThanSign,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_11, grammarAccess.getPostfixExpressionAccess().getTildeGreaterThanSignKeyword_1_2_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10509:5: ( (otherlv_12= RULE_ID ) )
            	    // InternalMASLParser.g:10510:6: (otherlv_12= RULE_ID )
            	    {
            	    // InternalMASLParser.g:10510:6: (otherlv_12= RULE_ID )
            	    // InternalMASLParser.g:10511:7: otherlv_12= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getPostfixExpressionRule());
            	      							}
            	      						
            	    }
            	    otherlv_12=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							newLeafNode(otherlv_12, grammarAccess.getPostfixExpressionAccess().getTerminatorActionAbstractFeatureCrossReference_1_2_2_0());
            	      						
            	    }

            	    }


            	    }

            	    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_13, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_2_3());
            	      				
            	    }
            	    // InternalMASLParser.g:10526:5: ( ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )* )?
            	    int alt203=2;
            	    int LA203_0 = input.LA(1);

            	    if ( (LA203_0==Dictionary||LA203_0==Anonymous||LA203_0==Find_only||(LA203_0>=Find_all && LA203_0<=Find_one)||LA203_0==Instance||LA203_0==Sequence||LA203_0==Console||(LA203_0>=FILE && LA203_0<=LINE)||LA203_0==Create||(LA203_0>=Unlink && LA203_0<=Array)||(LA203_0>=False && LA203_0<=Flush)||LA203_0==Endl||LA203_0==Find||LA203_0==Link||LA203_0==Null||(LA203_0>=This && LA203_0<=True)||LA203_0==Abs||LA203_0==Bag||LA203_0==Not||LA203_0==Set||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||(LA203_0>=RULE_ID && LA203_0<=RULE_TIMESTAMP)) ) {
            	        alt203=1;
            	    }
            	    switch (alt203) {
            	        case 1 :
            	            // InternalMASLParser.g:10527:6: ( (lv_arguments_14_0= ruleExpression ) ) (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )*
            	            {
            	            // InternalMASLParser.g:10527:6: ( (lv_arguments_14_0= ruleExpression ) )
            	            // InternalMASLParser.g:10528:7: (lv_arguments_14_0= ruleExpression )
            	            {
            	            // InternalMASLParser.g:10528:7: (lv_arguments_14_0= ruleExpression )
            	            // InternalMASLParser.g:10529:8: lv_arguments_14_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              								newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_2_4_0_0());
            	              							
            	            }
            	            pushFollow(FOLLOW_10);
            	            lv_arguments_14_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	              								}
            	              								add(
            	              									current,
            	              									"arguments",
            	              									lv_arguments_14_0,
            	              									"org.xtuml.bp.xtext.masl.MASL.Expression");
            	              								afterParserOrEnumRuleCall();
            	              							
            	            }

            	            }


            	            }

            	            // InternalMASLParser.g:10546:6: (otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) ) )*
            	            loop202:
            	            do {
            	                int alt202=2;
            	                int LA202_0 = input.LA(1);

            	                if ( (LA202_0==Comma) ) {
            	                    alt202=1;
            	                }


            	                switch (alt202) {
            	            	case 1 :
            	            	    // InternalMASLParser.g:10547:7: otherlv_15= Comma ( (lv_arguments_16_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_15=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      							newLeafNode(otherlv_15, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_2_4_1_0());
            	            	      						
            	            	    }
            	            	    // InternalMASLParser.g:10551:7: ( (lv_arguments_16_0= ruleExpression ) )
            	            	    // InternalMASLParser.g:10552:8: (lv_arguments_16_0= ruleExpression )
            	            	    {
            	            	    // InternalMASLParser.g:10552:8: (lv_arguments_16_0= ruleExpression )
            	            	    // InternalMASLParser.g:10553:9: lv_arguments_16_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_2_4_1_1_0());
            	            	      								
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_arguments_16_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      									if (current==null) {
            	            	      										current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	            	      									}
            	            	      									add(
            	            	      										current,
            	            	      										"arguments",
            	            	      										lv_arguments_16_0,
            	            	      										"org.xtuml.bp.xtext.masl.MASL.Expression");
            	            	      									afterParserOrEnumRuleCall();
            	            	      								
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop202;
            	                }
            	            } while (true);


            	            }
            	            break;

            	    }

            	    otherlv_17=(Token)match(input,RightParenthesis,FOLLOW_138); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_17, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_2_5());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalMASLParser.g:10578:4: ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket )
            	    {
            	    // InternalMASLParser.g:10578:4: ( () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket )
            	    // InternalMASLParser.g:10579:5: () otherlv_19= LeftSquareBracket ( (lv_brackets_20_0= ruleExpression ) ) otherlv_21= RightSquareBracket
            	    {
            	    // InternalMASLParser.g:10579:5: ()
            	    // InternalMASLParser.g:10580:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixExpressionAccess().getIndexedExpressionReceiverAction_1_3_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_19, grammarAccess.getPostfixExpressionAccess().getLeftSquareBracketKeyword_1_3_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10590:5: ( (lv_brackets_20_0= ruleExpression ) )
            	    // InternalMASLParser.g:10591:6: (lv_brackets_20_0= ruleExpression )
            	    {
            	    // InternalMASLParser.g:10591:6: (lv_brackets_20_0= ruleExpression )
            	    // InternalMASLParser.g:10592:7: lv_brackets_20_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getBracketsExpressionParserRuleCall_1_3_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_brackets_20_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"brackets",
            	      								lv_brackets_20_0,
            	      								"org.xtuml.bp.xtext.masl.MASL.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    otherlv_21=(Token)match(input,RightSquareBracket,FOLLOW_138); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_21, grammarAccess.getPostfixExpressionAccess().getRightSquareBracketKeyword_1_3_3());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalMASLParser.g:10615:4: ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? )
            	    {
            	    // InternalMASLParser.g:10615:4: ( () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )? )
            	    // InternalMASLParser.g:10616:5: () otherlv_23= Apostrophe ( ( ruleCharacteristicID ) ) ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )?
            	    {
            	    // InternalMASLParser.g:10616:5: ()
            	    // InternalMASLParser.g:10617:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixExpressionAccess().getCharacteristicCallReceiverAction_1_4_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_23=(Token)match(input,Apostrophe,FOLLOW_30); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_23, grammarAccess.getPostfixExpressionAccess().getApostropheKeyword_1_4_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10627:5: ( ( ruleCharacteristicID ) )
            	    // InternalMASLParser.g:10628:6: ( ruleCharacteristicID )
            	    {
            	    // InternalMASLParser.g:10628:6: ( ruleCharacteristicID )
            	    // InternalMASLParser.g:10629:7: ruleCharacteristicID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getPostfixExpressionRule());
            	      							}
            	      						
            	    }
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getCharacteristicCharacteristicCrossReference_1_4_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_138);
            	    ruleCharacteristicID();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    // InternalMASLParser.g:10643:5: ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )?
            	    int alt206=2;
            	    alt206 = dfa206.predict(input);
            	    switch (alt206) {
            	        case 1 :
            	            // InternalMASLParser.g:10644:6: ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis
            	            {
            	            // InternalMASLParser.g:10644:6: ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis )
            	            // InternalMASLParser.g:10645:7: ( LeftParenthesis )=>otherlv_25= LeftParenthesis
            	            {
            	            otherlv_25=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							newLeafNode(otherlv_25, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_4_3_0());
            	              						
            	            }

            	            }

            	            // InternalMASLParser.g:10651:6: ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )?
            	            int alt205=2;
            	            int LA205_0 = input.LA(1);

            	            if ( (LA205_0==Dictionary||LA205_0==Anonymous||LA205_0==Find_only||(LA205_0>=Find_all && LA205_0<=Find_one)||LA205_0==Instance||LA205_0==Sequence||LA205_0==Console||(LA205_0>=FILE && LA205_0<=LINE)||LA205_0==Create||(LA205_0>=Unlink && LA205_0<=Array)||(LA205_0>=False && LA205_0<=Flush)||LA205_0==Endl||LA205_0==Find||LA205_0==Link||LA205_0==Null||(LA205_0>=This && LA205_0<=True)||LA205_0==Abs||LA205_0==Bag||LA205_0==Not||LA205_0==Set||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||(LA205_0>=RULE_ID && LA205_0<=RULE_TIMESTAMP)) ) {
            	                alt205=1;
            	            }
            	            switch (alt205) {
            	                case 1 :
            	                    // InternalMASLParser.g:10652:7: ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )*
            	                    {
            	                    // InternalMASLParser.g:10652:7: ( (lv_arguments_26_0= ruleExpression ) )
            	                    // InternalMASLParser.g:10653:8: (lv_arguments_26_0= ruleExpression )
            	                    {
            	                    // InternalMASLParser.g:10653:8: (lv_arguments_26_0= ruleExpression )
            	                    // InternalMASLParser.g:10654:9: lv_arguments_26_0= ruleExpression
            	                    {
            	                    if ( state.backtracking==0 ) {

            	                      									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_4_3_1_0_0());
            	                      								
            	                    }
            	                    pushFollow(FOLLOW_10);
            	                    lv_arguments_26_0=ruleExpression();

            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      									if (current==null) {
            	                      										current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	                      									}
            	                      									add(
            	                      										current,
            	                      										"arguments",
            	                      										lv_arguments_26_0,
            	                      										"org.xtuml.bp.xtext.masl.MASL.Expression");
            	                      									afterParserOrEnumRuleCall();
            	                      								
            	                    }

            	                    }


            	                    }

            	                    // InternalMASLParser.g:10671:7: (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )*
            	                    loop204:
            	                    do {
            	                        int alt204=2;
            	                        int LA204_0 = input.LA(1);

            	                        if ( (LA204_0==Comma) ) {
            	                            alt204=1;
            	                        }


            	                        switch (alt204) {
            	                    	case 1 :
            	                    	    // InternalMASLParser.g:10672:8: otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) )
            	                    	    {
            	                    	    otherlv_27=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
            	                    	    if ( state.backtracking==0 ) {

            	                    	      								newLeafNode(otherlv_27, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_4_3_1_1_0());
            	                    	      							
            	                    	    }
            	                    	    // InternalMASLParser.g:10676:8: ( (lv_arguments_28_0= ruleExpression ) )
            	                    	    // InternalMASLParser.g:10677:9: (lv_arguments_28_0= ruleExpression )
            	                    	    {
            	                    	    // InternalMASLParser.g:10677:9: (lv_arguments_28_0= ruleExpression )
            	                    	    // InternalMASLParser.g:10678:10: lv_arguments_28_0= ruleExpression
            	                    	    {
            	                    	    if ( state.backtracking==0 ) {

            	                    	      										newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_4_3_1_1_1_0());
            	                    	      									
            	                    	    }
            	                    	    pushFollow(FOLLOW_10);
            	                    	    lv_arguments_28_0=ruleExpression();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return current;
            	                    	    if ( state.backtracking==0 ) {

            	                    	      										if (current==null) {
            	                    	      											current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
            	                    	      										}
            	                    	      										add(
            	                    	      											current,
            	                    	      											"arguments",
            	                    	      											lv_arguments_28_0,
            	                    	      											"org.xtuml.bp.xtext.masl.MASL.Expression");
            	                    	      										afterParserOrEnumRuleCall();
            	                    	      									
            	                    	    }

            	                    	    }


            	                    	    }


            	                    	    }
            	                    	    break;

            	                    	default :
            	                    	    break loop204;
            	                        }
            	                    } while (true);


            	                    }
            	                    break;

            	            }

            	            otherlv_29=(Token)match(input,RightParenthesis,FOLLOW_138); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_29, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_4_3_2());
            	              					
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePostfixExpression"


    // $ANTLR start "entryRuleCharacteristicID"
    // InternalMASLParser.g:10708:1: entryRuleCharacteristicID returns [String current=null] : iv_ruleCharacteristicID= ruleCharacteristicID EOF ;
    public final String entryRuleCharacteristicID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCharacteristicID = null;


        try {
            // InternalMASLParser.g:10708:56: (iv_ruleCharacteristicID= ruleCharacteristicID EOF )
            // InternalMASLParser.g:10709:2: iv_ruleCharacteristicID= ruleCharacteristicID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCharacteristicIDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCharacteristicID=ruleCharacteristicID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCharacteristicID.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCharacteristicID"


    // $ANTLR start "ruleCharacteristicID"
    // InternalMASLParser.g:10715:1: ruleCharacteristicID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | kw= Range | kw= Delta ) ;
    public final AntlrDatatypeRuleToken ruleCharacteristicID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalMASLParser.g:10721:2: ( (this_ID_0= RULE_ID | kw= Range | kw= Delta ) )
            // InternalMASLParser.g:10722:2: (this_ID_0= RULE_ID | kw= Range | kw= Delta )
            {
            // InternalMASLParser.g:10722:2: (this_ID_0= RULE_ID | kw= Range | kw= Delta )
            int alt208=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt208=1;
                }
                break;
            case Range:
                {
                alt208=2;
                }
                break;
            case Delta:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // InternalMASLParser.g:10723:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getCharacteristicIDAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:10731:3: kw= Range
                    {
                    kw=(Token)match(input,Range,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getCharacteristicIDAccess().getRangeKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:10737:3: kw= Delta
                    {
                    kw=(Token)match(input,Delta,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getCharacteristicIDAccess().getDeltaKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCharacteristicID"


    // $ANTLR start "entryRulePostfixNoActionCallExpression"
    // InternalMASLParser.g:10746:1: entryRulePostfixNoActionCallExpression returns [EObject current=null] : iv_rulePostfixNoActionCallExpression= rulePostfixNoActionCallExpression EOF ;
    public final EObject entryRulePostfixNoActionCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePostfixNoActionCallExpression = null;


        try {
            // InternalMASLParser.g:10746:70: (iv_rulePostfixNoActionCallExpression= rulePostfixNoActionCallExpression EOF )
            // InternalMASLParser.g:10747:2: iv_rulePostfixNoActionCallExpression= rulePostfixNoActionCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixNoActionCallExpression=rulePostfixNoActionCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixNoActionCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePostfixNoActionCallExpression"


    // $ANTLR start "rulePostfixNoActionCallExpression"
    // InternalMASLParser.g:10753:1: rulePostfixNoActionCallExpression returns [EObject current=null] : (this_PrimaryNoActionCallExpression_0= rulePrimaryNoActionCallExpression ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )* ) ;
    public final EObject rulePostfixNoActionCallExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject this_PrimaryNoActionCallExpression_0 = null;

        EObject lv_brackets_6_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10759:2: ( (this_PrimaryNoActionCallExpression_0= rulePrimaryNoActionCallExpression ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )* ) )
            // InternalMASLParser.g:10760:2: (this_PrimaryNoActionCallExpression_0= rulePrimaryNoActionCallExpression ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )* )
            {
            // InternalMASLParser.g:10760:2: (this_PrimaryNoActionCallExpression_0= rulePrimaryNoActionCallExpression ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )* )
            // InternalMASLParser.g:10761:3: this_PrimaryNoActionCallExpression_0= rulePrimaryNoActionCallExpression ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionAccess().getPrimaryNoActionCallExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_PrimaryNoActionCallExpression_0=rulePrimaryNoActionCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PrimaryNoActionCallExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:10769:3: ( ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) ) | ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket ) | ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) ) )*
            loop209:
            do {
                int alt209=4;
                switch ( input.LA(1) ) {
                case FullStop:
                    {
                    alt209=1;
                    }
                    break;
                case LeftSquareBracket:
                    {
                    alt209=2;
                    }
                    break;
                case Apostrophe:
                    {
                    alt209=3;
                    }
                    break;

                }

                switch (alt209) {
            	case 1 :
            	    // InternalMASLParser.g:10770:4: ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) )
            	    {
            	    // InternalMASLParser.g:10770:4: ( () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) ) )
            	    // InternalMASLParser.g:10771:5: () otherlv_2= FullStop ( (otherlv_3= RULE_ID ) )
            	    {
            	    // InternalMASLParser.g:10771:5: ()
            	    // InternalMASLParser.g:10772:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixNoActionCallExpressionAccess().getSimpleFeatureCallReceiverAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_2=(Token)match(input,FullStop,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_2, grammarAccess.getPostfixNoActionCallExpressionAccess().getFullStopKeyword_1_0_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10782:5: ( (otherlv_3= RULE_ID ) )
            	    // InternalMASLParser.g:10783:6: (otherlv_3= RULE_ID )
            	    {
            	    // InternalMASLParser.g:10783:6: (otherlv_3= RULE_ID )
            	    // InternalMASLParser.g:10784:7: otherlv_3= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getPostfixNoActionCallExpressionRule());
            	      							}
            	      						
            	    }
            	    otherlv_3=(Token)match(input,RULE_ID,FOLLOW_139); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							newLeafNode(otherlv_3, grammarAccess.getPostfixNoActionCallExpressionAccess().getFeatureAbstractFeatureCrossReference_1_0_2_0());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalMASLParser.g:10797:4: ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            	    {
            	    // InternalMASLParser.g:10797:4: ( () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket )
            	    // InternalMASLParser.g:10798:5: () otherlv_5= LeftSquareBracket ( (lv_brackets_6_0= ruleExpression ) ) otherlv_7= RightSquareBracket
            	    {
            	    // InternalMASLParser.g:10798:5: ()
            	    // InternalMASLParser.g:10799:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixNoActionCallExpressionAccess().getIndexedExpressionReceiverAction_1_1_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_5=(Token)match(input,LeftSquareBracket,FOLLOW_39); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_5, grammarAccess.getPostfixNoActionCallExpressionAccess().getLeftSquareBracketKeyword_1_1_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10809:5: ( (lv_brackets_6_0= ruleExpression ) )
            	    // InternalMASLParser.g:10810:6: (lv_brackets_6_0= ruleExpression )
            	    {
            	    // InternalMASLParser.g:10810:6: (lv_brackets_6_0= ruleExpression )
            	    // InternalMASLParser.g:10811:7: lv_brackets_6_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionAccess().getBracketsExpressionParserRuleCall_1_1_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_brackets_6_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getPostfixNoActionCallExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"brackets",
            	      								lv_brackets_6_0,
            	      								"org.xtuml.bp.xtext.masl.MASL.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    otherlv_7=(Token)match(input,RightSquareBracket,FOLLOW_139); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_7, grammarAccess.getPostfixNoActionCallExpressionAccess().getRightSquareBracketKeyword_1_1_3());
            	      				
            	    }

            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalMASLParser.g:10834:4: ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) )
            	    {
            	    // InternalMASLParser.g:10834:4: ( () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) ) )
            	    // InternalMASLParser.g:10835:5: () otherlv_9= Apostrophe ( (otherlv_10= RULE_ID ) )
            	    {
            	    // InternalMASLParser.g:10835:5: ()
            	    // InternalMASLParser.g:10836:6: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getPostfixNoActionCallExpressionAccess().getCharacteristicCallReceiverAction_1_2_0(),
            	      							current);
            	      					
            	    }

            	    }

            	    otherlv_9=(Token)match(input,Apostrophe,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_9, grammarAccess.getPostfixNoActionCallExpressionAccess().getApostropheKeyword_1_2_1());
            	      				
            	    }
            	    // InternalMASLParser.g:10846:5: ( (otherlv_10= RULE_ID ) )
            	    // InternalMASLParser.g:10847:6: (otherlv_10= RULE_ID )
            	    {
            	    // InternalMASLParser.g:10847:6: (otherlv_10= RULE_ID )
            	    // InternalMASLParser.g:10848:7: otherlv_10= RULE_ID
            	    {
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElement(grammarAccess.getPostfixNoActionCallExpressionRule());
            	      							}
            	      						
            	    }
            	    otherlv_10=(Token)match(input,RULE_ID,FOLLOW_139); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							newLeafNode(otherlv_10, grammarAccess.getPostfixNoActionCallExpressionAccess().getCharacteristicCharacteristicCrossReference_1_2_2_0());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePostfixNoActionCallExpression"


    // $ANTLR start "entryRulePrimaryNoActionCallExpression"
    // InternalMASLParser.g:10865:1: entryRulePrimaryNoActionCallExpression returns [EObject current=null] : iv_rulePrimaryNoActionCallExpression= rulePrimaryNoActionCallExpression EOF ;
    public final EObject entryRulePrimaryNoActionCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryNoActionCallExpression = null;


        try {
            // InternalMASLParser.g:10865:70: (iv_rulePrimaryNoActionCallExpression= rulePrimaryNoActionCallExpression EOF )
            // InternalMASLParser.g:10866:2: iv_rulePrimaryNoActionCallExpression= rulePrimaryNoActionCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryNoActionCallExpression=rulePrimaryNoActionCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryNoActionCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryNoActionCallExpression"


    // $ANTLR start "rulePrimaryNoActionCallExpression"
    // InternalMASLParser.g:10872:1: rulePrimaryNoActionCallExpression returns [EObject current=null] : (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression ) ;
    public final EObject rulePrimaryNoActionCallExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Literal_0 = null;

        EObject this_ParenthesisedExpression_1 = null;

        EObject this_SimpleFeatureCall_2 = null;

        EObject this_TypeNameExpression_3 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10878:2: ( (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression ) )
            // InternalMASLParser.g:10879:2: (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression )
            {
            // InternalMASLParser.g:10879:2: (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression )
            int alt210=4;
            switch ( input.LA(1) ) {
            case Console:
            case FILE:
            case LINE:
            case False:
            case Flush:
            case Endl:
            case Null:
            case This:
            case True:
            case RULE_INT:
            case RULE_REAL:
            case RULE_STRING:
            case RULE_CHAR:
            case RULE_DURATION:
            case RULE_TIMESTAMP:
                {
                alt210=1;
                }
                break;
            case LeftParenthesis:
                {
                alt210=2;
                }
                break;
            case RULE_ID:
                {
                alt210=3;
                }
                break;
            case Dictionary:
            case Anonymous:
            case Instance:
            case Sequence:
            case Array:
            case Bag:
            case Set:
                {
                alt210=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // InternalMASLParser.g:10880:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:10889:3: this_ParenthesisedExpression_1= ruleParenthesisedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getParenthesisedExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenthesisedExpression_1=ruleParenthesisedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenthesisedExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:10898:3: this_SimpleFeatureCall_2= ruleSimpleFeatureCall
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getSimpleFeatureCallParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimpleFeatureCall_2=ruleSimpleFeatureCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleFeatureCall_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:10907:3: this_TypeNameExpression_3= ruleTypeNameExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getTypeNameExpressionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeNameExpression_3=ruleTypeNameExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeNameExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryNoActionCallExpression"


    // $ANTLR start "entryRulePrimaryExpression"
    // InternalMASLParser.g:10919:1: entryRulePrimaryExpression returns [EObject current=null] : iv_rulePrimaryExpression= rulePrimaryExpression EOF ;
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryExpression = null;


        try {
            // InternalMASLParser.g:10919:58: (iv_rulePrimaryExpression= rulePrimaryExpression EOF )
            // InternalMASLParser.g:10920:2: iv_rulePrimaryExpression= rulePrimaryExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryExpression"


    // $ANTLR start "rulePrimaryExpression"
    // InternalMASLParser.g:10926:1: rulePrimaryExpression returns [EObject current=null] : (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression ) ;
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Literal_0 = null;

        EObject this_ParenthesisedExpression_1 = null;

        EObject this_SimpleFeatureCall_2 = null;

        EObject this_TypeNameExpression_3 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10932:2: ( (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression ) )
            // InternalMASLParser.g:10933:2: (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression )
            {
            // InternalMASLParser.g:10933:2: (this_Literal_0= ruleLiteral | this_ParenthesisedExpression_1= ruleParenthesisedExpression | this_SimpleFeatureCall_2= ruleSimpleFeatureCall | this_TypeNameExpression_3= ruleTypeNameExpression )
            int alt211=4;
            switch ( input.LA(1) ) {
            case Console:
            case FILE:
            case LINE:
            case False:
            case Flush:
            case Endl:
            case Null:
            case This:
            case True:
            case RULE_INT:
            case RULE_REAL:
            case RULE_STRING:
            case RULE_CHAR:
            case RULE_DURATION:
            case RULE_TIMESTAMP:
                {
                alt211=1;
                }
                break;
            case LeftParenthesis:
                {
                alt211=2;
                }
                break;
            case RULE_ID:
                {
                alt211=3;
                }
                break;
            case Dictionary:
            case Anonymous:
            case Instance:
            case Sequence:
            case Array:
            case Bag:
            case Set:
                {
                alt211=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // InternalMASLParser.g:10934:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:10943:3: this_ParenthesisedExpression_1= ruleParenthesisedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesisedExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenthesisedExpression_1=ruleParenthesisedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenthesisedExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:10952:3: this_SimpleFeatureCall_2= ruleSimpleFeatureCall
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSimpleFeatureCallParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimpleFeatureCall_2=ruleSimpleFeatureCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleFeatureCall_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:10961:3: this_TypeNameExpression_3= ruleTypeNameExpression
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTypeNameExpressionParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeNameExpression_3=ruleTypeNameExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeNameExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryExpression"


    // $ANTLR start "entryRuleTypeNameExpression"
    // InternalMASLParser.g:10973:1: entryRuleTypeNameExpression returns [EObject current=null] : iv_ruleTypeNameExpression= ruleTypeNameExpression EOF ;
    public final EObject entryRuleTypeNameExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeNameExpression = null;


        try {
            // InternalMASLParser.g:10973:59: (iv_ruleTypeNameExpression= ruleTypeNameExpression EOF )
            // InternalMASLParser.g:10974:2: iv_ruleTypeNameExpression= ruleTypeNameExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeNameExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeNameExpression=ruleTypeNameExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeNameExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeNameExpression"


    // $ANTLR start "ruleTypeNameExpression"
    // InternalMASLParser.g:10980:1: ruleTypeNameExpression returns [EObject current=null] : (this_InstanceTypeReference_0= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_1= ruleAbstractCollectionTypeReference ) ;
    public final EObject ruleTypeNameExpression() throws RecognitionException {
        EObject current = null;

        EObject this_InstanceTypeReference_0 = null;

        EObject this_AbstractCollectionTypeReference_1 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:10986:2: ( (this_InstanceTypeReference_0= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_1= ruleAbstractCollectionTypeReference ) )
            // InternalMASLParser.g:10987:2: (this_InstanceTypeReference_0= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_1= ruleAbstractCollectionTypeReference )
            {
            // InternalMASLParser.g:10987:2: (this_InstanceTypeReference_0= ruleInstanceTypeReference | this_AbstractCollectionTypeReference_1= ruleAbstractCollectionTypeReference )
            int alt212=2;
            switch ( input.LA(1) ) {
            case Anonymous:
                {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==Dictionary||LA212_1==Sequence||LA212_1==Array||LA212_1==Bag||LA212_1==Set) ) {
                    alt212=2;
                }
                else if ( (LA212_1==Instance) ) {
                    alt212=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;
                }
                }
                break;
            case Instance:
                {
                alt212=1;
                }
                break;
            case Dictionary:
            case Sequence:
            case Array:
            case Bag:
            case Set:
                {
                alt212=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }

            switch (alt212) {
                case 1 :
                    // InternalMASLParser.g:10988:3: this_InstanceTypeReference_0= ruleInstanceTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeNameExpressionAccess().getInstanceTypeReferenceParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_InstanceTypeReference_0=ruleInstanceTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_InstanceTypeReference_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:10997:3: this_AbstractCollectionTypeReference_1= ruleAbstractCollectionTypeReference
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeNameExpressionAccess().getAbstractCollectionTypeReferenceParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AbstractCollectionTypeReference_1=ruleAbstractCollectionTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AbstractCollectionTypeReference_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeNameExpression"


    // $ANTLR start "entryRuleSimpleFeatureCall"
    // InternalMASLParser.g:11009:1: entryRuleSimpleFeatureCall returns [EObject current=null] : iv_ruleSimpleFeatureCall= ruleSimpleFeatureCall EOF ;
    public final EObject entryRuleSimpleFeatureCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleFeatureCall = null;


        try {
            // InternalMASLParser.g:11009:58: (iv_ruleSimpleFeatureCall= ruleSimpleFeatureCall EOF )
            // InternalMASLParser.g:11010:2: iv_ruleSimpleFeatureCall= ruleSimpleFeatureCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleFeatureCallRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleFeatureCall=ruleSimpleFeatureCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleFeatureCall; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleFeatureCall"


    // $ANTLR start "ruleSimpleFeatureCall"
    // InternalMASLParser.g:11016:1: ruleSimpleFeatureCall returns [EObject current=null] : ( ( ruleScopedName ) ) ;
    public final EObject ruleSimpleFeatureCall() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            // InternalMASLParser.g:11022:2: ( ( ( ruleScopedName ) ) )
            // InternalMASLParser.g:11023:2: ( ( ruleScopedName ) )
            {
            // InternalMASLParser.g:11023:2: ( ( ruleScopedName ) )
            // InternalMASLParser.g:11024:3: ( ruleScopedName )
            {
            // InternalMASLParser.g:11024:3: ( ruleScopedName )
            // InternalMASLParser.g:11025:4: ruleScopedName
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getSimpleFeatureCallRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSimpleFeatureCallAccess().getFeatureAbstractFeatureCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleScopedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleFeatureCall"


    // $ANTLR start "entryRuleParenthesisedExpression"
    // InternalMASLParser.g:11042:1: entryRuleParenthesisedExpression returns [EObject current=null] : iv_ruleParenthesisedExpression= ruleParenthesisedExpression EOF ;
    public final EObject entryRuleParenthesisedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenthesisedExpression = null;


        try {
            // InternalMASLParser.g:11042:64: (iv_ruleParenthesisedExpression= ruleParenthesisedExpression EOF )
            // InternalMASLParser.g:11043:2: iv_ruleParenthesisedExpression= ruleParenthesisedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenthesisedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenthesisedExpression=ruleParenthesisedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenthesisedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParenthesisedExpression"


    // $ANTLR start "ruleParenthesisedExpression"
    // InternalMASLParser.g:11049:1: ruleParenthesisedExpression returns [EObject current=null] : (otherlv_0= LeftParenthesis this_Expression_1= ruleExpression ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleParenthesisedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_Expression_1 = null;

        EObject lv_elements_4_0 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:11055:2: ( (otherlv_0= LeftParenthesis this_Expression_1= ruleExpression ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )? otherlv_5= RightParenthesis ) )
            // InternalMASLParser.g:11056:2: (otherlv_0= LeftParenthesis this_Expression_1= ruleExpression ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )? otherlv_5= RightParenthesis )
            {
            // InternalMASLParser.g:11056:2: (otherlv_0= LeftParenthesis this_Expression_1= ruleExpression ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )? otherlv_5= RightParenthesis )
            // InternalMASLParser.g:11057:3: otherlv_0= LeftParenthesis this_Expression_1= ruleExpression ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )? otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenthesisedExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getParenthesisedExpressionAccess().getExpressionParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_10);
            this_Expression_1=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Expression_1;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalMASLParser.g:11069:3: ( () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+ )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==Comma) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // InternalMASLParser.g:11070:4: () (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+
                    {
                    // InternalMASLParser.g:11070:4: ()
                    // InternalMASLParser.g:11071:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getParenthesisedExpressionAccess().getStructureAggregateExpressionElementsAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalMASLParser.g:11077:4: (otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) ) )+
                    int cnt213=0;
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);

                        if ( (LA213_0==Comma) ) {
                            alt213=1;
                        }


                        switch (alt213) {
                    	case 1 :
                    	    // InternalMASLParser.g:11078:5: otherlv_3= Comma ( (lv_elements_4_0= ruleExpression ) )
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_39); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getParenthesisedExpressionAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    // InternalMASLParser.g:11082:5: ( (lv_elements_4_0= ruleExpression ) )
                    	    // InternalMASLParser.g:11083:6: (lv_elements_4_0= ruleExpression )
                    	    {
                    	    // InternalMASLParser.g:11083:6: (lv_elements_4_0= ruleExpression )
                    	    // InternalMASLParser.g:11084:7: lv_elements_4_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getParenthesisedExpressionAccess().getElementsExpressionParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_elements_4_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getParenthesisedExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_4_0,
                    	      								"org.xtuml.bp.xtext.masl.MASL.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt213 >= 1 ) break loop213;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(213, input);
                                throw eee;
                        }
                        cnt213++;
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getParenthesisedExpressionAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParenthesisedExpression"


    // $ANTLR start "entryRuleLiteral"
    // InternalMASLParser.g:11111:1: entryRuleLiteral returns [EObject current=null] : iv_ruleLiteral= ruleLiteral EOF ;
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteral = null;


        try {
            // InternalMASLParser.g:11111:48: (iv_ruleLiteral= ruleLiteral EOF )
            // InternalMASLParser.g:11112:2: iv_ruleLiteral= ruleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteral"


    // $ANTLR start "ruleLiteral"
    // InternalMASLParser.g:11118:1: ruleLiteral returns [EObject current=null] : (this_IntegerLiteral_0= ruleIntegerLiteral | this_RealLiteral_1= ruleRealLiteral | this_CharacterLiteral_2= ruleCharacterLiteral | this_StringLiteral_3= ruleStringLiteral | this_DurationLiteral_4= ruleDurationLiteral | this_TimestampLiteral_5= ruleTimestampLiteral | this_BooleanLiteral_6= ruleBooleanLiteral | this_NullLiteral_7= ruleNullLiteral | this_FlushLiteral_8= ruleFlushLiteral | this_ThisLiteral_9= ruleThisLiteral | this_ConsoleLiteral_10= ruleConsoleLiteral | this_EndlLiteral_11= ruleEndlLiteral | this_LineNoLiteral_12= ruleLineNoLiteral | this_FileNameLiteral_13= ruleFileNameLiteral ) ;
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_IntegerLiteral_0 = null;

        EObject this_RealLiteral_1 = null;

        EObject this_CharacterLiteral_2 = null;

        EObject this_StringLiteral_3 = null;

        EObject this_DurationLiteral_4 = null;

        EObject this_TimestampLiteral_5 = null;

        EObject this_BooleanLiteral_6 = null;

        EObject this_NullLiteral_7 = null;

        EObject this_FlushLiteral_8 = null;

        EObject this_ThisLiteral_9 = null;

        EObject this_ConsoleLiteral_10 = null;

        EObject this_EndlLiteral_11 = null;

        EObject this_LineNoLiteral_12 = null;

        EObject this_FileNameLiteral_13 = null;



        	enterRule();

        try {
            // InternalMASLParser.g:11124:2: ( (this_IntegerLiteral_0= ruleIntegerLiteral | this_RealLiteral_1= ruleRealLiteral | this_CharacterLiteral_2= ruleCharacterLiteral | this_StringLiteral_3= ruleStringLiteral | this_DurationLiteral_4= ruleDurationLiteral | this_TimestampLiteral_5= ruleTimestampLiteral | this_BooleanLiteral_6= ruleBooleanLiteral | this_NullLiteral_7= ruleNullLiteral | this_FlushLiteral_8= ruleFlushLiteral | this_ThisLiteral_9= ruleThisLiteral | this_ConsoleLiteral_10= ruleConsoleLiteral | this_EndlLiteral_11= ruleEndlLiteral | this_LineNoLiteral_12= ruleLineNoLiteral | this_FileNameLiteral_13= ruleFileNameLiteral ) )
            // InternalMASLParser.g:11125:2: (this_IntegerLiteral_0= ruleIntegerLiteral | this_RealLiteral_1= ruleRealLiteral | this_CharacterLiteral_2= ruleCharacterLiteral | this_StringLiteral_3= ruleStringLiteral | this_DurationLiteral_4= ruleDurationLiteral | this_TimestampLiteral_5= ruleTimestampLiteral | this_BooleanLiteral_6= ruleBooleanLiteral | this_NullLiteral_7= ruleNullLiteral | this_FlushLiteral_8= ruleFlushLiteral | this_ThisLiteral_9= ruleThisLiteral | this_ConsoleLiteral_10= ruleConsoleLiteral | this_EndlLiteral_11= ruleEndlLiteral | this_LineNoLiteral_12= ruleLineNoLiteral | this_FileNameLiteral_13= ruleFileNameLiteral )
            {
            // InternalMASLParser.g:11125:2: (this_IntegerLiteral_0= ruleIntegerLiteral | this_RealLiteral_1= ruleRealLiteral | this_CharacterLiteral_2= ruleCharacterLiteral | this_StringLiteral_3= ruleStringLiteral | this_DurationLiteral_4= ruleDurationLiteral | this_TimestampLiteral_5= ruleTimestampLiteral | this_BooleanLiteral_6= ruleBooleanLiteral | this_NullLiteral_7= ruleNullLiteral | this_FlushLiteral_8= ruleFlushLiteral | this_ThisLiteral_9= ruleThisLiteral | this_ConsoleLiteral_10= ruleConsoleLiteral | this_EndlLiteral_11= ruleEndlLiteral | this_LineNoLiteral_12= ruleLineNoLiteral | this_FileNameLiteral_13= ruleFileNameLiteral )
            int alt215=14;
            switch ( input.LA(1) ) {
            case RULE_INT:
                {
                alt215=1;
                }
                break;
            case RULE_REAL:
                {
                alt215=2;
                }
                break;
            case RULE_CHAR:
                {
                alt215=3;
                }
                break;
            case RULE_STRING:
                {
                alt215=4;
                }
                break;
            case RULE_DURATION:
                {
                alt215=5;
                }
                break;
            case RULE_TIMESTAMP:
                {
                alt215=6;
                }
                break;
            case False:
            case True:
                {
                alt215=7;
                }
                break;
            case Null:
                {
                alt215=8;
                }
                break;
            case Flush:
                {
                alt215=9;
                }
                break;
            case This:
                {
                alt215=10;
                }
                break;
            case Console:
                {
                alt215=11;
                }
                break;
            case Endl:
                {
                alt215=12;
                }
                break;
            case LINE:
                {
                alt215=13;
                }
                break;
            case FILE:
                {
                alt215=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // InternalMASLParser.g:11126:3: this_IntegerLiteral_0= ruleIntegerLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntegerLiteral_0=ruleIntegerLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntegerLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11135:3: this_RealLiteral_1= ruleRealLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RealLiteral_1=ruleRealLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RealLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:11144:3: this_CharacterLiteral_2= ruleCharacterLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CharacterLiteral_2=ruleCharacterLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CharacterLiteral_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:11153:3: this_StringLiteral_3= ruleStringLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_3=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringLiteral_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalMASLParser.g:11162:3: this_DurationLiteral_4= ruleDurationLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getDurationLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DurationLiteral_4=ruleDurationLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DurationLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalMASLParser.g:11171:3: this_TimestampLiteral_5= ruleTimestampLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getTimestampLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TimestampLiteral_5=ruleTimestampLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TimestampLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalMASLParser.g:11180:3: this_BooleanLiteral_6= ruleBooleanLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_6=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BooleanLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalMASLParser.g:11189:3: this_NullLiteral_7= ruleNullLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_7=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NullLiteral_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalMASLParser.g:11198:3: this_FlushLiteral_8= ruleFlushLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getFlushLiteralParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FlushLiteral_8=ruleFlushLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FlushLiteral_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalMASLParser.g:11207:3: this_ThisLiteral_9= ruleThisLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getThisLiteralParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_9=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisLiteral_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalMASLParser.g:11216:3: this_ConsoleLiteral_10= ruleConsoleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getConsoleLiteralParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ConsoleLiteral_10=ruleConsoleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ConsoleLiteral_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalMASLParser.g:11225:3: this_EndlLiteral_11= ruleEndlLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getEndlLiteralParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EndlLiteral_11=ruleEndlLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EndlLiteral_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalMASLParser.g:11234:3: this_LineNoLiteral_12= ruleLineNoLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getLineNoLiteralParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LineNoLiteral_12=ruleLineNoLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LineNoLiteral_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalMASLParser.g:11243:3: this_FileNameLiteral_13= ruleFileNameLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getFileNameLiteralParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FileNameLiteral_13=ruleFileNameLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FileNameLiteral_13;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteral"


    // $ANTLR start "entryRuleRealLiteral"
    // InternalMASLParser.g:11255:1: entryRuleRealLiteral returns [EObject current=null] : iv_ruleRealLiteral= ruleRealLiteral EOF ;
    public final EObject entryRuleRealLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRealLiteral = null;


        try {
            // InternalMASLParser.g:11255:52: (iv_ruleRealLiteral= ruleRealLiteral EOF )
            // InternalMASLParser.g:11256:2: iv_ruleRealLiteral= ruleRealLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRealLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRealLiteral=ruleRealLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRealLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRealLiteral"


    // $ANTLR start "ruleRealLiteral"
    // InternalMASLParser.g:11262:1: ruleRealLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_REAL ) ) ;
    public final EObject ruleRealLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11268:2: ( ( (lv_value_0_0= RULE_REAL ) ) )
            // InternalMASLParser.g:11269:2: ( (lv_value_0_0= RULE_REAL ) )
            {
            // InternalMASLParser.g:11269:2: ( (lv_value_0_0= RULE_REAL ) )
            // InternalMASLParser.g:11270:3: (lv_value_0_0= RULE_REAL )
            {
            // InternalMASLParser.g:11270:3: (lv_value_0_0= RULE_REAL )
            // InternalMASLParser.g:11271:4: lv_value_0_0= RULE_REAL
            {
            lv_value_0_0=(Token)match(input,RULE_REAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getRealLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.REAL");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRealLiteral"


    // $ANTLR start "entryRuleIntegerLiteral"
    // InternalMASLParser.g:11290:1: entryRuleIntegerLiteral returns [EObject current=null] : iv_ruleIntegerLiteral= ruleIntegerLiteral EOF ;
    public final EObject entryRuleIntegerLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntegerLiteral = null;


        try {
            // InternalMASLParser.g:11290:55: (iv_ruleIntegerLiteral= ruleIntegerLiteral EOF )
            // InternalMASLParser.g:11291:2: iv_ruleIntegerLiteral= ruleIntegerLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntegerLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntegerLiteral=ruleIntegerLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntegerLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntegerLiteral"


    // $ANTLR start "ruleIntegerLiteral"
    // InternalMASLParser.g:11297:1: ruleIntegerLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_INT ) ) ;
    public final EObject ruleIntegerLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11303:2: ( ( (lv_value_0_0= RULE_INT ) ) )
            // InternalMASLParser.g:11304:2: ( (lv_value_0_0= RULE_INT ) )
            {
            // InternalMASLParser.g:11304:2: ( (lv_value_0_0= RULE_INT ) )
            // InternalMASLParser.g:11305:3: (lv_value_0_0= RULE_INT )
            {
            // InternalMASLParser.g:11305:3: (lv_value_0_0= RULE_INT )
            // InternalMASLParser.g:11306:4: lv_value_0_0= RULE_INT
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntegerLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntegerLiteral"


    // $ANTLR start "entryRuleStringLiteral"
    // InternalMASLParser.g:11325:1: entryRuleStringLiteral returns [EObject current=null] : iv_ruleStringLiteral= ruleStringLiteral EOF ;
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringLiteral = null;


        try {
            // InternalMASLParser.g:11325:54: (iv_ruleStringLiteral= ruleStringLiteral EOF )
            // InternalMASLParser.g:11326:2: iv_ruleStringLiteral= ruleStringLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringLiteral"


    // $ANTLR start "ruleStringLiteral"
    // InternalMASLParser.g:11332:1: ruleStringLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING ) ) ;
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11338:2: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // InternalMASLParser.g:11339:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // InternalMASLParser.g:11339:2: ( (lv_value_0_0= RULE_STRING ) )
            // InternalMASLParser.g:11340:3: (lv_value_0_0= RULE_STRING )
            {
            // InternalMASLParser.g:11340:3: (lv_value_0_0= RULE_STRING )
            // InternalMASLParser.g:11341:4: lv_value_0_0= RULE_STRING
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringLiteral"


    // $ANTLR start "entryRuleCharacterLiteral"
    // InternalMASLParser.g:11360:1: entryRuleCharacterLiteral returns [EObject current=null] : iv_ruleCharacterLiteral= ruleCharacterLiteral EOF ;
    public final EObject entryRuleCharacterLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCharacterLiteral = null;


        try {
            // InternalMASLParser.g:11360:57: (iv_ruleCharacterLiteral= ruleCharacterLiteral EOF )
            // InternalMASLParser.g:11361:2: iv_ruleCharacterLiteral= ruleCharacterLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCharacterLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCharacterLiteral=ruleCharacterLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCharacterLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCharacterLiteral"


    // $ANTLR start "ruleCharacterLiteral"
    // InternalMASLParser.g:11367:1: ruleCharacterLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_CHAR ) ) ;
    public final EObject ruleCharacterLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11373:2: ( ( (lv_value_0_0= RULE_CHAR ) ) )
            // InternalMASLParser.g:11374:2: ( (lv_value_0_0= RULE_CHAR ) )
            {
            // InternalMASLParser.g:11374:2: ( (lv_value_0_0= RULE_CHAR ) )
            // InternalMASLParser.g:11375:3: (lv_value_0_0= RULE_CHAR )
            {
            // InternalMASLParser.g:11375:3: (lv_value_0_0= RULE_CHAR )
            // InternalMASLParser.g:11376:4: lv_value_0_0= RULE_CHAR
            {
            lv_value_0_0=(Token)match(input,RULE_CHAR,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getCharacterLiteralAccess().getValueCHARTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getCharacterLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.CHAR");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCharacterLiteral"


    // $ANTLR start "entryRuleDurationLiteral"
    // InternalMASLParser.g:11395:1: entryRuleDurationLiteral returns [EObject current=null] : iv_ruleDurationLiteral= ruleDurationLiteral EOF ;
    public final EObject entryRuleDurationLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDurationLiteral = null;


        try {
            // InternalMASLParser.g:11395:56: (iv_ruleDurationLiteral= ruleDurationLiteral EOF )
            // InternalMASLParser.g:11396:2: iv_ruleDurationLiteral= ruleDurationLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDurationLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDurationLiteral=ruleDurationLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDurationLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDurationLiteral"


    // $ANTLR start "ruleDurationLiteral"
    // InternalMASLParser.g:11402:1: ruleDurationLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_DURATION ) ) ;
    public final EObject ruleDurationLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11408:2: ( ( (lv_value_0_0= RULE_DURATION ) ) )
            // InternalMASLParser.g:11409:2: ( (lv_value_0_0= RULE_DURATION ) )
            {
            // InternalMASLParser.g:11409:2: ( (lv_value_0_0= RULE_DURATION ) )
            // InternalMASLParser.g:11410:3: (lv_value_0_0= RULE_DURATION )
            {
            // InternalMASLParser.g:11410:3: (lv_value_0_0= RULE_DURATION )
            // InternalMASLParser.g:11411:4: lv_value_0_0= RULE_DURATION
            {
            lv_value_0_0=(Token)match(input,RULE_DURATION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getDurationLiteralAccess().getValueDURATIONTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getDurationLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.DURATION");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDurationLiteral"


    // $ANTLR start "entryRuleTimestampLiteral"
    // InternalMASLParser.g:11430:1: entryRuleTimestampLiteral returns [EObject current=null] : iv_ruleTimestampLiteral= ruleTimestampLiteral EOF ;
    public final EObject entryRuleTimestampLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTimestampLiteral = null;


        try {
            // InternalMASLParser.g:11430:57: (iv_ruleTimestampLiteral= ruleTimestampLiteral EOF )
            // InternalMASLParser.g:11431:2: iv_ruleTimestampLiteral= ruleTimestampLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTimestampLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTimestampLiteral=ruleTimestampLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTimestampLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTimestampLiteral"


    // $ANTLR start "ruleTimestampLiteral"
    // InternalMASLParser.g:11437:1: ruleTimestampLiteral returns [EObject current=null] : ( (lv_value_0_0= RULE_TIMESTAMP ) ) ;
    public final EObject ruleTimestampLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11443:2: ( ( (lv_value_0_0= RULE_TIMESTAMP ) ) )
            // InternalMASLParser.g:11444:2: ( (lv_value_0_0= RULE_TIMESTAMP ) )
            {
            // InternalMASLParser.g:11444:2: ( (lv_value_0_0= RULE_TIMESTAMP ) )
            // InternalMASLParser.g:11445:3: (lv_value_0_0= RULE_TIMESTAMP )
            {
            // InternalMASLParser.g:11445:3: (lv_value_0_0= RULE_TIMESTAMP )
            // InternalMASLParser.g:11446:4: lv_value_0_0= RULE_TIMESTAMP
            {
            lv_value_0_0=(Token)match(input,RULE_TIMESTAMP,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getTimestampLiteralAccess().getValueTIMESTAMPTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getTimestampLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.xtuml.bp.xtext.masl.MASL.TIMESTAMP");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTimestampLiteral"


    // $ANTLR start "entryRuleBooleanLiteral"
    // InternalMASLParser.g:11465:1: entryRuleBooleanLiteral returns [EObject current=null] : iv_ruleBooleanLiteral= ruleBooleanLiteral EOF ;
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBooleanLiteral = null;


        try {
            // InternalMASLParser.g:11465:55: (iv_ruleBooleanLiteral= ruleBooleanLiteral EOF )
            // InternalMASLParser.g:11466:2: iv_ruleBooleanLiteral= ruleBooleanLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBooleanLiteral"


    // $ANTLR start "ruleBooleanLiteral"
    // InternalMASLParser.g:11472:1: ruleBooleanLiteral returns [EObject current=null] : ( ( (lv_value_0_0= True ) ) | ( () otherlv_2= False ) ) ;
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;
        Token otherlv_2=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11478:2: ( ( ( (lv_value_0_0= True ) ) | ( () otherlv_2= False ) ) )
            // InternalMASLParser.g:11479:2: ( ( (lv_value_0_0= True ) ) | ( () otherlv_2= False ) )
            {
            // InternalMASLParser.g:11479:2: ( ( (lv_value_0_0= True ) ) | ( () otherlv_2= False ) )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==True) ) {
                alt216=1;
            }
            else if ( (LA216_0==False) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // InternalMASLParser.g:11480:3: ( (lv_value_0_0= True ) )
                    {
                    // InternalMASLParser.g:11480:3: ( (lv_value_0_0= True ) )
                    // InternalMASLParser.g:11481:4: (lv_value_0_0= True )
                    {
                    // InternalMASLParser.g:11481:4: (lv_value_0_0= True )
                    // InternalMASLParser.g:11482:5: lv_value_0_0= True
                    {
                    lv_value_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      					}
                      					setWithLastConsumed(current, "value", true, "true");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11495:3: ( () otherlv_2= False )
                    {
                    // InternalMASLParser.g:11495:3: ( () otherlv_2= False )
                    // InternalMASLParser.g:11496:4: () otherlv_2= False
                    {
                    // InternalMASLParser.g:11496:4: ()
                    // InternalMASLParser.g:11497:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBooleanLiteral"


    // $ANTLR start "entryRuleNullLiteral"
    // InternalMASLParser.g:11512:1: entryRuleNullLiteral returns [EObject current=null] : iv_ruleNullLiteral= ruleNullLiteral EOF ;
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullLiteral = null;


        try {
            // InternalMASLParser.g:11512:52: (iv_ruleNullLiteral= ruleNullLiteral EOF )
            // InternalMASLParser.g:11513:2: iv_ruleNullLiteral= ruleNullLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullLiteral"


    // $ANTLR start "ruleNullLiteral"
    // InternalMASLParser.g:11519:1: ruleNullLiteral returns [EObject current=null] : ( () otherlv_1= Null ) ;
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11525:2: ( ( () otherlv_1= Null ) )
            // InternalMASLParser.g:11526:2: ( () otherlv_1= Null )
            {
            // InternalMASLParser.g:11526:2: ( () otherlv_1= Null )
            // InternalMASLParser.g:11527:3: () otherlv_1= Null
            {
            // InternalMASLParser.g:11527:3: ()
            // InternalMASLParser.g:11528:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullLiteral"


    // $ANTLR start "entryRuleFlushLiteral"
    // InternalMASLParser.g:11542:1: entryRuleFlushLiteral returns [EObject current=null] : iv_ruleFlushLiteral= ruleFlushLiteral EOF ;
    public final EObject entryRuleFlushLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFlushLiteral = null;


        try {
            // InternalMASLParser.g:11542:53: (iv_ruleFlushLiteral= ruleFlushLiteral EOF )
            // InternalMASLParser.g:11543:2: iv_ruleFlushLiteral= ruleFlushLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFlushLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFlushLiteral=ruleFlushLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFlushLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFlushLiteral"


    // $ANTLR start "ruleFlushLiteral"
    // InternalMASLParser.g:11549:1: ruleFlushLiteral returns [EObject current=null] : ( () otherlv_1= Flush ) ;
    public final EObject ruleFlushLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11555:2: ( ( () otherlv_1= Flush ) )
            // InternalMASLParser.g:11556:2: ( () otherlv_1= Flush )
            {
            // InternalMASLParser.g:11556:2: ( () otherlv_1= Flush )
            // InternalMASLParser.g:11557:3: () otherlv_1= Flush
            {
            // InternalMASLParser.g:11557:3: ()
            // InternalMASLParser.g:11558:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFlushLiteralAccess().getFlushLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Flush,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFlushLiteralAccess().getFlushKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFlushLiteral"


    // $ANTLR start "entryRuleThisLiteral"
    // InternalMASLParser.g:11572:1: entryRuleThisLiteral returns [EObject current=null] : iv_ruleThisLiteral= ruleThisLiteral EOF ;
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisLiteral = null;


        try {
            // InternalMASLParser.g:11572:52: (iv_ruleThisLiteral= ruleThisLiteral EOF )
            // InternalMASLParser.g:11573:2: iv_ruleThisLiteral= ruleThisLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleThisLiteral"


    // $ANTLR start "ruleThisLiteral"
    // InternalMASLParser.g:11579:1: ruleThisLiteral returns [EObject current=null] : ( () otherlv_1= This ) ;
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11585:2: ( ( () otherlv_1= This ) )
            // InternalMASLParser.g:11586:2: ( () otherlv_1= This )
            {
            // InternalMASLParser.g:11586:2: ( () otherlv_1= This )
            // InternalMASLParser.g:11587:3: () otherlv_1= This
            {
            // InternalMASLParser.g:11587:3: ()
            // InternalMASLParser.g:11588:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleThisLiteral"


    // $ANTLR start "entryRuleConsoleLiteral"
    // InternalMASLParser.g:11602:1: entryRuleConsoleLiteral returns [EObject current=null] : iv_ruleConsoleLiteral= ruleConsoleLiteral EOF ;
    public final EObject entryRuleConsoleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConsoleLiteral = null;


        try {
            // InternalMASLParser.g:11602:55: (iv_ruleConsoleLiteral= ruleConsoleLiteral EOF )
            // InternalMASLParser.g:11603:2: iv_ruleConsoleLiteral= ruleConsoleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConsoleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConsoleLiteral=ruleConsoleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConsoleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConsoleLiteral"


    // $ANTLR start "ruleConsoleLiteral"
    // InternalMASLParser.g:11609:1: ruleConsoleLiteral returns [EObject current=null] : ( () otherlv_1= Console ) ;
    public final EObject ruleConsoleLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11615:2: ( ( () otherlv_1= Console ) )
            // InternalMASLParser.g:11616:2: ( () otherlv_1= Console )
            {
            // InternalMASLParser.g:11616:2: ( () otherlv_1= Console )
            // InternalMASLParser.g:11617:3: () otherlv_1= Console
            {
            // InternalMASLParser.g:11617:3: ()
            // InternalMASLParser.g:11618:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getConsoleLiteralAccess().getConsoleLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Console,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getConsoleLiteralAccess().getConsoleKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConsoleLiteral"


    // $ANTLR start "entryRuleEndlLiteral"
    // InternalMASLParser.g:11632:1: entryRuleEndlLiteral returns [EObject current=null] : iv_ruleEndlLiteral= ruleEndlLiteral EOF ;
    public final EObject entryRuleEndlLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEndlLiteral = null;


        try {
            // InternalMASLParser.g:11632:52: (iv_ruleEndlLiteral= ruleEndlLiteral EOF )
            // InternalMASLParser.g:11633:2: iv_ruleEndlLiteral= ruleEndlLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEndlLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEndlLiteral=ruleEndlLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEndlLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEndlLiteral"


    // $ANTLR start "ruleEndlLiteral"
    // InternalMASLParser.g:11639:1: ruleEndlLiteral returns [EObject current=null] : ( () otherlv_1= Endl ) ;
    public final EObject ruleEndlLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11645:2: ( ( () otherlv_1= Endl ) )
            // InternalMASLParser.g:11646:2: ( () otherlv_1= Endl )
            {
            // InternalMASLParser.g:11646:2: ( () otherlv_1= Endl )
            // InternalMASLParser.g:11647:3: () otherlv_1= Endl
            {
            // InternalMASLParser.g:11647:3: ()
            // InternalMASLParser.g:11648:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEndlLiteralAccess().getEndlLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Endl,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEndlLiteralAccess().getEndlKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEndlLiteral"


    // $ANTLR start "entryRuleLineNoLiteral"
    // InternalMASLParser.g:11662:1: entryRuleLineNoLiteral returns [EObject current=null] : iv_ruleLineNoLiteral= ruleLineNoLiteral EOF ;
    public final EObject entryRuleLineNoLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLineNoLiteral = null;


        try {
            // InternalMASLParser.g:11662:54: (iv_ruleLineNoLiteral= ruleLineNoLiteral EOF )
            // InternalMASLParser.g:11663:2: iv_ruleLineNoLiteral= ruleLineNoLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLineNoLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLineNoLiteral=ruleLineNoLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLineNoLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLineNoLiteral"


    // $ANTLR start "ruleLineNoLiteral"
    // InternalMASLParser.g:11669:1: ruleLineNoLiteral returns [EObject current=null] : ( () otherlv_1= LINE ) ;
    public final EObject ruleLineNoLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11675:2: ( ( () otherlv_1= LINE ) )
            // InternalMASLParser.g:11676:2: ( () otherlv_1= LINE )
            {
            // InternalMASLParser.g:11676:2: ( () otherlv_1= LINE )
            // InternalMASLParser.g:11677:3: () otherlv_1= LINE
            {
            // InternalMASLParser.g:11677:3: ()
            // InternalMASLParser.g:11678:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getLineNoLiteralAccess().getLineNoLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LINE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getLineNoLiteralAccess().getLINEKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLineNoLiteral"


    // $ANTLR start "entryRuleFileNameLiteral"
    // InternalMASLParser.g:11692:1: entryRuleFileNameLiteral returns [EObject current=null] : iv_ruleFileNameLiteral= ruleFileNameLiteral EOF ;
    public final EObject entryRuleFileNameLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFileNameLiteral = null;


        try {
            // InternalMASLParser.g:11692:56: (iv_ruleFileNameLiteral= ruleFileNameLiteral EOF )
            // InternalMASLParser.g:11693:2: iv_ruleFileNameLiteral= ruleFileNameLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFileNameLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFileNameLiteral=ruleFileNameLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFileNameLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFileNameLiteral"


    // $ANTLR start "ruleFileNameLiteral"
    // InternalMASLParser.g:11699:1: ruleFileNameLiteral returns [EObject current=null] : ( () otherlv_1= FILE ) ;
    public final EObject ruleFileNameLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11705:2: ( ( () otherlv_1= FILE ) )
            // InternalMASLParser.g:11706:2: ( () otherlv_1= FILE )
            {
            // InternalMASLParser.g:11706:2: ( () otherlv_1= FILE )
            // InternalMASLParser.g:11707:3: () otherlv_1= FILE
            {
            // InternalMASLParser.g:11707:3: ()
            // InternalMASLParser.g:11708:4: 
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFileNameLiteralAccess().getFileNameLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,FILE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFileNameLiteralAccess().getFILEKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFileNameLiteral"


    // $ANTLR start "ruleVisibility"
    // InternalMASLParser.g:11722:1: ruleVisibility returns [Enumerator current=null] : ( (enumLiteral_0= Public ) | (enumLiteral_1= Private ) ) ;
    public final Enumerator ruleVisibility() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11728:2: ( ( (enumLiteral_0= Public ) | (enumLiteral_1= Private ) ) )
            // InternalMASLParser.g:11729:2: ( (enumLiteral_0= Public ) | (enumLiteral_1= Private ) )
            {
            // InternalMASLParser.g:11729:2: ( (enumLiteral_0= Public ) | (enumLiteral_1= Private ) )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==Public) ) {
                alt217=1;
            }
            else if ( (LA217_0==Private) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // InternalMASLParser.g:11730:3: (enumLiteral_0= Public )
                    {
                    // InternalMASLParser.g:11730:3: (enumLiteral_0= Public )
                    // InternalMASLParser.g:11731:4: enumLiteral_0= Public
                    {
                    enumLiteral_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11738:3: (enumLiteral_1= Private )
                    {
                    // InternalMASLParser.g:11738:3: (enumLiteral_1= Private )
                    // InternalMASLParser.g:11739:4: enumLiteral_1= Private
                    {
                    enumLiteral_1=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVisibility"


    // $ANTLR start "ruleEventType"
    // InternalMASLParser.g:11749:1: ruleEventType returns [Enumerator current=null] : ( (enumLiteral_0= Assigner ) | (enumLiteral_1= Creation ) ) ;
    public final Enumerator ruleEventType() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11755:2: ( ( (enumLiteral_0= Assigner ) | (enumLiteral_1= Creation ) ) )
            // InternalMASLParser.g:11756:2: ( (enumLiteral_0= Assigner ) | (enumLiteral_1= Creation ) )
            {
            // InternalMASLParser.g:11756:2: ( (enumLiteral_0= Assigner ) | (enumLiteral_1= Creation ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==Assigner) ) {
                alt218=1;
            }
            else if ( (LA218_0==Creation) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // InternalMASLParser.g:11757:3: (enumLiteral_0= Assigner )
                    {
                    // InternalMASLParser.g:11757:3: (enumLiteral_0= Assigner )
                    // InternalMASLParser.g:11758:4: enumLiteral_0= Assigner
                    {
                    enumLiteral_0=(Token)match(input,Assigner,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEventTypeAccess().getAssignerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEventTypeAccess().getAssignerEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11765:3: (enumLiteral_1= Creation )
                    {
                    // InternalMASLParser.g:11765:3: (enumLiteral_1= Creation )
                    // InternalMASLParser.g:11766:4: enumLiteral_1= Creation
                    {
                    enumLiteral_1=(Token)match(input,Creation,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEventTypeAccess().getCreationEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEventTypeAccess().getCreationEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEventType"


    // $ANTLR start "ruleTransTableType"
    // InternalMASLParser.g:11776:1: ruleTransTableType returns [Enumerator current=null] : (enumLiteral_0= Assigner ) ;
    public final Enumerator ruleTransTableType() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11782:2: ( (enumLiteral_0= Assigner ) )
            // InternalMASLParser.g:11783:2: (enumLiteral_0= Assigner )
            {
            // InternalMASLParser.g:11783:2: (enumLiteral_0= Assigner )
            // InternalMASLParser.g:11784:3: enumLiteral_0= Assigner
            {
            enumLiteral_0=(Token)match(input,Assigner,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = grammarAccess.getTransTableTypeAccess().getAssignerEnumLiteralDeclaration().getEnumLiteral().getInstance();
              			newLeafNode(enumLiteral_0, grammarAccess.getTransTableTypeAccess().getAssignerEnumLiteralDeclaration());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTransTableType"


    // $ANTLR start "ruleParameterMode"
    // InternalMASLParser.g:11793:1: ruleParameterMode returns [Enumerator current=null] : ( (enumLiteral_0= In ) | (enumLiteral_1= Out ) ) ;
    public final Enumerator ruleParameterMode() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11799:2: ( ( (enumLiteral_0= In ) | (enumLiteral_1= Out ) ) )
            // InternalMASLParser.g:11800:2: ( (enumLiteral_0= In ) | (enumLiteral_1= Out ) )
            {
            // InternalMASLParser.g:11800:2: ( (enumLiteral_0= In ) | (enumLiteral_1= Out ) )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==In) ) {
                alt219=1;
            }
            else if ( (LA219_0==Out) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // InternalMASLParser.g:11801:3: (enumLiteral_0= In )
                    {
                    // InternalMASLParser.g:11801:3: (enumLiteral_0= In )
                    // InternalMASLParser.g:11802:4: enumLiteral_0= In
                    {
                    enumLiteral_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getParameterModeAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getParameterModeAccess().getInEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11809:3: (enumLiteral_1= Out )
                    {
                    // InternalMASLParser.g:11809:3: (enumLiteral_1= Out )
                    // InternalMASLParser.g:11810:4: enumLiteral_1= Out
                    {
                    enumLiteral_1=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getParameterModeAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getParameterModeAccess().getOutEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterMode"


    // $ANTLR start "ruleConditionality"
    // InternalMASLParser.g:11820:1: ruleConditionality returns [Enumerator current=null] : ( (enumLiteral_0= Unconditionally ) | (enumLiteral_1= Conditionally ) ) ;
    public final Enumerator ruleConditionality() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11826:2: ( ( (enumLiteral_0= Unconditionally ) | (enumLiteral_1= Conditionally ) ) )
            // InternalMASLParser.g:11827:2: ( (enumLiteral_0= Unconditionally ) | (enumLiteral_1= Conditionally ) )
            {
            // InternalMASLParser.g:11827:2: ( (enumLiteral_0= Unconditionally ) | (enumLiteral_1= Conditionally ) )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==Unconditionally) ) {
                alt220=1;
            }
            else if ( (LA220_0==Conditionally) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // InternalMASLParser.g:11828:3: (enumLiteral_0= Unconditionally )
                    {
                    // InternalMASLParser.g:11828:3: (enumLiteral_0= Unconditionally )
                    // InternalMASLParser.g:11829:4: enumLiteral_0= Unconditionally
                    {
                    enumLiteral_0=(Token)match(input,Unconditionally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getConditionalityAccess().getUnconditionallyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getConditionalityAccess().getUnconditionallyEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11836:3: (enumLiteral_1= Conditionally )
                    {
                    // InternalMASLParser.g:11836:3: (enumLiteral_1= Conditionally )
                    // InternalMASLParser.g:11837:4: enumLiteral_1= Conditionally
                    {
                    enumLiteral_1=(Token)match(input,Conditionally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getConditionalityAccess().getConditionallyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getConditionalityAccess().getConditionallyEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConditionality"


    // $ANTLR start "ruleMultiplicity"
    // InternalMASLParser.g:11847:1: ruleMultiplicity returns [Enumerator current=null] : ( (enumLiteral_0= One ) | (enumLiteral_1= Many ) ) ;
    public final Enumerator ruleMultiplicity() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11853:2: ( ( (enumLiteral_0= One ) | (enumLiteral_1= Many ) ) )
            // InternalMASLParser.g:11854:2: ( (enumLiteral_0= One ) | (enumLiteral_1= Many ) )
            {
            // InternalMASLParser.g:11854:2: ( (enumLiteral_0= One ) | (enumLiteral_1= Many ) )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==One) ) {
                alt221=1;
            }
            else if ( (LA221_0==Many) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // InternalMASLParser.g:11855:3: (enumLiteral_0= One )
                    {
                    // InternalMASLParser.g:11855:3: (enumLiteral_0= One )
                    // InternalMASLParser.g:11856:4: enumLiteral_0= One
                    {
                    enumLiteral_0=(Token)match(input,One,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicityAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicityAccess().getOneEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11863:3: (enumLiteral_1= Many )
                    {
                    // InternalMASLParser.g:11863:3: (enumLiteral_1= Many )
                    // InternalMASLParser.g:11864:4: enumLiteral_1= Many
                    {
                    enumLiteral_1=(Token)match(input,Many,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicityAccess().getManyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicityAccess().getManyEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMultiplicity"


    // $ANTLR start "ruleLinkType"
    // InternalMASLParser.g:11874:1: ruleLinkType returns [Enumerator current=null] : ( (enumLiteral_0= Link ) | (enumLiteral_1= Unlink ) ) ;
    public final Enumerator ruleLinkType() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11880:2: ( ( (enumLiteral_0= Link ) | (enumLiteral_1= Unlink ) ) )
            // InternalMASLParser.g:11881:2: ( (enumLiteral_0= Link ) | (enumLiteral_1= Unlink ) )
            {
            // InternalMASLParser.g:11881:2: ( (enumLiteral_0= Link ) | (enumLiteral_1= Unlink ) )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==Link) ) {
                alt222=1;
            }
            else if ( (LA222_0==Unlink) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // InternalMASLParser.g:11882:3: (enumLiteral_0= Link )
                    {
                    // InternalMASLParser.g:11882:3: (enumLiteral_0= Link )
                    // InternalMASLParser.g:11883:4: enumLiteral_0= Link
                    {
                    enumLiteral_0=(Token)match(input,Link,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getLinkTypeAccess().getLinkEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getLinkTypeAccess().getLinkEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11890:3: (enumLiteral_1= Unlink )
                    {
                    // InternalMASLParser.g:11890:3: (enumLiteral_1= Unlink )
                    // InternalMASLParser.g:11891:4: enumLiteral_1= Unlink
                    {
                    enumLiteral_1=(Token)match(input,Unlink,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getLinkTypeAccess().getUnlinkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getLinkTypeAccess().getUnlinkEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLinkType"


    // $ANTLR start "ruleScheduleType"
    // InternalMASLParser.g:11901:1: ruleScheduleType returns [Enumerator current=null] : ( (enumLiteral_0= At ) | (enumLiteral_1= Delay ) ) ;
    public final Enumerator ruleScheduleType() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11907:2: ( ( (enumLiteral_0= At ) | (enumLiteral_1= Delay ) ) )
            // InternalMASLParser.g:11908:2: ( (enumLiteral_0= At ) | (enumLiteral_1= Delay ) )
            {
            // InternalMASLParser.g:11908:2: ( (enumLiteral_0= At ) | (enumLiteral_1= Delay ) )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==At) ) {
                alt223=1;
            }
            else if ( (LA223_0==Delay) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // InternalMASLParser.g:11909:3: (enumLiteral_0= At )
                    {
                    // InternalMASLParser.g:11909:3: (enumLiteral_0= At )
                    // InternalMASLParser.g:11910:4: enumLiteral_0= At
                    {
                    enumLiteral_0=(Token)match(input,At,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getScheduleTypeAccess().getAtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getScheduleTypeAccess().getAtEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11917:3: (enumLiteral_1= Delay )
                    {
                    // InternalMASLParser.g:11917:3: (enumLiteral_1= Delay )
                    // InternalMASLParser.g:11918:4: enumLiteral_1= Delay
                    {
                    enumLiteral_1=(Token)match(input,Delay,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getScheduleTypeAccess().getDelayEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getScheduleTypeAccess().getDelayEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScheduleType"


    // $ANTLR start "ruleFindType"
    // InternalMASLParser.g:11928:1: ruleFindType returns [Enumerator current=null] : ( (enumLiteral_0= Find ) | (enumLiteral_1= Find_all ) | (enumLiteral_2= Find_one ) | (enumLiteral_3= Find_only ) ) ;
    public final Enumerator ruleFindType() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;


        	enterRule();

        try {
            // InternalMASLParser.g:11934:2: ( ( (enumLiteral_0= Find ) | (enumLiteral_1= Find_all ) | (enumLiteral_2= Find_one ) | (enumLiteral_3= Find_only ) ) )
            // InternalMASLParser.g:11935:2: ( (enumLiteral_0= Find ) | (enumLiteral_1= Find_all ) | (enumLiteral_2= Find_one ) | (enumLiteral_3= Find_only ) )
            {
            // InternalMASLParser.g:11935:2: ( (enumLiteral_0= Find ) | (enumLiteral_1= Find_all ) | (enumLiteral_2= Find_one ) | (enumLiteral_3= Find_only ) )
            int alt224=4;
            switch ( input.LA(1) ) {
            case Find:
                {
                alt224=1;
                }
                break;
            case Find_all:
                {
                alt224=2;
                }
                break;
            case Find_one:
                {
                alt224=3;
                }
                break;
            case Find_only:
                {
                alt224=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // InternalMASLParser.g:11936:3: (enumLiteral_0= Find )
                    {
                    // InternalMASLParser.g:11936:3: (enumLiteral_0= Find )
                    // InternalMASLParser.g:11937:4: enumLiteral_0= Find
                    {
                    enumLiteral_0=(Token)match(input,Find,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalMASLParser.g:11944:3: (enumLiteral_1= Find_all )
                    {
                    // InternalMASLParser.g:11944:3: (enumLiteral_1= Find_all )
                    // InternalMASLParser.g:11945:4: enumLiteral_1= Find_all
                    {
                    enumLiteral_1=(Token)match(input,Find_all,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalMASLParser.g:11952:3: (enumLiteral_2= Find_one )
                    {
                    // InternalMASLParser.g:11952:3: (enumLiteral_2= Find_one )
                    // InternalMASLParser.g:11953:4: enumLiteral_2= Find_one
                    {
                    enumLiteral_2=(Token)match(input,Find_one,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getFindTypeAccess().getFind_oneEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getFindTypeAccess().getFind_oneEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalMASLParser.g:11960:3: (enumLiteral_3= Find_only )
                    {
                    // InternalMASLParser.g:11960:3: (enumLiteral_3= Find_only )
                    // InternalMASLParser.g:11961:4: enumLiteral_3= Find_only
                    {
                    enumLiteral_3=(Token)match(input,Find_only,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getFindTypeAccess().getFind_onlyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getFindTypeAccess().getFind_onlyEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFindType"

    // $ANTLR start synpred1_InternalMASLParser
    public final void synpred1_InternalMASLParser_fragment() throws RecognitionException {   
        // InternalMASLParser.g:9622:6: ( ( ruleNavigateExpression ) )
        // InternalMASLParser.g:9622:7: ( ruleNavigateExpression )
        {
        // InternalMASLParser.g:9622:7: ( ruleNavigateExpression )
        // InternalMASLParser.g:9623:7: ruleNavigateExpression
        {
        pushFollow(FOLLOW_2);
        ruleNavigateExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred1_InternalMASLParser

    // $ANTLR start synpred3_InternalMASLParser
    public final void synpred3_InternalMASLParser_fragment() throws RecognitionException {   
        // InternalMASLParser.g:10645:7: ( LeftParenthesis )
        // InternalMASLParser.g:10645:8: LeftParenthesis
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_InternalMASLParser

    // Delegated rules

    public final boolean synpred1_InternalMASLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalMASLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalMASLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalMASLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA206 dfa206 = new DFA206(this);
    static final String dfa_1s = "\16\uffff";
    static final String dfa_2s = "\1\33\2\uffff\2\35\2\u0095\2\uffff\1\163\1\u0095\1\u0082\2\uffff";
    static final String dfa_3s = "\1\114\2\uffff\2\56\2\u0095\2\uffff\1\163\1\u0095\1\u008b\2\uffff";
    static final String dfa_4s = "\1\uffff\1\1\1\2\4\uffff\1\4\1\5\3\uffff\1\3\1\6";
    static final String dfa_5s = "\16\uffff}>";
    static final String[] dfa_6s = {
            "\2\10\1\7\3\uffff\1\6\1\uffff\1\7\3\uffff\1\10\3\uffff\1\4\1\1\1\uffff\1\5\10\uffff\1\2\4\uffff\1\3\17\uffff\1\10",
            "",
            "",
            "\1\7\3\uffff\1\6\1\uffff\1\7\12\uffff\1\5",
            "\1\7\3\uffff\1\6\1\uffff\1\7\12\uffff\1\5",
            "\1\11",
            "\1\11",
            "",
            "",
            "\1\12",
            "\1\13",
            "\1\15\2\uffff\1\14\5\uffff\1\7",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "128:2: (this_ProjectDefinition_0= ruleProjectDefinition | this_DomainDefinition_1= ruleDomainDefinition | this_DomainServiceDefinition_2= ruleDomainServiceDefinition | this_ObjectServiceDefinition_3= ruleObjectServiceDefinition | this_StateDefinition_4= ruleStateDefinition | this_TerminatorServiceDefinition_5= ruleTerminatorServiceDefinition )";
        }
    }
    static final String dfa_7s = "\21\uffff";
    static final String dfa_8s = "\1\17\1\uffff\1\u0095\2\27\3\uffff\2\u0095\1\uffff\2\176\4\uffff";
    static final String dfa_9s = "\1\146\1\uffff\1\u0095\2\136\3\uffff\2\u0095\1\uffff\2\u008e\4\uffff";
    static final String dfa_10s = "\1\uffff\1\11\3\uffff\1\2\1\3\1\4\2\uffff\1\10\2\uffff\1\1\1\5\1\6\1\7";
    static final String dfa_11s = "\21\uffff}>";
    static final String[] dfa_12s = {
            "\1\7\4\uffff\1\6\2\uffff\1\12\11\uffff\1\5\11\uffff\1\4\2\uffff\1\5\1\11\11\uffff\1\2\2\uffff\1\3\41\uffff\1\10\7\uffff\1\1",
            "",
            "\1\13",
            "\1\12\11\uffff\1\5\14\uffff\1\5\1\11\56\uffff\1\10",
            "\1\12\11\uffff\1\5\14\uffff\1\5\1\11\56\uffff\1\10",
            "",
            "",
            "",
            "\1\14",
            "\1\14",
            "",
            "\1\16\17\uffff\1\15",
            "\1\20\17\uffff\1\17",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "()* loopback of 692:3: ( ( (lv_objects_3_0= ruleObjectDeclaration ) ) | ( (lv_services_4_0= ruleDomainServiceDeclaration ) ) | ( (lv_terminators_5_0= ruleTerminatorDefinition ) ) | ( (lv_relationships_6_0= ruleRelationshipDefinition ) ) | ( (lv_objectDefs_7_0= ruleObjectDefinition ) ) | ( (lv_typeForwards_8_0= ruleTypeForwardDeclaration ) ) | ( (lv_types_9_0= ruleTypeDeclaration ) ) | ( (lv_exceptions_10_0= ruleExceptionDeclaration ) ) )*";
        }
    }
    static final String dfa_13s = "\23\uffff";
    static final String dfa_14s = "\4\uffff\1\5\2\uffff\1\5\4\uffff\1\5\2\uffff\1\5\3\uffff";
    static final String dfa_15s = "\1\21\2\uffff\1\21\1\66\1\uffff\1\u0085\1\66\1\u0095\1\uffff\1\21\1\u0095\1\66\1\4\1\21\1\66\1\u0095\1\uffff\1\4";
    static final String dfa_16s = "\1\u0095\2\uffff\1\u0095\1\u008e\1\uffff\1\u0085\1\u008e\1\u0095\1\uffff\1\u009b\1\u0095\1\u008e\1\u0092\1\u0095\1\u008e\1\u0095\1\uffff\1\u0092";
    static final String dfa_17s = "\1\uffff\1\1\1\2\2\uffff\1\4\3\uffff\1\3\7\uffff\1\5\1\uffff";
    static final String dfa_18s = "\23\uffff}>";
    static final String[] dfa_19s = {
            "\1\5\4\uffff\1\3\3\uffff\1\1\10\uffff\1\5\2\uffff\1\5\31\uffff\1\6\22\uffff\1\2\21\uffff\1\5\7\uffff\1\5\47\uffff\1\4",
            "",
            "",
            "\1\5\21\uffff\1\5\2\uffff\1\5\31\uffff\1\5\44\uffff\1\5\7\uffff\1\5\47\uffff\1\7",
            "\1\11\14\uffff\1\11\6\uffff\1\11\50\uffff\1\10\21\uffff\1\5\10\uffff\1\5",
            "",
            "\1\12",
            "\1\11\14\uffff\1\11\6\uffff\1\11\50\uffff\1\13\32\uffff\1\5",
            "\1\14",
            "",
            "\1\5\4\uffff\1\16\1\uffff\1\5\6\uffff\2\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\6\uffff\2\5\2\uffff\1\5\12\uffff\2\5\6\uffff\2\5\11\uffff\1\5\2\uffff\1\5\1\uffff\1\5\2\uffff\1\5\1\uffff\2\5\5\uffff\1\5\1\uffff\1\5\3\uffff\1\5\3\uffff\1\5\27\uffff\1\5\2\uffff\1\5\1\uffff\1\5\12\uffff\1\15\6\5",
            "\1\17",
            "\1\11\14\uffff\1\11\6\uffff\1\11\72\uffff\1\5\10\uffff\1\5",
            "\1\5\7\uffff\1\5\6\uffff\1\5\12\uffff\1\5\31\uffff\1\5\21\uffff\1\21\2\uffff\1\5\22\uffff\3\5\1\uffff\1\5\3\uffff\1\5\3\uffff\1\5\1\uffff\5\5\1\20\1\uffff\2\5\2\uffff\2\5\5\uffff\1\5\1\uffff\7\5\1\uffff\3\5\2\uffff\4\5",
            "\1\5\21\uffff\1\5\2\uffff\1\5\31\uffff\1\5\44\uffff\1\5\7\uffff\1\5\47\uffff\1\21",
            "\1\11\14\uffff\1\11\6\uffff\1\11\103\uffff\1\5",
            "\1\22",
            "",
            "\1\5\7\uffff\1\5\6\uffff\1\5\12\uffff\1\5\31\uffff\1\5\21\uffff\1\21\2\uffff\1\5\22\uffff\3\5\1\uffff\1\5\3\uffff\1\5\3\uffff\1\5\1\uffff\5\5\2\uffff\2\5\2\uffff\2\5\5\uffff\1\5\1\uffff\7\5\1\uffff\3\5\2\uffff\4\5"
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_13;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "1684:2: (this_StructureTypeDefinition_0= ruleStructureTypeDefinition | this_EnumerationTypeDefinition_1= ruleEnumerationTypeDefinition | this_ConstrainedTypeDefinition_2= ruleConstrainedTypeDefinition | this_AbstractTypeReferenceWithCA_3= ruleAbstractTypeReferenceWithCA | this_UnconstrainedArrayDefinition_4= ruleUnconstrainedArrayDefinition )";
        }
    }
    static final String dfa_20s = "\12\uffff";
    static final String dfa_21s = "\1\22\4\uffff\1\25\1\106\3\uffff";
    static final String dfa_22s = "\1\u0095\4\uffff\2\114\3\uffff";
    static final String dfa_23s = "\1\uffff\1\7\1\1\1\2\1\3\2\uffff\1\4\1\5\1\6";
    static final String dfa_24s = "\12\uffff}>";
    static final String[] dfa_25s = {
            "\1\3\2\uffff\1\11\5\uffff\1\5\1\6\1\4\3\uffff\1\4\1\uffff\1\4\3\uffff\1\10\3\uffff\1\4\2\uffff\1\4\15\uffff\1\4\11\uffff\1\7\5\uffff\1\10\31\uffff\1\1\56\uffff\1\2",
            "",
            "",
            "",
            "",
            "\1\11\60\uffff\1\7\4\uffff\2\10",
            "\1\7\5\uffff\1\10",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "()* loopback of 3428:3: ( ( (lv_attributes_3_0= ruleAttributeDefinition ) ) | ( (lv_identifiers_4_0= ruleIdentifierDefinition ) ) | ( (lv_services_5_0= ruleObjectServiceDeclaration ) ) | ( (lv_events_6_0= ruleEventDefinition ) ) | ( (lv_states_7_0= ruleStateDeclaration ) ) | ( (lv_transitions_8_0= ruleTransitionTable ) ) )*";
        }
    }
    static final String dfa_26s = "\25\uffff";
    static final String dfa_27s = "\1\u0095\1\176\1\u0095\1\5\2\u0095\1\uffff\1\131\2\u0095\1\u0089\1\u0095\1\5\2\u0095\1\131\2\u0095\1\116\2\uffff";
    static final String dfa_28s = "\1\u0095\1\176\1\u0095\1\126\2\u0095\1\uffff\1\152\2\u0095\1\u0089\1\u0095\1\11\2\u0095\1\152\2\u0095\1\u008e\2\uffff";
    static final String dfa_29s = "\6\uffff\1\3\14\uffff\1\2\1\1";
    static final String dfa_30s = "\25\uffff}>";
    static final String[] dfa_31s = {
            "\1\1",
            "\1\2",
            "\1\3",
            "\1\4\3\uffff\1\5\114\uffff\1\6",
            "\1\7",
            "\1\7",
            "",
            "\1\11\20\uffff\1\10",
            "\1\12",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15\3\uffff\1\16",
            "\1\17",
            "\1\17",
            "\1\21\20\uffff\1\20",
            "\1\22",
            "\1\22",
            "\1\23\77\uffff\1\24",
            "",
            ""
    };

    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = dfa_26;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "4792:3: (this_RegularRelationshipDefinition_1= ruleRegularRelationshipDefinition | this_AssocRelationshipDefinition_2= ruleAssocRelationshipDefinition | this_SubtypeRelationshipDefinition_3= ruleSubtypeRelationshipDefinition )";
        }
    }
    static final String dfa_32s = "\1\21\1\uffff\1\4\16\uffff";
    static final String dfa_33s = "\1\u009b\1\uffff\1\u0092\16\uffff";
    static final String dfa_34s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17";
    static final String[] dfa_35s = {
            "\1\3\4\uffff\1\3\1\uffff\1\3\6\uffff\2\3\1\uffff\1\14\1\3\1\uffff\1\12\1\3\2\uffff\1\3\1\1\5\uffff\2\3\1\uffff\1\13\1\3\1\10\7\uffff\1\5\1\uffff\2\3\1\1\1\6\2\uffff\1\11\1\uffff\2\3\1\7\5\uffff\1\20\1\16\1\uffff\1\3\1\uffff\1\4\1\3\1\uffff\1\3\2\uffff\1\3\1\uffff\2\3\5\uffff\1\3\1\uffff\1\3\1\uffff\1\17\1\uffff\1\3\3\uffff\1\3\16\uffff\1\15\10\uffff\1\3\2\uffff\1\3\1\uffff\1\3\12\uffff\1\2\6\3",
            "",
            "\1\3\7\uffff\1\3\6\uffff\1\3\12\uffff\1\3\31\uffff\1\3\24\uffff\1\3\22\uffff\3\3\1\uffff\1\3\3\uffff\1\3\3\uffff\1\3\1\uffff\11\3\2\uffff\2\3\5\uffff\1\3\1\uffff\4\3\1\uffff\2\3\1\uffff\3\3\1\1\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[][] dfa_35 = unpackEncodedStringArray(dfa_35s);

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_32;
            this.max = dfa_33;
            this.accept = dfa_34;
            this.special = dfa_11;
            this.transition = dfa_35;
        }
        public String getDescription() {
            return "6056:3: (this_CodeBlockStatement_0= ruleCodeBlockStatement | this_AssignStatement_1= ruleAssignStatement | this_ExitStatement_2= ruleExitStatement | this_ReturnStatement_3= ruleReturnStatement | this_DelayStatement_4= ruleDelayStatement | this_RaiseStatement_5= ruleRaiseStatement | this_DeleteStatement_6= ruleDeleteStatement | this_EraseStatement_7= ruleEraseStatement | this_ScheduleStatement_8= ruleScheduleStatement | this_CancelTimerStatement_9= ruleCancelTimerStatement | this_GenerateStatement_10= ruleGenerateStatement | this_IfStatement_11= ruleIfStatement | this_CaseStatement_12= ruleCaseStatement | this_ForStatement_13= ruleForStatement | this_WhileStatement_14= ruleWhileStatement )";
        }
    }
    static final String dfa_36s = "\37\uffff";
    static final String dfa_37s = "\1\36\36\uffff";
    static final String dfa_38s = "\1\14\36\uffff";
    static final String dfa_39s = "\1\u009b\36\uffff";
    static final String dfa_40s = "\1\uffff\35\1\1\2";
    static final String dfa_41s = "\1\0\36\uffff}>";
    static final String[] dfa_42s = {
            "\1\36\4\uffff\1\30\4\uffff\1\22\1\uffff\1\35\5\uffff\1\36\1\33\1\34\1\uffff\1\36\1\23\2\uffff\1\24\2\uffff\1\14\6\uffff\1\17\1\16\2\uffff\1\31\3\uffff\1\36\7\uffff\1\25\1\uffff\2\36\3\uffff\1\10\1\12\1\uffff\1\36\2\uffff\1\36\4\uffff\1\15\2\uffff\1\32\2\uffff\1\36\1\uffff\1\11\1\36\1\13\1\7\3\uffff\2\36\1\uffff\1\36\1\27\2\uffff\1\36\3\uffff\1\36\1\26\2\36\1\uffff\2\36\1\uffff\3\36\1\uffff\4\36\2\uffff\1\36\1\uffff\1\36\2\uffff\1\36\1\uffff\1\20\5\36\1\uffff\1\36\1\uffff\4\36\1\uffff\2\36\1\21\1\1\1\2\1\4\1\3\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final char[] dfa_39 = DFA.unpackEncodedStringToUnsignedChars(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final short[][] dfa_42 = unpackEncodedStringArray(dfa_42s);

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = dfa_36;
            this.eof = dfa_37;
            this.min = dfa_38;
            this.max = dfa_39;
            this.accept = dfa_40;
            this.special = dfa_41;
            this.transition = dfa_42;
        }
        public String getDescription() {
            return "9620:4: ( ( ( ( ruleNavigateExpression ) )=> (lv_rhs_5_0= ruleNavigateExpression ) ) (otherlv_6= Using ( (lv_assoc_7_0= ruleNavigateExpression ) ) )? )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA185_0 = input.LA(1);

                         
                        int index185_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_0==RULE_INT) && (synpred1_InternalMASLParser())) {s = 1;}

                        else if ( (LA185_0==RULE_REAL) && (synpred1_InternalMASLParser())) {s = 2;}

                        else if ( (LA185_0==RULE_CHAR) && (synpred1_InternalMASLParser())) {s = 3;}

                        else if ( (LA185_0==RULE_STRING) && (synpred1_InternalMASLParser())) {s = 4;}

                        else if ( (LA185_0==RULE_DURATION) && (synpred1_InternalMASLParser())) {s = 5;}

                        else if ( (LA185_0==RULE_TIMESTAMP) && (synpred1_InternalMASLParser())) {s = 6;}

                        else if ( (LA185_0==True) && (synpred1_InternalMASLParser())) {s = 7;}

                        else if ( (LA185_0==False) && (synpred1_InternalMASLParser())) {s = 8;}

                        else if ( (LA185_0==Null) && (synpred1_InternalMASLParser())) {s = 9;}

                        else if ( (LA185_0==Flush) && (synpred1_InternalMASLParser())) {s = 10;}

                        else if ( (LA185_0==This) && (synpred1_InternalMASLParser())) {s = 11;}

                        else if ( (LA185_0==Console) && (synpred1_InternalMASLParser())) {s = 12;}

                        else if ( (LA185_0==Endl) && (synpred1_InternalMASLParser())) {s = 13;}

                        else if ( (LA185_0==LINE) && (synpred1_InternalMASLParser())) {s = 14;}

                        else if ( (LA185_0==FILE) && (synpred1_InternalMASLParser())) {s = 15;}

                        else if ( (LA185_0==LeftParenthesis) && (synpred1_InternalMASLParser())) {s = 16;}

                        else if ( (LA185_0==RULE_ID) && (synpred1_InternalMASLParser())) {s = 17;}

                        else if ( (LA185_0==Anonymous) && (synpred1_InternalMASLParser())) {s = 18;}

                        else if ( (LA185_0==Instance) && (synpred1_InternalMASLParser())) {s = 19;}

                        else if ( (LA185_0==Sequence) && (synpred1_InternalMASLParser())) {s = 20;}

                        else if ( (LA185_0==Array) && (synpred1_InternalMASLParser())) {s = 21;}

                        else if ( (LA185_0==Set) && (synpred1_InternalMASLParser())) {s = 22;}

                        else if ( (LA185_0==Bag) && (synpred1_InternalMASLParser())) {s = 23;}

                        else if ( (LA185_0==Dictionary) && (synpred1_InternalMASLParser())) {s = 24;}

                        else if ( (LA185_0==Create) && (synpred1_InternalMASLParser())) {s = 25;}

                        else if ( (LA185_0==Find) && (synpred1_InternalMASLParser())) {s = 26;}

                        else if ( (LA185_0==Find_all) && (synpred1_InternalMASLParser())) {s = 27;}

                        else if ( (LA185_0==Find_one) && (synpred1_InternalMASLParser())) {s = 28;}

                        else if ( (LA185_0==Find_only) && (synpred1_InternalMASLParser())) {s = 29;}

                        else if ( (LA185_0==EOF||LA185_0==Intersection||LA185_0==Disunion||LA185_0==Generate||LA185_0==Not_in||(LA185_0>=Delay && LA185_0<=Delta)||LA185_0==Range||LA185_0==Union||LA185_0==Loop||LA185_0==Then||(LA185_0>=LessThanSignLessThanSignLessThanSign && LA185_0<=GreaterThanSignGreaterThanSignGreaterThanSign)||LA185_0==And||LA185_0==Mod||LA185_0==Rem||(LA185_0>=Xor && LA185_0<=AsteriskAsterisk)||(LA185_0>=FullStopFullStop && LA185_0<=SolidusEqualsSign)||(LA185_0>=ColonEqualsSign && LA185_0<=LessThanSignEqualsSign)||(LA185_0>=EqualsSignGreaterThanSign && LA185_0<=At)||LA185_0==Is||LA185_0==Or||LA185_0==Ampersand||(LA185_0>=RightParenthesis && LA185_0<=HyphenMinus)||LA185_0==Solidus||(LA185_0>=Semicolon && LA185_0<=GreaterThanSign)||(LA185_0>=RightSquareBracket && LA185_0<=VerticalLine)) ) {s = 30;}

                         
                        input.seek(index185_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_43s = "\67\uffff";
    static final String dfa_44s = "\1\2\66\uffff";
    static final String dfa_45s = "\1\4\1\0\65\uffff";
    static final String dfa_46s = "\1\u0095\1\0\65\uffff";
    static final String dfa_47s = "\2\uffff\1\2\63\uffff\1\1";
    static final String dfa_48s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_49s = {
            "\1\2\7\uffff\1\2\6\uffff\1\2\12\uffff\1\2\3\uffff\1\2\25\uffff\1\2\11\uffff\2\2\6\uffff\1\2\2\uffff\2\2\11\uffff\1\2\2\uffff\1\2\4\uffff\3\2\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\1\uffff\5\2\1\uffff\3\2\1\uffff\4\2\2\uffff\1\2\1\uffff\1\2\1\uffff\3\2\1\1\7\2\1\uffff\10\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = dfa_43;
            this.eof = dfa_44;
            this.min = dfa_45;
            this.max = dfa_46;
            this.accept = dfa_47;
            this.special = dfa_48;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "10643:5: ( ( ( LeftParenthesis )=>otherlv_25= LeftParenthesis ) ( ( (lv_arguments_26_0= ruleExpression ) ) (otherlv_27= Comma ( (lv_arguments_28_0= ruleExpression ) ) )* )? otherlv_29= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA206_1 = input.LA(1);

                         
                        int index206_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalMASLParser()) ) {s = 54;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index206_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 206, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x1080588A38000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0003020000000000L,0x0000000034040180L,0x000000000FE00040L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0003020000000000L,0x0000000034040180L,0x000000000FE00000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200040L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000000L,0x2000080000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000004800420000L,0x0000202000000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0800100000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x1200C80200908000L,0x0000004040000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0880000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x1000894800420000L,0x0000206040000001L,0x0000000000208020L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L,0x0000000000200000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020200L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000004800420000L,0x0000202000000001L,0x0000000000200020L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000408L,0x0000000000200000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000004020L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000004800420000L,0x0000202000000401L,0x0000000000200000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000800000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000004804420000L,0x0000202000080001L,0x0000000000200000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000408L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x8013024981420000L,0x0000222834A40181L,0x000000000FE00520L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000800400002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x1000480200000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000400200000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x1000488A38240000L,0x0000004000001040L,0x0000000000200000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0200000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x4000004802430000L,0x0000202000000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x4000004800430000L,0x0000202000000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000004800430000L,0x0000202000000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000200040L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000400A20000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000400220000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000006C00L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000006C00L,0x0000004000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0004000000000140L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000220L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000040002000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x2000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0800400200000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0800000000000000L,0x0000000000001000L,0x0000000000004000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x8013024981420000L,0x0000222834A40181L,0x000000000FE00560L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000004L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0xA03B066D81420000L,0x100022E834B783B7L,0x000000000FE00520L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000004000020010L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xA03B066D81420002L,0x100022A834B583A7L,0x000000000FE00520L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xA03B066D81420000L,0x100022E834B583A7L,0x000000000FE00520L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000004080000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x8013224981420000L,0x0000222834A40181L,0x000000000FE00520L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0xA03B066D81C20000L,0x100022E834B583A7L,0x000000000FE00520L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000005800420000L,0x0000202000000001L,0x0000000000200000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000200020L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0240000000000000L,0x0000000000028000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0420000600000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0100000000000002L,0x0000000000002000L,0x0000000000000508L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000040001002L,0x0000910000000000L,0x0000000000001080L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0013024981420000L,0x0000202034240181L,0x000000000FE00020L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0013024981420002L,0x0000202034240181L,0x000000000FE00020L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000080012L,0x0001000100000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000080012L,0x0001000100000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0000000000200040L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000200040L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0003024800420000L,0x0000202034040181L,0x000000000FE00020L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000200060L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040834L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040810L});

}