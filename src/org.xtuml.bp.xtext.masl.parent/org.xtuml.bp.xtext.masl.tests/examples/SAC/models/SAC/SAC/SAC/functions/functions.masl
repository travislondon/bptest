public service SAC::user_logon ( user_id : in integer,
                                login_name : in string,
                                user_name : in string,
                                workstation_hostname : in string,
                                groups : in sequence of string ) is
login_allowed : boolean := false;
the_user : instance of User;
the_workstation : instance of Workstation;
the_session : instance of Session;
the_group : instance of Group;
the_group_for_session : instance of Group_For_Session;
session_operations : sequence of instance of Operation;
the_session_operation : instance of Session_Operation;
message : string;

begin
   
   // validate that at least one of the specified 
   // groups is allowed on the system before proceeding
   for a_group in groups'elements loop
      if (find_one Group(group_name = a_group)) /= null then
         login_allowed := true;
         exit;
      end if;
   end loop;
   
   if login_allowed = true then
      // locate the workstation and if it does not exist create it
      the_workstation := find_one Workstation(workstation_hostname = workstation_hostname);
      if the_workstation = null then
         the_workstation := create unique Workstation(workstation_hostname => workstation_hostname);
      end if;
      the_session := the_workstation -> R3.Session;
      if the_session /= null then
         // log an error as this was unexpected due to the workstation still having a session
         console << "Forced logout on workstation. Workstation = " << the_workstation.workstation_hostname
                 << " User = " << (the_session -> R3.User).user_name << endl << flush;
         // end the current session on this workstation
         the_session.delete_session();
      end if;
      
      // locate the user and if the user does not exist create it
      the_user := find_one User(user_id = user_id and login_name = login_name);
      if the_user = null then
         the_user := create User(user_id => user_id, 
                                   login_name => login_name, 
                                   user_name => user_name,
                                   is_logged_on => logged_on);
      end if;
      Operator~>report_user(the_user.user_id, the_user.login_name, the_user.user_name, the_user.is_logged_on);
      // create the session
      the_session := create unique Session(logon_time => timestamp'now, session_heartbeat_failure => 0,
                                               has_timed_out => false, workstation_id => the_workstation.workstation_id,
                                               Current_State => Created);
      link the_user R3 the_workstation using the_session;
      Operator~>report_user_session(the_session.session_id, the_session.user_id, the_session.logon_time,
                                     the_session.has_timed_out, (the_session -> R3.Workstation).workstation_hostname,
                                     the_session.login_name);
      
      // set up the groups for the session and 
      // report the operations that are available to the user
      for a_group in groups'elements loop
         the_group := find_one Group(group_name = a_group);
         if the_group /= null then
            the_group_for_session := create Group_For_Session(group_id => the_group.group_id, 
                                                                session_id => the_session.session_id);
            link the_group R2 the_session using the_group_for_session;
            Operator~>report_user_group(the_user.user_id, a_group, the_user.login_name, the_session.session_id);      
         end if;
      end loop;
      session_operations := the_session -> R2.Group -> R1.Operation;
      for a_session_operation in session_operations'elements loop
         the_session_operation := the_session with a_session_operation -> R5.Session_Operation;
         if the_session_operation = null then
            the_session_operation := create Session_Operation(session_id => the_session.session_id, 
                                                                operation_id => a_session_operation.operation_id);
            link the_session R5 a_session_operation using the_session_operation;
            Operator~>report_user_operation(the_user.user_id, a_session_operation.operation_name, the_user.login_name, the_session.session_id);
         end if;
      end loop;
      
      generate Session.user_logged_on() to the_session;      
      Operator~>login_valid(the_session.session_id, user_id, true, "", workstation_hostname, login_name);
   else
      message := "Login failure due to invalid group specified, user = " & user_name & 
                  " workstation = " & workstation_hostname & ".";
      Operator~>raise_notification(message, "Info");
      Operator~>login_valid(-1, user_id, false, "Invalid group specified", workstation_hostname, login_name);
   end if;
   
end service;

public service SAC::user_logoff ( session_id : in integer,
                                 user_id : in integer,
                                 login_name : in string ) is
the_session : instance of Session;
the_workstation : instance of Workstation;

begin
   
   // locate the session for the user
   the_session := find_one Session(session_id = session_id and user_id = user_id and login_name = login_name);
   if the_session /= null then
      the_workstation := the_session -> R3.Workstation;
      the_session.delete_session();
      // remove the workstation if it is no longer in use
      if (the_workstation -> R3.Session) = null then
         delete the_workstation;
      end if;
   else
      // log an error as this is an invalid logoff request
      console << "SAC::user_logoff - Invalid logoff received, session_id = " << session_id'image  << 
                 ", uid = " << user_id'image << ", sid = " << login_name << endl << flush;
   end if;
   
end service;

public service SAC::add_group ( group_name : in string ) is
the_group : instance of Group;

begin
   
   the_group := find_one Group(group_name = group_name);
   if the_group = null then
      the_group := create unique Group(group_name => group_name);
      Operator~>report_group(group_name);
   end if;
   
end service;

public service SAC::add_operation_to_group ( group_name : in string,
                                            operations : in sequence of string ) is
the_group : instance of Group;
the_operation : instance of Operation;
group_operation : instance of Group_Operation;

begin
   
   the_group := find_one Group(group_name = group_name);
   if the_group = null then
      the_group := create unique Group(group_name => group_name);
      Operator~>report_group(group_name);
   end if;
   
   for an_operation in operations'elements loop
      the_operation := find_one Operation(operation_name = an_operation);
      if the_operation = null then
         the_operation := create unique Operation(operation_name => an_operation);
      end if;
      group_operation := the_group with the_operation -> R1.Group_Operation;
      if group_operation = null then
         group_operation := create Group_Operation(group_id => the_group.group_id, 
                                                         operation_id => the_operation.operation_id);
         link the_group R1 the_operation using group_operation;
         Operator~>report_group_operation(group_name, an_operation);
      end if;
   end loop;
   
end service;

public service SAC::session_active ( session_id : in integer,
                                    user_id : in integer,
                                    login_name : in string ) is
the_session : instance of Session;

begin
   
   // locate the session
   the_session := find_one Session(session_id = session_id and user_id = user_id and login_name = login_name);
   if the_session /= null then
      generate Session.user_logged_on() to the_session;
   else
      // log an error as this is an invalid logoff request
      console << "SAC::session-active - Invalid session active received, session_id = " << session_id'image  << 
                 ", uid = " << user_id'image << ", sid = " << login_name << endl << flush;
   end if;
   
end service;

public service SAC::delete_group ( group_name : in string ) is
the_group : instance of Group;
the_operations : sequence of instance of Operation;
the_group_operation : instance of Group_Operation;
begin
   
   the_group := find_one Group(group_name = group_name);
   if the_group /= null then
      the_operations := the_group -> R1.Operation;
      for an_operation in the_operations'elements loop
         the_group_operation := the_group with an_operation -> R1.Group_Operation;
         Operator~>group_operation_removed(group_name, an_operation.operation_name);
         unlink the_group R1 an_operation using the_group_operation;
         delete the_group_operation;
      end loop;
   end if;
   
end service;

public service SAC::delete_group_operation ( group_name : in string,
                                            operations : in sequence of string ) is
the_group : instance of Group;
the_operations : sequence of instance of Operation;
the_operation : instance of Operation;
the_group_operation : instance of Group_Operation;
begin
   
   the_group := find_one Group(group_name = group_name);
   if the_group /= null then
      the_operations := the_group -> R1.Operation;
      for an_operation in operations'elements loop
         the_operation := find_one the_operations(operation_name = an_operation);
         if the_operation /= null then
            the_group_operation := the_group with the_operation -> R1.Group_Operation;
            Operator~>group_operation_removed(group_name, the_operation.operation_name);
            unlink the_group R1 the_operation using the_group_operation;
            delete the_group_operation;
         end if;
         if (the_operation -> R1.Group)'length = 0 then
            delete the_operation;
         end if;
      end loop;
   end if;
   
end service;

public service SAC::populate_domain ( reload_config_files : in boolean ) is
the_groups : sequence of group_type;
current_groups : sequence of instance of Group;
the_group : instance of Group;
required_groups : sequence of instance of Group;
current_group_operations : sequence of instance of Group_Operation;
the_operation : instance of Operation;
the_group_operation : instance of Group_Operation;
required_group_operations : sequence of instance of Group_Operation;
unwanted_group_operations : sequence of instance of Group_Operation;
the_unwanted_op : instance of Operation;
unwanted_groups : sequence of instance of Group;   
the_group_sessions : sequence of instance of Group_For_Session;
session_heartbeat_time : duration;
session_heartbeat_failure_threshold : integer;
the_session_spec : instance of Session_Specification;
the_user : instance of User;
the_user_groups : sequence of instance of Group;

begin
   
   if reload_config_files = true then
      System_Configuration~>reload_config_files();
   end if;
   
   // get the session spec data
   System_Configuration~>get_session_specification(session_heartbeat_time, session_heartbeat_failure_threshold);
   the_session_spec := find_one Session_Specification();
   if the_session_spec = null then
      the_session_spec := create unique Session_Specification(session_heartbeat_time => session_heartbeat_time,
                                             session_heartbeat_failure_threshold => session_heartbeat_failure_threshold);
   else
      the_session_spec.session_heartbeat_time := session_heartbeat_time;
      the_session_spec.session_heartbeat_failure_threshold := session_heartbeat_failure_threshold;
   end if;
   
   // determine the set of current groups so that they 
   // can be deleted if they are no longer valid
   current_groups := find_all Group();
   
   // read in the configuration data
   System_Configuration~>get_groups(the_groups);
   for a_group in the_groups'elements loop
      
      // locate the group and if it does not exist create it
      the_group := find_one Group(group_name = a_group.group_name);
      if the_group = null then
         the_group := create unique Group(group_name => a_group.group_name);
         Operator~>report_group(a_group.group_name);
      end if;
      required_groups := required_groups & the_group;
      
      // add in the operations for the group
      current_group_operations := the_group -> R1.Group_Operation;
      for a_group_operation in a_group.operation_names'elements loop
         the_operation := find_one Operation(operation_name = a_group_operation);
         if the_operation = null then
            the_operation := create unique Operation(operation_name => a_group_operation);
         end if;
         the_group_operation := the_group with the_operation -> R1.Group_Operation;
         if the_group_operation = null then
            the_group_operation := create Group_Operation(operation_id => the_operation.operation_id,
                                                            group_id => the_group.group_id);
            link the_group R1 the_operation using the_group_operation;
            Operator~>report_group_operation(a_group.group_name, a_group_operation);
         end if;
         required_group_operations := required_group_operations & the_group_operation;
      end loop;
      
      // remove any unwanted group operations
      unwanted_group_operations := current_group_operations not_in required_group_operations;
      for an_unwanted_group_op in unwanted_group_operations'elements loop
         the_unwanted_op := an_unwanted_group_op -> R1.Operation;
         Operator~>group_operation_removed((an_unwanted_group_op -> R1.Group).group_name, 
                                           the_unwanted_op.operation_name);
         unlink (an_unwanted_group_op -> R1.Group) R1 the_unwanted_op using an_unwanted_group_op;
         delete an_unwanted_group_op;
         
         // if the op is not in use then remove it
         if (the_unwanted_op -> R1.Group)'length = 0 and (the_unwanted_op -> R5.Session)'length = 0 then
            delete the_unwanted_op;
         end if;
      end loop;
      
   end loop;
   
   // remove any unwanted groups
   unwanted_groups := current_groups not_in required_groups;   
   for an_unwanted_group in unwanted_groups'elements loop
      Operator~>group_deleted(an_unwanted_group.group_name);
      the_group_sessions := the_group -> R2.Group_For_Session;
      for a_group_session in the_group_sessions'elements loop
         the_user := a_group_session -> R2.Session -> R3.User;
         unlink the_group R2 (a_group_session -> R2.Session) using a_group_session;
         delete a_group_session;
         the_user_groups := the_user -> R3.Session -> R2.Group;
         if (find the_user_groups(group_name = an_unwanted_group.group_name))'length = 0 then
            Operator~>user_group_removed(the_user.user_id, an_unwanted_group.group_name, the_user.login_name, a_group_session.session_id);
         end if;
      end loop;
   end loop;
   
end service;

public service SAC::resend_infos () is
all_groups : sequence of instance of Group;
the_operations : sequence of instance of Operation;
all_users : sequence of instance of User;
the_sessions : sequence of instance of Session;
the_groups : sequence of instance of Group;

begin
   
   // report all groups
   all_groups := find_all Group();
   for a_group in all_groups'elements loop
      Operator~>report_group(a_group.group_name);
      // report all group operations
      the_operations := a_group -> R1.Operation;
      for an_operation in the_operations'elements loop
         Operator~>report_group_operation(a_group.group_name, an_operation.operation_name);
      end loop;
   end loop;   
   
   // report all users
   all_users := find_all User();
   for a_user in all_users'elements loop
      Operator~>report_user(a_user.user_id, a_user.login_name, a_user.user_name, a_user.is_logged_on);
      
      // report all sessions
      the_sessions := a_user -> R3.Session;
      for a_session in the_sessions'elements loop
         
         Operator~>report_user_session(a_session.session_id, a_user.user_id, a_session.logon_time,
                                       a_session.has_timed_out, (a_session -> R3.Workstation).workstation_hostname, 
                                       a_user.login_name);
         
         // report all user groups
         the_groups := a_session -> R2.Group;
         for a_group in the_groups'elements loop
            Operator~>report_user_operation(a_user.user_id, a_group.group_name, a_user.login_name, a_session.session_id);
         end loop;
      
         // report all user operations
         the_operations := a_session -> R2.Group -> R1.Operation;
         for an_operation in the_operations'elements loop
            Operator~>report_user_operation(a_user.user_id, an_operation.operation_name, a_user.login_name, a_session.session_id);
         end loop;
         
      end loop;
   
   end loop;
   
end service;

private service SAC::populate_domain_1 () is
begin
   
   SAC::populate_domain(false);
   
end service;

private service SAC::soa_subscribe_2 () is
soa_messages : sequence of string;
empty_soa_messages : sequence of string;

begin

  SOA::subscribe("SAC_user_logon");
  SOA::subscribe("SAC_user_logoff");
  SOA::subscribe("SAC_add_group");
  SOA::subscribe("SAC_add_operation_to_group");
  SOA::subscribe("SAC_session_active");
  SOA::subscribe("SAC_delete_group");
  SOA::subscribe("SAC_delete_group_operation");
  SOA::subscribe("SAC_populate_domain");
  soa_messages := empty_soa_messages & "I_DCP_resend_infos";
  SOA::subscribe("SAC_resend_infos", soa_messages);

end service;

private service SAC::resend_infos_3 () is
begin
   
   SAC::resend_infos();
   
end service;

private service SAC::test_SAC_1 () is
the_groups : sequence of string;
empty_groups : sequence of string;
the_session : instance of Session;

begin
   
   // check that the groups and operations have been added
   Test::check_equal ( "test_SAC_1.ext", 16, ((find _TEST_Operator_report_group())'length), 4 );
   Test::check_equal ( "test_SAC_1.ext", 17, ((find _TEST_Operator_report_group_operation())'length), 8 );
   
   // login user 1 on workstation 1 with group 1
   the_groups := empty_groups & "group1";
   SAC::user_logon(1, "user1", "User One", "Workstation1", the_groups);
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 23, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 24, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = logged_on))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 26, find _TEST_Operator_report_user_operation(), 2 ) then
      Test::check_equal ( "test_SAC_1.ext", 27, ((find _TEST_Operator_report_user_operation(
                                                          (user_id = 1 and operation_name = "operation1") or 
                                                           (user_id = 1 and operation_name = "operation2")))'length), 2 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 31, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 32, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation1" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_operation();
   delete find _TEST_Operator_report_user_session();
      
   // login user 1 on workstation 2 with group 1 + 2
   the_groups := empty_groups & "group1" & "group2";
   SAC::user_logon(1, "user1", "User One", "Workstation2", the_groups);
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 44, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 45, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = logged_on))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 47, find _TEST_Operator_report_user_operation(), 4 ) then
      Test::check_equal ( "test_SAC_1.ext", 48, ((find _TEST_Operator_report_user_operation(
                                                          (user_id = 1 and operation_name = "operation1") or 
                                                           (user_id = 1 and operation_name = "operation2") or
                                                           (user_id = 1 and operation_name = "operation3") or
                                                           (user_id = 1 and operation_name = "operation4")))'length), 4 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 54, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 55, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation2" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_operation();
   delete find _TEST_Operator_report_user_session();
   
   // login user 2 on workstation 3 with group 3
   the_groups := empty_groups & "group3";
   SAC::user_logon(2, "user2", "User Two", "Workstation3", the_groups);
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 67, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 68, ((find _TEST_Operator_report_user(user_id = 2 and logged_on = logged_on))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 70, find _TEST_Operator_report_user_operation(), 2 ) then
      Test::check_equal ( "test_SAC_1.ext", 71, ((find _TEST_Operator_report_user_operation(
                                                          (user_id = 2 and operation_name = "operation1") or 
                                                           (user_id = 2 and operation_name = "operation3")))'length), 2 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 75, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 76, ((find _TEST_Operator_report_user_session(user_id = 2 and 
                                                                                    workstation_hostname = "Workstation3" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_operation();
   delete find _TEST_Operator_report_user_session();
   
   // login user 2 on workstation 4 with group 3 + 4
   the_groups := empty_groups & "group3" & "group4";
   SAC::user_logon(2, "user2", "User Two", "Workstation4", the_groups);
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 88, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 89, ((find _TEST_Operator_report_user(user_id = 2 and logged_on = logged_on))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 91, find _TEST_Operator_report_user_operation(), 4 ) then
      Test::check_equal ( "test_SAC_1.ext", 92, ((find _TEST_Operator_report_user_operation(
                                                          (user_id = 2 and operation_name = "operation1") or 
                                                           (user_id = 2 and operation_name = "operation2") or
                                                           (user_id = 2 and operation_name = "operation3") or
                                                           (user_id = 2 and operation_name = "operation4")))'length), 4 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 98, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 99, ((find _TEST_Operator_report_user_session(user_id = 2 and 
                                                                                    workstation_hostname = "Workstation4" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_operation();
   delete find _TEST_Operator_report_user_session();
   
   // fail the heartbeat 4 times on workstation 1 and get the session to become timed out
   the_session:= find_one Session(user_id = 1 and workstation_id = 0);
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 117, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 118, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation1" and
                                                                                    session_timed_out = true))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user_session();
   
   // fail the heartbeat 4 times on workstation 2 and get the session to become 
   // timed out and the user marked as suspect
   the_session:= find_one Session(user_id = 1 and workstation_id = 1);
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   generate Session.heartbeat_timeout_expired() to the_session;
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 135, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 136, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation2" and
                                                                                    session_timed_out = true))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 140, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 141, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = suspect))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_session();
   
   // start the heartbeat for workstation 1 and check that the session 
   // is no longer timed out and the user becomes logged on
   SAC::session_active(0, 1, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 150, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 151, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation1" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 155, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 156, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = logged_on))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_session();
   
   // login user 3 on workstation 3 with group 4 check user 2 is logged off the workstation and that 2 
   // operations added for the new user 
   the_groups := empty_groups & "group3";
   SAC::user_logon(3, "user3", "User Three", "Workstation3", the_groups);
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 166, find _TEST_Operator_user_session_deleted(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 167, ((find _TEST_Operator_user_session_deleted(session_id = 2))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 169, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 170, ((find _TEST_Operator_report_user(user_id = 3 and logged_on = logged_on))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 172, find _TEST_Operator_report_user_operation(), 2 ) then
      Test::check_equal ( "test_SAC_1.ext", 173, ((find _TEST_Operator_report_user_operation(
                                                          (user_id = 3 and operation_name = "operation1") or 
                                                           (user_id = 3 and operation_name = "operation3")))'length), 2 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 177, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 178, ((find _TEST_Operator_report_user_session(user_id = 3 and 
                                                                                    workstation_hostname = "Workstation3" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   delete find _TEST_Operator_user_session_deleted();
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_operation();
   delete find _TEST_Operator_report_user_session();
   delete find _TEST_Operator_user_operation_removed();
   
   // log off workstation 4 user 2
   SAC::user_logoff(3, 2, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 191, find _TEST_Operator_user_session_deleted(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 192, ((find _TEST_Operator_user_session_deleted(session_id = 3))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 194, find _TEST_Operator_user_operation_removed(), 4 ) then
      Test::check_equal ( "test_SAC_1.ext", 195, ((find _TEST_Operator_user_operation_removed(
                                                          (user_id = 2 and operation_name = "operation1") or 
                                                          (user_id = 2 and operation_name = "operation2") or 
                                                          (user_id = 2 and operation_name = "operation3") or 
                                                           (user_id = 2 and operation_name = "operation4")))'length), 4 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 201, find _TEST_Operator_user_removed(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 202, ((find _TEST_Operator_user_removed(user_id = 2))'length), 1 );
   end if;
   delete find _TEST_Operator_user_session_deleted();
   delete find _TEST_Operator_user_operation_removed();
   delete find _TEST_Operator_user_removed();
   
   // log off workstation 3 user 3
   SAC::user_logoff(4, 3, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 211, find _TEST_Operator_user_session_deleted(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 212, ((find _TEST_Operator_user_session_deleted(session_id = 4))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 214, find _TEST_Operator_user_operation_removed(), 2 ) then
      Test::check_equal ( "test_SAC_1.ext", 215, ((find _TEST_Operator_user_operation_removed(
                                                          (user_id = 3 and operation_name = "operation1") or 
                                                           (user_id = 3 and operation_name = "operation3")))'length), 2 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 219, find _TEST_Operator_user_removed(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 220, ((find _TEST_Operator_user_removed(user_id = 3))'length), 1 );
   end if;
   delete find _TEST_Operator_user_session_deleted();
   delete find _TEST_Operator_user_operation_removed();
   delete find _TEST_Operator_user_removed();
   
   // log off workstation 1 user 1 check that the user becomes suspect
   SAC::user_logoff(0, 1, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 229, find _TEST_Operator_user_session_deleted(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 230, ((find _TEST_Operator_user_session_deleted(session_id = 0))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 232, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 233, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = suspect))'length), 1 );
   end if;
   delete find _TEST_Operator_user_session_deleted();
   delete find _TEST_Operator_report_user();
   
   // start the heartbeat for workstation 2 and check that the session 
   // is no longer timed out and the user becomes logged on
   SAC::session_active(1, 1, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 242, find _TEST_Operator_report_user_session(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 243, ((find _TEST_Operator_report_user_session(user_id = 1 and 
                                                                                    workstation_hostname = "Workstation2" and
                                                                                    session_timed_out = false))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 247, find _TEST_Operator_report_user(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 248, ((find _TEST_Operator_report_user(user_id = 1 and logged_on = logged_on))'length), 1 );
   end if;
   delete find _TEST_Operator_report_user();
   delete find _TEST_Operator_report_user_session();
   
   // log off workstation 2 user 1 
   SAC::user_logoff(1, 1, "");
   Test::service_event_queue();
   if Test::check_size ( "test_SAC_1.ext", 256, find _TEST_Operator_user_session_deleted(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 257, ((find _TEST_Operator_user_session_deleted(session_id = 1))'length), 1 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 259, find _TEST_Operator_user_operation_removed(), 4 ) then
      Test::check_equal ( "test_SAC_1.ext", 260, ((find _TEST_Operator_user_operation_removed(
                                                          (user_id = 1 and operation_name = "operation1") or 
                                                          (user_id = 1 and operation_name = "operation2") or 
                                                          (user_id = 1 and operation_name = "operation3") or 
                                                          (user_id = 1 and operation_name = "operation4")))'length), 4 );
   end if;
   if Test::check_size ( "test_SAC_1.ext", 266, find _TEST_Operator_user_removed(), 1 ) then
      Test::check_equal ( "test_SAC_1.ext", 267, ((find _TEST_Operator_user_removed(user_id = 1))'length), 1 );
   end if;
   delete find _TEST_Operator_user_session_deleted();
   delete find _TEST_Operator_report_user();
   
   Test::print_results();
   Process::requestShutdown();
   
end service;

