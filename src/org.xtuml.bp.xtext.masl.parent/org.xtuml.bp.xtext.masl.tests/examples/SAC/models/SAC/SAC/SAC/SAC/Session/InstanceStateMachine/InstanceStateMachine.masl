state SAC::Session.Created () is
begin
  null;
end state;

state SAC::Session.Session_Established () is
the_session_spec : instance of Session_Specification;
the_user : instance of User;

begin
   
   // report the session details and setup the heartbeat timer
   this.session_heartbeat_failure := 0;
   the_user := this -> R3.User;
   if the_user.is_logged_on = suspect then
      the_user.is_logged_on := logged_on;
      Operator~>report_user(the_user.user_id, the_user.login_name, the_user.user_name, the_user.is_logged_on);
   end if;
   if this.has_timed_out = true then
      this.has_timed_out := false;
      Operator~>report_user_session(this.session_id, this.user_id, this.logon_time,
                                     this.has_timed_out, (this -> R3.Workstation).workstation_hostname, the_user.login_name);
   end if;
   the_session_spec := find_one Session_Specification();
   schedule this.session_heartbeat_timer generate Session.heartbeat_timeout_expired() to this 
                        delay the_session_spec.session_heartbeat_time;

end state;

state SAC::Session.Session_Heartbeat_Failed () is
the_session_spec : instance of Session_Specification;

begin
   
   // increment the failure count and check if we have exceeded the threshold
   the_session_spec := find_one Session_Specification();
   this.session_heartbeat_failure := this.session_heartbeat_failure + 1;
   if this.session_heartbeat_failure > the_session_spec.session_heartbeat_failure_threshold then
      generate Session.session_timeout_reached() to this;
   else
      // reset the timer
      schedule this.session_heartbeat_timer generate Session.heartbeat_timeout_expired() to this 
                        delay the_session_spec.session_heartbeat_time;
   end if;
   
   
end state;

state SAC::Session.Session_Timed_Out () is
the_user : instance of User;

begin
   
   // report that the session has timed out
   cancel this.session_heartbeat_timer;
   this.has_timed_out := true;
   Operator~>report_user_session(this.session_id, this.user_id, this.logon_time,
                                  this.has_timed_out, (this -> R3.Workstation).workstation_hostname, this.login_name);
   
   // check if all the users session are timedout and 
   // if they are mark the user logon as suspect
   the_user := this -> R3.User;
   if (find_one (the_user -> R3.Session)(has_timed_out = false)) = null then
      // report the user login as suspect
      the_user.is_logged_on := suspect;
      Operator~>report_user(the_user.user_id, the_user.login_name, 
                            the_user.user_name, the_user.is_logged_on);
   end if;
   
end state;

