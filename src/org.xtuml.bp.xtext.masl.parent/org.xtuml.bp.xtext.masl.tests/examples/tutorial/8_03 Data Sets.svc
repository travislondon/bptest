service tutorial::data_sets() is
  i    : integer := 0;
  r    : real    := 0.0;
  t    : string  :="";
  d1   : record_structure_type;
  s1   : sequence of record_structure_type;
  fs   : sequence of Server::fixed_size_structure_type;
  date : Calendar::Date;
  time : Calendar::Time_of_Day;
begin
  //create a sequence of structures
  for x in 1..3 loop
    d1.int_field  := x;
    d1.real_field := real(x*1.1);
    d1.text_field := x'image;
    s1 := s1 & d1;
  end loop;
  for x in s1'elements loop
    i := i + x.int_field;
    t := t & x.text_field;
  end loop;
  if (i /= 6 or t /="123") then
    raise Standard::constraint_error;
  end if;

  //normal order
  s1 := s1 ordered_by(int_field);
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="123") then
    raise Standard::constraint_error;
  end if;

  //reverse order
  s1 := s1 reverse_ordered_by(int_field);
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="321") then
    raise Standard::constraint_error;
  end if;

  //slice
  d1 := s1[s1'last-1];
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="321") then
    raise Standard::constraint_error;
  end if;
  if (d1.text_field /= "2") then
    raise Standard::constraint_error;
  end if;

  s1[s1'last-1].text_field := "two";
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="3two1") then
    raise Standard::constraint_error;
  end if;

  //normal order
  s1 := s1 ordered_by(int_field);
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="1two3") then
    raise Standard::constraint_error;
  end if;

  //reverse order
  s1 := s1 reverse_ordered_by(text_field);
  t := "";
  for x in s1'elements loop
    t:=t & x.text_field;
  end loop;
  if (t /="two31") then
    raise Standard::constraint_error;
  end if;

  //multiple order
  s1 :=      (3,1.2,"bla",date,time,blue);
  s1 := s1 & (1,1.0,"bla",date,time,blue);
  s1 := s1 & (4,1.0,"bla",date,time,blue);
  s1 := s1 & (2,1.0,"bbla",date,time,blue);
  s1 := s1 & (2,1.0,"bla",date,time,blue);
  s1 := s1 & (3,1.0,"bla",date,time,blue);
  s1 := s1 ordered_by(int_field,real_field,text_field);
  //for x in s1'elements loop
  //  Text_IO::put_line(x'image);
  //end loop;
  if (s1[s1'first+1].text_field /= "bbla") then
    raise Standard::constraint_error;
  end if;

  //structure comparisons, removed from language
  //d1 := s1[s1'first];
  //if (d1 /= s1[s1'first]) then
  //  raise Standard::constraint_error;
  //end if;
  //d1.int_field := s1[s1'first].int_field & 2;
  //if (d1 = s1[s1'first]) then
  //  raise Standard::constraint_error;
  //end if;

  //double nested normal order, testing cgen here
  for x in s1'elements loop
    s1 := s1 ordered_by(text_field);
  end loop;
  s1 := s1 ordered_by(text_field);

  //other domain structure ordering, testing cgen here
  fs := fs ordered_by(i);
end service;