<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>Data Type Package</title>
	<meta name="generator" content="LibreOffice 5.1.4.2 (Linux)"/>
	<meta name="created" content="00:00:00"/>
	<meta name="changed" content="2016-07-21T16:04:17.334956040"/>
	<meta name="created" content="00:00:00">
	<meta name="changed" content="2016-07-21T16:00:42.835453099">
	<style type="text/css">
		p { margin-left: 0.1in; margin-right: 0.1in; margin-top: 0.1in; margin-bottom: 0.1in; font-family: "Times New Roman", serif; font-size: 10pt }
		h2 { color: #000080; font-family: "Arial", sans-serif; font-size: 12pt; line-height: 0.22in }
		h3 { margin-bottom: 0.03in; color: #000080; font-family: "Arial", sans-serif; font-size: 11pt }
		h4 { margin-left: 0.1in; margin-right: 0.1in; margin-top: 0.1in; margin-bottom: 0.03in; color: #0176b9; font-family: "Arial", sans-serif; font-size: 11pt }
		a:visited { color: #0176b9 }
	</style>
</head>
<body lang="en-US" vlink="#0176b9" bgcolor="#ffffff" dir="ltr">
<h2>Data Types</h2>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Data
types fall into the following categories:</font></p>
<p style="margin-left: 0.6in"><font face="Symbol">·</font><span style="font-variant: normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><font face="Arial, sans-serif">Primitive types </font>
</p>
<p style="margin-left: 0.6in"><font face="Symbol">·</font><span style="font-variant: normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><font face="Arial, sans-serif">User data types</font></p>
<p style="margin-left: 0.6in"><font face="Symbol">·</font><span style="font-variant: normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><font face="Arial, sans-serif">Structured data types</font></p>
<p style="margin-left: 0.6in"><font face="Symbol">·</font><span style="font-variant: normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><font face="Arial, sans-serif">Enumerations</font></p>
<p style="margin-left: 0.6in"><font face="Symbol">·</font><span style="font-variant: normal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><font face="Arial, sans-serif">Constant specifications</font></p>
<h3>Primitive types</h3>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Primitive
types are built-in and provided by BridgePoint.&nbsp; You cannot add
to, or remove from the set of primitive types.&nbsp; The primitive
types are:</font></p>
<h4>void</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing emptiness or nothingness.</font></p>
<h4>boolean</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">An
enumeration whose only allowable values are </font><font size="2" style="font-size: 11pt">true</font>
<font face="Arial, sans-serif">and </font><font size="2" style="font-size: 11pt">false</font><font face="Arial, sans-serif">.
This type is a core data type that supports the following operators:
</font><font size="2" style="font-size: 11pt">and</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">or</font><font face="Arial, sans-serif">,
and </font><font size="2" style="font-size: 11pt">not</font><font face="Arial, sans-serif">.</font></p>
<h4>integer</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type whose literal values represent whole numbers,
i.e., 1, 2, 3, and so on. The integer</font> <font face="Arial, sans-serif">type
supports the following arithmetic operations: +, -, *, /, %, unary
operations: +, -, and comparison operations: </font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;=</font><font face="Arial, sans-serif">.</font></p>
<h4>real</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type whose literal values represent real numbers,
i.e., those that can contain a fractional part as in: 1.0, 2.4,
3.14159, and so on. The real</font> <font face="Arial, sans-serif">type
supports the following arithmetic operations: </font><font size="2" style="font-size: 11pt">+</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">-</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">*</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">/</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">%</font><font face="Arial, sans-serif">,
unary operations: </font><font size="2" style="font-size: 11pt">+</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">-</font><font face="Arial, sans-serif">,
and comparison operations: </font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;=</font><font face="Arial, sans-serif">.</font></p>
<h4>string</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type used to define a sequence of characters. A
literal string is always enclosed in a set of double quotes, for
example </font>“<font face="Arial, sans-serif">abcdefg”. String
types support concatenation (</font><font size="2" style="font-size: 11pt">+</font>
<font face="Arial, sans-serif">operator) and the following lexical
comparisons: </font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;=</font><font face="Arial, sans-serif">.</font></p>
<h4>unique_id</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type that provides an arbitrary value generated by the
system and guaranteed to be unique across all instances of the same
class. Modelers should use an arbitrary identifier (aka unique_id)
when using natural identifying attributes is either not possible or
cumbersome. Only equality (</font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">)
and inequality (</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">)
operators are supported.</font></p>
<h4>state&lt;State_Model&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type used internally by xtUML to keep track of the
current state of classes with state diagrams.&nbsp; Variables of this
type cannot be manipulated or assigned by the user.</font></p>
<h4>same_as&lt;Base_Attribute&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type used internally by xtUML to make sure association
referential attributes use the same type on both sides of the
association.&nbsp; Variables of this type cannot be manipulated or
assigned by the user.</font></p>
<h4>inst_ref&lt;Object&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a reference to a modeled class.
Variables created via a “</font><font size="2" style="font-size: 11pt">create
object instance</font>”<font face="Arial, sans-serif">, ”</font><font size="2" style="font-size: 11pt">select
one</font>“ <font face="Arial, sans-serif">or “</font><font size="2" style="font-size: 11pt">select
any</font>” <font face="Arial, sans-serif">statement are of this
type.&nbsp; Class attributes</font> <font face="Arial, sans-serif">are
accessed via the “</font><font size="2" style="font-size: 11pt">.</font>”
<font face="Arial, sans-serif">operator.</font></p>
<h4>inst_ref_set&lt;Object&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a collection of references to a
modeled class. Variables created via a ”</font><font size="2" style="font-size: 11pt">select
many</font>” <font face="Arial, sans-serif">statement are of this
type.&nbsp; Each element in the collection is of type
</font><font size="2" style="font-size: 11pt">inst_ref&lt;Object&gt;</font><font face="Arial, sans-serif">.</font></p>
<h4>inst&lt;Event&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a reference to a modeled event.
Variables created via a “</font><font size="2" style="font-size: 11pt">create
event instance</font>” <font face="Arial, sans-serif">statement are
of this type.</font></p>
<h4>inst&lt;Mapping&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type from which a user-defined type can be derived, an
instance mapping is used when an xtUML model requires access to a
data structure in another xtUML model or legacy code. Although there
are no hard and set rules for when to use an instance mapping over an
instance reference mapping, the decision usually revolves around the
operations supported. </font>
</p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Instance
mappings are commonly used when manipulating the data structure as a
whole.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">All
comparison operations are available for instance mappings in OAL: </font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&lt;=</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">&gt;=</font><font face="Arial, sans-serif">.&nbsp;
However, due to their implementation-specific nature, Verifier cannot
use variables of this type in a meaningful way.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">The
implementation of mappings and the markings used to realize them are
provided by the BridgePoint Compiler.&nbsp; See the documentation for
the marking </font><font size="2" style="font-size: 11pt">MapDataTypeAsPointer</font>
<font face="Arial, sans-serif">in </font><font size="2" style="font-size: 11pt">&lt;project&gt;/gen/datatype.mark</font>
<font face="Arial, sans-serif">for additional information.</font></p>
<h4>inst_ref&lt;Mapping&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type from which a user-defined type is derived, an
instance reference mapping is used when an xtUML model requires
access to a data structure in another xtUML model or legacy code.
Although there are no hard and set rules for when to use an instance
reference mapping over an instance mapping, the decision usually
revolves around the operations supported. </font>
</p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Instance
reference mappings are commonly used when manipulating the data
structure by reference.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">The
equality and inequality operators are available for instance
reference mappings in OAL: </font><font size="2" style="font-size: 11pt">==</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">!=</font><font face="Arial, sans-serif">.&nbsp;
However, due to their implementation-specific nature, Verifier cannot
use variables of this type in a meaningful way.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">The
implementation of mappings and the markings used to realize them are
provided by the BridgePoint Compiler.&nbsp; See the documentation for
the marking </font><font size="2" style="font-size: 11pt">MapDataTypeAsPointer</font>
<font face="Arial, sans-serif">in </font><font size="2" style="font-size: 11pt">&lt;project&gt;/gen/datatype.mark</font>
<font face="Arial, sans-serif">for additional information.</font></p>
<h4>component_ref</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a reference to a modeled component.
The </font><font size="2" style="font-size: 11pt">sender</font>
<font face="Arial, sans-serif">keyword in OAL is always of this
type.&nbsp; This type may be used the same place other primitive data
types are used.&nbsp; It is also valid in OAL as the target in a
“</font><font size="2" style="font-size: 11pt">send … to
&lt;component_ref&gt;</font>” <font face="Arial, sans-serif">command
when performing inter-component messaging.&nbsp; Class attributes,
parameters, return values, and transients may all use this type.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of this type support equality and inequality operations in Verifier:
==, !=</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of this type are not yet supported in MC-3020.</font></p>
<h4>date</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing an xtUML date. Variables created via
a “</font><font size="2" style="font-size: 11pt">TIM::create_date</font>”
<font face="Arial, sans-serif">or “</font><font size="2" style="font-size: 11pt">TIM::current_date</font>”
<font face="Arial, sans-serif">statement are of this type. </font><font size="2" style="font-size: 11pt">date</font><font face="Arial, sans-serif">s
may be stored in class attributes, passed as parameters and return
values, and manipulated via </font><font size="2" style="font-size: 11pt">TIM</font>
<font face="Arial, sans-serif">bridge operations.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of this type support equality, inequality, comparison, and assignment
operations: ==, !=, &gt;, &lt;, &gt;=, &lt;=, =</font></p>
<h4>inst_ref&lt;Timer&gt;</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a reference to a xtUML timer.
Variables created via a “</font><font size="2" style="font-size: 11pt">TIM::timer_start</font>”
<font face="Arial, sans-serif">or “</font><font size="2" style="font-size: 11pt">TIM::timer_start_recurring</font>”
<font face="Arial, sans-serif">statement are of this type. Timer
references may be stored in class attributes, passed as parameters
and return values, and manipulated via </font><font size="2" style="font-size: 11pt">TIM</font>
<font face="Arial, sans-serif">bridge operations.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of this type support equality, inequality, and assignment operations:
==, !=, =</font></p>
<h4>timestamp</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type representing a specific xtUML time. Variables
created via a “</font><font size="2" style="font-size: 11pt">TIM::current_clock</font>”
<font face="Arial, sans-serif">statement are of this type. </font><font size="2" style="font-size: 11pt">timestamp</font><font face="Arial, sans-serif">s
may be stored in class attributes, passed as parameters and return
values.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of this type support equality, inequality, comparison, and assignment
operations: ==, !=, &gt;, &lt;, &gt;=, &lt;=, =</font></p>
<h4>MASLtype</h4>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
primitive data type created in converted MASL models. This serves as
the base type for MASL types and collections that do not directly map
to an xtUML core type (e.g. integer).  MASLtype is a UDT whose core
type is string.</font></p>
<h3>User data types</h3>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A type
based on one of the primitive data types. User data types (UDTs) may
be based on the following primitive types: </font><font size="2" style="font-size: 11pt">boolean</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">integer</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">real</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">string</font><font face="Arial, sans-serif">,
</font><font size="2" style="font-size: 11pt">unique</font><font face="Arial, sans-serif">_id,
</font><font size="2" style="font-size: 11pt">inst&lt;Mapping&gt;,</font>
<font face="Arial, sans-serif">and </font><font size="2" style="font-size: 11pt">inst_ref&lt;Mapping&gt;.</font>&nbsp;
<font face="Arial, sans-serif">User data types inherit all operators
from the primitive type and are completely compatible and
interchangeable with their primitive type.&nbsp; UDTs allow the
modeler to give a more meaningful type name to a core type.&nbsp; In
some programming languages, this feature is known as a “typedef”.
</font>
</p>
<h3>Structured data types</h3>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A
structured data type (SDT) is a collection of structure members of
various types. Structure members are accessed via the “</font><font size="2" style="font-size: 11pt">.</font>”
<font face="Arial, sans-serif">operator.&nbsp; SDTs may be used as
return values, parameters, or class attributes. Automatic (transient)
variables become SDTs when initialized to a return value or variable
whose type is an SDT.&nbsp; Only the assignment operation is valid on
the SDT itself.&nbsp; The individual structure members may be
operated on according to the valid operations for their respective
types.</font></p>
<h3>Enumerations</h3>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">A data
type that can take on one of a list of uniquely named values
(enumerators) at any one time.&nbsp; Variables of the enumeration
type may only be assigned one of the corresponding enumerators as a
value.&nbsp; Enumerators are accessed in OAL using </font><font size="2" style="font-size: 11pt">&lt;enumeration
name&gt;::&lt;enumerator name&gt;</font> <font face="Arial, sans-serif">with
full scoping to avoid name conflicts with transients, constants,
class attributes, etc.</font></p>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Variables
of an enumeration type support equality, inequality, and assignment
operations: ==, !=, =</font></p>
<h3>Constant specifications</h3>
<p style="line-height: 0.22in"><font face="Arial, sans-serif">Constant
specifications are groupings of related constants.&nbsp; Constant
specifications may be named or unnamed.&nbsp; The name, if any
exists, has no semantic use or meaning in OAL.&nbsp; Constant
specifications are composed of zero to many Constants.&nbsp; A
constant has a name, type, and value.&nbsp; The type is restricted to
</font><font size="2" style="font-size: 11pt">integer, real, boolean,
</font><font face="Arial, sans-serif">or</font> <font size="2" style="font-size: 11pt">string</font><font face="Arial, sans-serif">.&nbsp;
The value is restricted to meaningful data based on the chosen type.&nbsp;
Integer constant values may be specified in either decimal,
hexadecimal (beginning with </font><font size="2" style="font-size: 11pt">0x</font><font face="Arial, sans-serif">),
or binary (beginning with </font><font size="2" style="font-size: 11pt">0b</font><font face="Arial, sans-serif">).</font></p>
<p style="margin-left: 0in; margin-right: 0in; line-height: 0.22in">&nbsp;</p>
</body>
</html>