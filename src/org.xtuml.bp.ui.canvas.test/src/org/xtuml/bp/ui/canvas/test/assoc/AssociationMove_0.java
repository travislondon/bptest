//=====================================================================
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.15
// Matrix:       association_move.txt
//
//=====================================================================

package org.xtuml.bp.ui.canvas.test.assoc;

import org.eclipse.ui.IEditorPart;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.NonRootModelElement;
import org.xtuml.bp.test.common.*;
import org.xtuml.bp.ui.canvas.*;
import org.xtuml.bp.ui.graphics.editor.*;
import org.xtuml.bp.ui.canvas.test.*;

public class AssociationMove_0 extends AssociationMove {

    protected String getResultName() {
        return super.getResultName();
    }

    public AssociationMove_0() {
        super("AssociationMove_0", null);
    }

    @Before
    public void setUp() throws Exception {
        super.setUp();
    }

    @After
    public void tearDown() throws Exception {
        super.tearDown();
    }


    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B1C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E1F1C3", "1");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA1B1C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E1F2C3", "2");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E2F1C1", "3");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E2F1C2", "4");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E2F2C1", "5");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E2", "D1E2F2C2", "6");

        NonRootModelElement src = selectABCE("A1B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B1C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E1F1C3", "7");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA1B1C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E1F2C3", "8");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E2F1C1", "9");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E2F1C2", "10");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E2F2C1", "11");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E2", "D1E2F2C2", "12");

        NonRootModelElement src = selectABCE("A1B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B2C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E1F1C3", "13");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA1B2C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E1F2C3", "14");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E2F1C1", "15");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E2F1C2", "16");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E2F2C1", "17");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E2", "D1E2F2C2", "18");

        NonRootModelElement src = selectABCE("A1B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA1B2C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E1F1C3", "19");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA1B2C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E1F2C3", "20");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E2F1C1", "21");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E2F1C2", "22");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E2F2C1", "23");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E2", "D1E2F2C2", "24");

        NonRootModelElement src = selectABCE("A1B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA2B1C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E1F1C3", "25");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA2B1C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E1F2C3", "26");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E2F1C1", "27");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E2F1C2", "28");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E2F2C1", "29");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E2", "D1E2F2C2", "30");

        NonRootModelElement src = selectABCE("A2B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA2B1C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E1F1C3", "31");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA2B1C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E1F2C3", "32");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E2F1C1", "33");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E2F1C2", "34");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E2F2C1", "35");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E2", "D1E2F2C2", "36");

        NonRootModelElement src = selectABCE("A2B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B1C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E1F1C3", "37");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA3B1C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E1F2C3", "38");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E2F1C1", "39");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E2F1C2", "40");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E2F2C1", "41");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D1E2F2C2", "42");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA3B1C1E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D2E2F1C3", "43");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA3B1C1E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E2", "D2E2F2C3", "44");

        NonRootModelElement src = selectABCE("A3B1C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B1C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E1F1C3", "45");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA3B1C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E1F2C3", "46");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E2F1C1", "47");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E2F1C2", "48");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E2F2C1", "49");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D1E2F2C2", "50");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA3B1C2E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D2E2F1C3", "51");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA3B1C2E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E2", "D2E2F2C3", "52");

        NonRootModelElement src = selectABCE("A3B1C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B2C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E1F1C3", "53");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA3B2C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E1F2C3", "54");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E2F1C1", "55");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E2F1C2", "56");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E2F2C1", "57");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D1E2F2C2", "58");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA3B2C1E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D2E2F1C3", "59");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA3B2C1E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E2", "D2E2F2C3", "60");

        NonRootModelElement src = selectABCE("A3B2C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA3B2C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E1F1C3", "61");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA3B2C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E1F2C3", "62");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E2F1C1", "63");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E2F1C2", "64");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E2F2C1", "65");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D1E2F2C2", "66");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA3B2C2E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D2E2F1C3", "67");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA3B2C2E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E2", "D2E2F2C3", "68");

        NonRootModelElement src = selectABCE("A3B2C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B1C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E1F1C3", "69");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA4B1C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E1F2C3", "70");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E2F1C1", "71");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E2F1C2", "72");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E2F2C1", "73");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D1E2F2C2", "74");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA4B1C1E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D2E2F1C3", "75");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA4B1C1E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E2", "D2E2F2C3", "76");

        NonRootModelElement src = selectABCE("A4B1C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B1C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E1F1C3", "77");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA4B1C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E1F2C3", "78");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E2F1C1", "79");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E2F1C2", "80");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E2F2C1", "81");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D1E2F2C2", "82");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA4B1C2E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D2E2F1C3", "83");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA4B1C2E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E2", "D2E2F2C3", "84");

        NonRootModelElement src = selectABCE("A4B1C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B2C1E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E1F1C3", "85");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA4B2C1E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E1F2C3", "86");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E2F1C1", "87");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E2F1C2", "88");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E2F2C1", "89");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D1E2F2C2", "90");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA4B2C1E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D2E2F1C3", "91");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA4B2C1E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E2", "D2E2F2C3", "92");

        NonRootModelElement src = selectABCE("A4B2C1E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E1F1C3).
     * 
     */
    @Test
    public void testA4B2C2E2_D1E1F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E1F1C3", "93");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E1F2C3).
     * 
     */
    /*
    @Test
    public void testA4B2C2E2_D1E1F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E1F2C3", "94");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E1F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }
    */

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E2F1C1", "95");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E2F1C2", "96");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E2F2C1", "97");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D1E2F2C2", "98");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D2E2F1C3).
     * 
     */
    @Test
    public void testA4B2C2E2_D2E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D2E2F1C3", "99");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E2) and row (D2E2F2C3).
     * 
     */
    @Test
    public void testA4B2C2E2_D2E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E2", "D2E2F2C3", "100");

        NonRootModelElement src = selectABCE("A4B2C2E2");

        NonRootModelElement dest = selectDEFC("D2E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D1E2F1C1", "101");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D1E2F1C2", "102");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D1E2F2C1", "103");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D1E2F2C2", "104");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D3E2F1C3).
     * 
     */
    @Test
    public void testA5B1C1E2_D3E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D3E2F1C3", "105");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D3E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D3E2F2C3).
     * 
     */
    @Test
    public void testA5B1C1E2_D3E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D3E2F2C3", "106");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D3E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D4E2F1C3).
     * 
     */
    @Test
    public void testA5B1C1E2_D4E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D4E2F1C3", "107");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D4E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C1E2) and row (D4E2F2C3).
     * 
     */
    @Test
    public void testA5B1C1E2_D4E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C1E2", "D4E2F2C3", "108");

        NonRootModelElement src = selectABCE("A5B1C1E2");

        NonRootModelElement dest = selectDEFC("D4E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D1E2F1C1", "109");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D1E2F1C2", "110");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D1E2F2C1", "111");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D1E2F2C2", "112");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D3E2F1C3).
     * 
     */
    @Test
    public void testA5B1C2E2_D3E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D3E2F1C3", "113");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D3E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D3E2F2C3).
     * 
     */
    @Test
    public void testA5B1C2E2_D3E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D3E2F2C3", "114");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D3E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D4E2F1C3).
     * 
     */
    @Test
    public void testA5B1C2E2_D4E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D4E2F1C3", "115");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D4E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B1C2E2) and row (D4E2F2C3).
     * 
     */
    @Test
    public void testA5B1C2E2_D4E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B1C2E2", "D4E2F2C3", "116");

        NonRootModelElement src = selectABCE("A5B1C2E2");

        NonRootModelElement dest = selectDEFC("D4E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D1E2F1C1", "117");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D1E2F1C2", "118");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D1E2F2C1", "119");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D1E2F2C2", "120");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D3E2F1C3).
     * 
     */
    @Test
    public void testA5B2C1E2_D3E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D3E2F1C3", "121");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D3E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D3E2F2C3).
     * 
     */
    @Test
    public void testA5B2C1E2_D3E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D3E2F2C3", "122");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D3E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D4E2F1C3).
     * 
     */
    @Test
    public void testA5B2C1E2_D4E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D4E2F1C3", "123");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D4E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C1E2) and row (D4E2F2C3).
     * 
     */
    @Test
    public void testA5B2C1E2_D4E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C1E2", "D4E2F2C3", "124");

        NonRootModelElement src = selectABCE("A5B2C1E2");

        NonRootModelElement dest = selectDEFC("D4E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA5B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D1E2F1C1", "125");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA5B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D1E2F1C2", "126");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA5B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D1E2F2C1", "127");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA5B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D1E2F2C2", "128");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D3E2F1C3).
     * 
     */
    @Test
    public void testA5B2C2E2_D3E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D3E2F1C3", "129");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D3E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D3E2F2C3).
     * 
     */
    @Test
    public void testA5B2C2E2_D3E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D3E2F2C3", "130");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D3E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D4E2F1C3).
     * 
     */
    @Test
    public void testA5B2C2E2_D4E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D4E2F1C3", "131");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D4E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A5B2C2E2) and row (D4E2F2C3).
     * 
     */
    @Test
    public void testA5B2C2E2_D4E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A5B2C2E2", "D4E2F2C3", "132");

        NonRootModelElement src = selectABCE("A5B2C2E2");

        NonRootModelElement dest = selectDEFC("D4E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA6B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D1E2F1C1", "133");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA6B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D1E2F1C2", "134");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA6B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D1E2F2C1", "135");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA6B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D1E2F2C2", "136");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA6B1C1E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D6E2F1C3", "137");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C1E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA6B1C1E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A6B1C1E2", "D6E2F2C3", "138");

        NonRootModelElement src = selectABCE("A6B1C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA6B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D1E2F1C1", "139");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA6B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D1E2F1C2", "140");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA6B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D1E2F2C1", "141");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA6B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D1E2F2C2", "142");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA6B1C2E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D6E2F1C3", "143");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B1C2E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA6B1C2E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A6B1C2E2", "D6E2F2C3", "144");

        NonRootModelElement src = selectABCE("A6B1C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA6B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D1E2F1C1", "145");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA6B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D1E2F1C2", "146");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA6B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D1E2F2C1", "147");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA6B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D1E2F2C2", "148");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA6B2C1E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D6E2F1C3", "149");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C1E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA6B2C1E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A6B2C1E2", "D6E2F2C3", "150");

        NonRootModelElement src = selectABCE("A6B2C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA6B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D1E2F1C1", "151");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA6B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D1E2F1C2", "152");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA6B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D1E2F2C1", "153");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA6B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D1E2F2C2", "154");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA6B2C2E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D6E2F1C3", "155");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6B2C2E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA6B2C2E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A6B2C2E2", "D6E2F2C3", "156");

        NonRootModelElement src = selectABCE("A6B2C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA7B1C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D1E2F1C1", "157");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA7B1C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D1E2F1C2", "158");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA7B1C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D1E2F2C1", "159");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA7B1C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D1E2F2C2", "160");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D5E2F1C3).
     * 
     */
    @Test
    public void testA7B1C1E2_D5E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D5E2F1C3", "161");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D5E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D5E2F2C3).
     * 
     */
    @Test
    public void testA7B1C1E2_D5E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D5E2F2C3", "162");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D5E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA7B1C1E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D6E2F1C3", "163");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C1E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA7B1C1E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C1E2", "D6E2F2C3", "164");

        NonRootModelElement src = selectABCE("A7B1C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA7B1C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D1E2F1C1", "165");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA7B1C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D1E2F1C2", "166");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA7B1C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D1E2F2C1", "167");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA7B1C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D1E2F2C2", "168");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D5E2F1C3).
     * 
     */
    @Test
    public void testA7B1C2E2_D5E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D5E2F1C3", "169");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D5E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D5E2F2C3).
     * 
     */
    @Test
    public void testA7B1C2E2_D5E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D5E2F2C3", "170");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D5E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA7B1C2E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D6E2F1C3", "171");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B1C2E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA7B1C2E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B1C2E2", "D6E2F2C3", "172");

        NonRootModelElement src = selectABCE("A7B1C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        assertTrue("The association is unformalized after disallowed move.", checkResult_assocFormal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA7B2C1E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D1E2F1C1", "173");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA7B2C1E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D1E2F1C2", "174");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA7B2C1E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D1E2F2C1", "175");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA7B2C1E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D1E2F2C2", "176");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D5E2F1C3).
     * 
     */
    @Test
    public void testA7B2C1E2_D5E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D5E2F1C3", "177");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D5E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D5E2F2C3).
     * 
     */
    @Test
    public void testA7B2C1E2_D5E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D5E2F2C3", "178");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D5E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA7B2C1E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D6E2F1C3", "179");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C1E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA7B2C1E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C1E2", "D6E2F2C3", "180");

        NonRootModelElement src = selectABCE("A7B2C1E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA7B2C2E2_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D1E2F1C1", "181");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA7B2C2E2_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D1E2F1C2", "182");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA7B2C2E2_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D1E2F2C1", "183");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA7B2C2E2_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D1E2F2C2", "184");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D5E2F1C3).
     * 
     */
    @Test
    public void testA7B2C2E2_D5E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D5E2F1C3", "185");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D5E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D5E2F2C3).
     * 
     */
    @Test
    public void testA7B2C2E2_D5E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D5E2F2C3", "186");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D5E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D6E2F1C3).
     * 
     */
    @Test
    public void testA7B2C2E2_D6E2F1C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D6E2F1C3", "187");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F1C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A7B2C2E2) and row (D6E2F2C3).
     * 
     */
    @Test
    public void testA7B2C2E2_D6E2F2C3() throws Exception {
        setUp();
        test_id = getTestId("A7B2C2E2", "D6E2F2C3", "188");

        NonRootModelElement src = selectABCE("A7B2C2E2");

        NonRootModelElement dest = selectDEFC("D6E2F2C3", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("Disallowed move operation completed.", checkResult_moveDisallowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E1", "D1E2F1C1", "189");

        NonRootModelElement src = selectABCE("A1B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E1", "D1E2F1C2", "190");

        NonRootModelElement src = selectABCE("A1B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E1", "D1E2F2C1", "191");

        NonRootModelElement src = selectABCE("A1B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C1E1", "D1E2F2C2", "192");

        NonRootModelElement src = selectABCE("A1B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B1C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E1", "D1E2F1C1", "193");

        NonRootModelElement src = selectABCE("A1B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B1C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E1", "D1E2F1C2", "194");

        NonRootModelElement src = selectABCE("A1B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B1C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E1", "D1E2F2C1", "195");

        NonRootModelElement src = selectABCE("A1B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B1C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B1C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B1C2E1", "D1E2F2C2", "196");

        NonRootModelElement src = selectABCE("A1B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E1", "D1E2F1C1", "197");

        NonRootModelElement src = selectABCE("A1B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E1", "D1E2F1C2", "198");

        NonRootModelElement src = selectABCE("A1B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E1", "D1E2F2C1", "199");

        NonRootModelElement src = selectABCE("A1B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C1E1", "D1E2F2C2", "200");

        NonRootModelElement src = selectABCE("A1B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA1B2C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E1", "D1E2F1C1", "201");

        NonRootModelElement src = selectABCE("A1B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA1B2C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E1", "D1E2F1C2", "202");

        NonRootModelElement src = selectABCE("A1B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA1B2C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E1", "D1E2F2C1", "203");

        NonRootModelElement src = selectABCE("A1B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1B2C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA1B2C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A1B2C2E1", "D1E2F2C2", "204");

        NonRootModelElement src = selectABCE("A1B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E1", "D1E2F1C1", "205");

        NonRootModelElement src = selectABCE("A2B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E1", "D1E2F1C2", "206");

        NonRootModelElement src = selectABCE("A2B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E1", "D1E2F2C1", "207");

        NonRootModelElement src = selectABCE("A2B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C1E1", "D1E2F2C2", "208");

        NonRootModelElement src = selectABCE("A2B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA2B1C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E1", "D1E2F1C1", "209");

        NonRootModelElement src = selectABCE("A2B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA2B1C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E1", "D1E2F1C2", "210");

        NonRootModelElement src = selectABCE("A2B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA2B1C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E1", "D1E2F2C1", "211");

        NonRootModelElement src = selectABCE("A2B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A2B1C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA2B1C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A2B1C2E1", "D1E2F2C2", "212");

        NonRootModelElement src = selectABCE("A2B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E1", "D1E2F1C1", "213");

        NonRootModelElement src = selectABCE("A3B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E1", "D1E2F1C2", "214");

        NonRootModelElement src = selectABCE("A3B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E1", "D1E2F2C1", "215");

        NonRootModelElement src = selectABCE("A3B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C1E1", "D1E2F2C2", "216");

        NonRootModelElement src = selectABCE("A3B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B1C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E1", "D1E2F1C1", "217");

        NonRootModelElement src = selectABCE("A3B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B1C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E1", "D1E2F1C2", "218");

        NonRootModelElement src = selectABCE("A3B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B1C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E1", "D1E2F2C1", "219");

        NonRootModelElement src = selectABCE("A3B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B1C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B1C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B1C2E1", "D1E2F2C2", "220");

        NonRootModelElement src = selectABCE("A3B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E1", "D1E2F1C1", "221");

        NonRootModelElement src = selectABCE("A3B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E1", "D1E2F1C2", "222");

        NonRootModelElement src = selectABCE("A3B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E1", "D1E2F2C1", "223");

        NonRootModelElement src = selectABCE("A3B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C1E1", "D1E2F2C2", "224");

        NonRootModelElement src = selectABCE("A3B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA3B2C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E1", "D1E2F1C1", "225");

        NonRootModelElement src = selectABCE("A3B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA3B2C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E1", "D1E2F1C2", "226");

        NonRootModelElement src = selectABCE("A3B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA3B2C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E1", "D1E2F2C1", "227");

        NonRootModelElement src = selectABCE("A3B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A3B2C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA3B2C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A3B2C2E1", "D1E2F2C2", "228");

        NonRootModelElement src = selectABCE("A3B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E1", "D1E2F1C1", "229");

        NonRootModelElement src = selectABCE("A4B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E1", "D1E2F1C2", "230");

        NonRootModelElement src = selectABCE("A4B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E1", "D1E2F2C1", "231");

        NonRootModelElement src = selectABCE("A4B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C1E1", "D1E2F2C2", "232");

        NonRootModelElement src = selectABCE("A4B1C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B1C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E1", "D1E2F1C1", "233");

        NonRootModelElement src = selectABCE("A4B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B1C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E1", "D1E2F1C2", "234");

        NonRootModelElement src = selectABCE("A4B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B1C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E1", "D1E2F2C1", "235");

        NonRootModelElement src = selectABCE("A4B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B1C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B1C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B1C2E1", "D1E2F2C2", "236");

        NonRootModelElement src = selectABCE("A4B1C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C1E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E1", "D1E2F1C1", "237");

        NonRootModelElement src = selectABCE("A4B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C1E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E1", "D1E2F1C2", "238");

        NonRootModelElement src = selectABCE("A4B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C1E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E1", "D1E2F2C1", "239");

        NonRootModelElement src = selectABCE("A4B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C1E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C1E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C1E1", "D1E2F2C2", "240");

        NonRootModelElement src = selectABCE("A4B2C1E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E1) and row (D1E2F1C1).
     * 
     */
    @Test
    public void testA4B2C2E1_D1E2F1C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E1", "D1E2F1C1", "241");

        NonRootModelElement src = selectABCE("A4B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E1) and row (D1E2F1C2).
     * 
     */
    @Test
    public void testA4B2C2E1_D1E2F1C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E1", "D1E2F1C2", "242");

        NonRootModelElement src = selectABCE("A4B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F1C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        assertTrue("Rectilinear routing did not work.", checkResult_rectilinearCheck(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E1) and row (D1E2F2C1).
     * 
     */
    @Test
    public void testA4B2C2E1_D1E2F2C1() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E1", "D1E2F2C1", "243");

        NonRootModelElement src = selectABCE("A4B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C1", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

    /**
     * Perform the test for the given matrix column (A4B2C2E1) and row (D1E2F2C2).
     * 
     */
    @Test
    public void testA4B2C2E1_D1E2F2C2() throws Exception {
        setUp();
        test_id = getTestId("A4B2C2E1", "D1E2F2C2", "244");

        NonRootModelElement src = selectABCE("A4B2C2E1");

        NonRootModelElement dest = selectDEFC("D1E2F2C2", src);

        ABCE_DEFC_Action(src, dest);
        assertTrue("The move was not completed correctly.", checkResult_moveComplete(src,dest));
        assertTrue("The association details were not preserved.", checkResult_assocInfoSame(src,dest));
        assertTrue("The association is formalized after move.", checkResult_assocUnformal(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
        tearDown();
    }

}
