.//====================================================================
.//
.// File:      $RCSfile: enums.inc,v $
.// Version:   $Revision: 1.11.34.1 $
.// Modified:  $Date: 2013/07/19 12:26:01 $
.//
.// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
.//
.//====================================================================
.//
.//  The functions in this file generate the classes for enumeration
.//  data types.
.//
.//====================================================================
.//
.function gen_enum_class
  .param string package_name
  .param string class_name
  .param inst_ref enum_dt
  .//
//======================================================================
//
// File: ${class_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.11.34.1 $$
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//======================================================================

package ${package_name};

public class ${class_name} {
    .invoke default = GetEnumElementDefaultValueInfoString()
    public final static int ${default.name} = ${default.value};
    .assign enum_num_integer = 0
    
    .select many enum_set related by enum_dt->S_ENUM[R27]
    .for each enum in enum_set
      .assign en = "$_{enum.Name}"
      .if (en != "")
        .assign enum_num_string = "${enum.Descrip:Value}"
        .if (enum_num_string != "")
	      	.invoke enum_result = STRING_TO_INTEGER( enum_num_string )	      
	      	.assign enum_num_integer = enum_result.result
		    .if (enum_num_integer != 0)
				public final static int ${en} = ${enum_num_integer};
			.else
			  .if (enum_num_string != "0")
				.print "ERROR: Enumerator Value is non-numeric"
			  .else
				public final static int ${en} = 0;
			  .end if
			.end if
	    .else
	      .assign enum_num_integer = enum_num_integer + 1
	   			public final static int ${en} = ${enum_num_integer};
	    .end if
	  .else
	    .print "ERROR: Enumerator Name is empty"
	  .end if
	.end for
}
  
.end function
.//
.//====================================================================
.//
.function gen_enum_classes
  .param string package_name
  .param string package_path
  .param string project_root
  .//
  .select many enum_dt_set from instances of S_EDT
  .for each enum_dt in enum_dt_set
    .select one dt related by enum_dt->S_DT[R17]
    .if ("${dt.Descrip:Translate}" != "false")
      .invoke edt_name = get_enumeration_class_name ( dt )
      .invoke e = gen_enum_class( package_name, edt_name.body, enum_dt )
      .invoke FILE_WRITE( "${project_root}/${package_path}/${edt_name.body}.java", "${e.body}" )
      .print "File '${package_path}/${edt_name.body}.java'  WRITTEN."
    .end if
  .end for
.end function
