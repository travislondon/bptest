.//=====================================================================
.//
.// File:      $RCSfile$
.// Version:   $Revision$
.// Modified:  $Date$
.//
.// (c) Copyright 2006-2014 by Mentor Graphics Corp. All rights reserved.
.//
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// This file is responsible for creating the adapter that decouples the
.// client model objects from the tree viewer by delegating the job of
.// finding a parent of an element or the children of an element to the
.// correct (generated) adapter.
.//
.function create_monitor_content_provider
  .param string path
  .//
  .assign provider_name = "MonitorContentProvider"
  .assign attr_result = provider_name  
package org.xtuml.bp.ui.explorer;
//======================================================================
//
// File: ${path}/${provider_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision$$
//
// (c) Copyright 2006-2014 , by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is an adapter that decouples the client model objects from
// the tree viewer by delegating the job of finding a parent of an element
// or the children of an element to the correct adapter.
//
import java.util.ArrayList;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;

import org.xtuml.bp.core.*;
import org.xtuml.bp.ui.explorer.adapters.*;

public class ${provider_name} implements ITreeContentProvider {
  protected TreeViewer viewer;
  /**
   * @see IContentProvider#dispose()
   */
  public void dispose() {
    // No resources allocated, nothing to dispose.
  }
  /**
   * @see IContentProvider#inputChanged(Viewer, Object, Object)
   */
  /**
   * Notifies this content provider that the given viewer's input
   * has been switched to a different element.
   * <p>
   * A typical use for this method is registering the content provider as a listener
   * to changes on the new input (using model-specific means), and deregistering the viewer
   * from the old input. In response to these change notifications, the content provider
   * propagates the changes to the viewer.
   * </p>
   *
   * @param viewer the viewer
   * @param oldInput the old input element, or <code>null</code> if the viewer
   *   did not previously have an input
   * @param newInput the new input element, or <code>null</code> if the viewer
   *   does not have an input
   */
  public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
    // Singleton model, nothing to do
  }
  .select many tree_nodes from instances of T_TNS
  /**
   * @see ITreeContentProvider#getChildren(Object)
   */
  public Object[] getChildren(Object parentElement) {
    if (parentElement instanceof Ooaofooa) {
			ArrayList result = new ArrayList();
			Object[] systems = RootAdapter.getInstance().getChildren(
				parentElement);
			for (int i = 0; i < systems.length; i++) {
				if (systems[i] instanceof SystemModel_c) {
					Component_c[] gComps = Component_c
							..getManyC_CsOnR8001(PackageableElement_c
									..getManyPE_PEsOnR8000(Package_c
											..getManyEP_PKGsOnR1405((SystemModel_c) systems[i])));
					for (int j = 0; j < gComps.length; j++) {
						ComponentInstance_c[] engines = getEnginesForComponent(gComps[j]);
						for (int k = 0; k < engines.length; k++) {
							addTo(result, engines[k]);
						}
					}
				}
			}
		return result.toArray();
    }
  .for each node in tree_nodes
    .select any node_class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke result = get_class_name(node_class)
    if (parentElement instanceof ${result.body}) {
      return $Cr{node.CategoryName}Adapter.getInstance().getChildren(parentElement);
    }
  .end for
    return null;
  }
	private void addTo(ArrayList result, ComponentInstance_c engine) {
		ClassInEngine_c[] classes = ClassInEngine_c
				                        ..getManyCSME_CIEsOnR2950(engine);
		for (int l = 0; l < classes.length; l++) {
			ClassMonitor_c mon = ClassMonitor_c
					                   ..getOneCSME_CLMOnR2950(classes[l]);
			if (mon != null) {
				result.add(classes[l]);
			}
		}
		Instance_c[] insts = Instance_c.getManyI_INSsOnR2949(engine);
		for (int l = 0; l < insts.length; l++) {
			Monitor_c mon = Monitor_c.getOneI_MONOnR2949(insts[l]);
			if (mon != null) {
				result.add(insts[l]);
			}
		}
	}
	private ComponentInstance_c[] getEnginesForComponent(Component_c componentC) {
		ComponentInstance_c[] compEngines = ComponentInstance_c
				..getManyI_EXEsOnR2955(componentC);
		ComponentInstance_c[] iCompEngines = ComponentInstance_c
				         ..getManyI_EXEsOnR2963(ComponentReference_c
						              ..getManyCL_ICsOnR4201(componentC));
		ComponentInstance_c[] engines = new ComponentInstance_c[compEngines.length
				+ iCompEngines.length];
		for (int k = 0; k < compEngines.length; k++) {
			engines[k] = compEngines[k];
		}
		for (int k = 0; k < iCompEngines.length; k++) {
			engines[compEngines.length + k] = iCompEngines[k];
		}
		return engines;
	}
  /**
   * @see ITreeContentProvider#getParent(Object)
   */
  public Object getParent(Object element) {
    if (element instanceof Ooaofooa) {
      return RootAdapter.getInstance().getParent(element);
    }
  .for each node in tree_nodes
    .select any node_class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke result = get_class_name(node_class)
    if (element instanceof ${result.body}) {
      return $Cr{node.CategoryName}Adapter.getInstance().getParent(element);
    }
  .end for
    return null;
  }
  /**
   * @see ITreeContentProvider#hasChildren(Object)
   */
  public boolean hasChildren(Object element) {
    if (element instanceof Ooaofooa) {
      return RootAdapter.getInstance().hasChildren(element);
    }
  .for each node in tree_nodes
    .select any node_class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke result = get_class_name(node_class)
    if (element instanceof ${result.body}) {
      return $Cr{node.CategoryName}Adapter.getInstance().hasChildren(element);
    }
  .end for
    // Unknown element
    return false;
  }
  /**
   * @see IStructuredContentProvider#getElements(Object)
   */
  public Object[] getElements(Object inputElement) {
    return getChildren(inputElement);
  }
}
.end function
