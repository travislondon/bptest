package org.xtuml.bp.core.inspector;
//======================================================================
//
// File: org/xtuml/bp/core/inspector/MessageArgumentInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_object_inspector.inc
// Version:      $Revision: 1.2 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class MessageArgument_c from the traversal mechanisms that it provides to
// model diff.
//
import org.xtuml.bp.core.*;

import org.eclipse.swt.graphics.Image;

import org.xtuml.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'MessageArgument_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class MessageArgumentInspector extends BaseModelClassInspector {

  private String parentAssoc;
  MessageArgumentTreeDifferenceSlot slot_class = new MessageArgumentTreeDifferenceSlot();

  public MessageArgumentInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    SynchronousMessage_c result1 = SynchronousMessage_c.getOneMSG_SMOnR1018(Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg))));
     if (result1 != null) {
        return result1;
    }               
    AsynchronousMessage_c result2 = AsynchronousMessage_c.getOneMSG_AMOnR1018(Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg))));
     if (result2 != null) {
        return result2;
    }               
    ReturnMessage_c result3 = ReturnMessage_c.getOneMSG_ROnR1018(Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg))));
     if (result3 != null) {
        return result3;
    }               
        return null;    //No parent found           
  }
  
  public Object[] getParentDetails(Object arg) {
  	  Object[] details = new Object[5];
      details[0] = getParent(arg);
	  details[1] = Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg)));
;
	  details[2] = "1018";
	  details[3] = "";
	  details[4] = "MSG_M";
	  if(details[0] instanceof AsynchronousMessage_c) {
		  details[1] = Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg)));
;
		  details[2] = "1018";
		  details[3] = "";
     	  details[4] = "MSG_M";
	  }
	  if(details[0] instanceof ReturnMessage_c) {
		  details[1] = Message_c.getOneMSG_MOnR1000(MessageArgument_c.getOneMSG_AOnR1013(InformalArgument_c.getOneMSG_IAOnR1013((MessageArgument_c)arg)));
;
		  details[2] = "1018";
		  details[3] = "";
     	  details[4] = "MSG_M";
	  }
	  return details;
  }
	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[8];
      attrSet[0] = new ObjectElement("Value", ObjectElement.ATTRIBUTE_ELEMENT,  ((MessageArgument_c) arg).getValue(), arg, "getValue", true);
      attrSet[1] = new ObjectElement("InformalName", ObjectElement.ATTRIBUTE_ELEMENT,  ((MessageArgument_c) arg).getInformalname(), arg, "getInformalname", true);
      attrSet[2] = new ObjectElement("Descrip", ObjectElement.ATTRIBUTE_ELEMENT,  ((MessageArgument_c) arg).getDescrip(), arg, "getDescrip", true);
      attrSet[3] = new ObjectElement("isFormal", ObjectElement.ATTRIBUTE_ELEMENT,  ((MessageArgument_c) arg).getIsformal(), arg, "getIsformal", false);
    ObjectElement compAttrSet[] = new ObjectElement[4];    
    for (int i = 0; i < 4 ; i++) {
        compAttrSet[i] = attrSet[i];
    }
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("OperationParameter.gif");
	}

    /**
     * Returns a "slot number" to be used when comparing and merging tree elements
     * that contain multiple children.  All model element inspector's contain this 
     * function, but it only returns a value for cases where it a parent element
     * in a tree and the parent has multiple children.
     * 
     * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
     * than 2 children. 
     */
   	@Override
   	public int getTreeDifferenceSlot(Object element) {
   		return slot_class.getTreeDifferenceSlot(element);
   	}
   	} 

