.//=====================================================================
.//
.// File:      create_global_action.inc
.//
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// The function declared below is responsible for creating the core.ui
.// actions for miscellaneous global actions such as cut, copy paste
.// and delete. They are declared here because multiple plugins use 
.// the same actions to carry out these tasks on the metamodel. 
.// The function takes a path parameter so that the comment correctly
.// displays the generated files location. Also takes a type parameter
.// which is compared with the label of the menu entry specification. If
.// a match is found, the menu entry is added to the action.
.//
.function create_global_action
  .param string path
  .param string type
  .//
  .assign action_name = "$Cr{type}Action"
  .assign attr_result = action_name  
package org.xtuml.bp.core.ui;
//======================================================================
//
// File: ${path}/${action_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.38 $$
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is the main BridgePoint entry point for the retargetable
// action, ${type}.
//
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.custom.BusyIndicator;
import org.eclipse.ui.actions.ActionFactory;
import org.xtuml.bp.core.util.OoaofgraphicsUtil;
  .if (action_name == "DeleteAction")
import org.eclipse.core.resources.IResource;
import org.eclipse.ui.actions.DeleteResourceAction;
import org.eclipse.ui.PlatformUI;
import org.xtuml.bp.core.common.ModelRoot;
  .end if

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.*;
import org.xtuml.bp.core.util.TransactionUtil;

public class ${action_name} extends Action {
  public ${action_name}(ImageDescriptor icon){
    super(ActionFactory.$U{type}.getId());
    setText("$Cr{type}");
    setToolTipText("$Cr{type} this model Element");
    setImageDescriptor(icon);
  }
  .if(action_name == "DeleteAction")
  private boolean fStartTransaction = true;
  
	public void setStartTransaction(boolean value) {
		fStartTransaction = value;
	}
  .end if
  public void run() {
    final IStructuredSelection selection = 
    	Selection.getInstance().getStructuredSelection();
  .if (action_name == "DeleteAction")

    // If there are domains in the selection, then an additional
    // PRE_DELETE event will be sent by the resource change listener
    // when the file deletion is noticed
    final Ooaofooa defRoot = Ooaofooa.getDefaultInstance();
      defRoot.fireModelElementAboutToBeDeleted(defRoot);

  .end if
    BusyIndicator.showWhile(null, new Runnable() {
        public void run () {
  .if (action_name == "DeleteAction") 
				if (!TransactionUtil.modifySelectedResources(
								"Confirm Element Deletion",
								"One or more of the selected elements are read only.  Do you still wish to delete them?"))
							return;
						TransactionUtil.TransactionGroup transactionGroup = null;
						if(fStartTransaction) {
	            transactionGroup = 
            				    TransactionUtil.startTransactionsOnSelectedModelRoots(
                    		"Delete model element instance(s)");
            }
            
            try {
              Ooaofooa.beginSaveOperation();
	          // only respond to DELETE events
	          int old_val = Ooaofooa.Enablemodelchangelistenersfor( defRoot, Modeleventnotification_c.DELTA_DELETE, Modeleventnotification_c.MODEL_ELEMENT_CHANGED );
	          try {
	          		deleteSelection(selection);
  .end if
  .if(action_name != "DeleteAction")
    .assign test = "if"
    .select many menu_entries from instances of CME
    .for each menu_entry in menu_entries
      .if ("$lr{menu_entry.Specialism}" == "$lr{type}")
        .invoke fn = get_func_name(menu_entry)
        .// invoke the nominated function generated from the client model
		      ${fn.body}(selection);
      .end if
    .end for
  .end if
  .if (action_name == "DeleteAction")
              }
              finally {  
			    Ooaofooa.Enablemodelchangelistenersfor(defRoot, old_val, old_val);
			  }
	        
			  // Remove deleted items from selection.  This prevents problems
			  // when the Properties view refreshes.
			  Selection.getInstance().clear();
			  // Restore any elements that were not deleted.
			  Iterator it = selection.iterator();
			  while (it.hasNext()) {
			      Object next = it.next();
			      if ( next instanceof NonRootModelElement )
			      {
				    NonRootModelElement elem = (NonRootModelElement) next;
				    if (!elem.isOrphaned()) {
					    Selection.getInstance().addToSelection(elem);
				    }
				  }
               }
              // catch all exceptions and cancel the transactions
            } catch (Exception e) {
                if(fStartTransaction) {
	                TransactionUtil.cancelTransactions(transactionGroup, e);
	              }
                CorePlugin.logError(
                	"Transaction: Delete instance(s) failed", e);//$$NON-NLS-1$$
            } finally {
                Ooaofooa.endSaveOperation();
            }
						
						if(fStartTransaction) {
	            TransactionUtil.endTransactions(transactionGroup);
	          }

    .end if
					}
      });
 
  }
  .if(action_name == "DeleteAction")
    .assign test = "if"
    .select many menu_entries from instances of CME
     public void deleteSelection(IStructuredSelection selection) {
	   if (selection == null) {
		   return;
	   }
    .for each menu_entry in menu_entries
      .if ("$lr{menu_entry.Specialism}" == "$lr{type}")
        .invoke fn = get_func_name(menu_entry)
        .// invoke the nominated function generated from the client model
		      ${fn.body}(selection);
      .end if
    .end for
    }
  .end if
  .select many menu_entries from instances of CME
  .for each menu_entry in menu_entries
    .if ("$lr{menu_entry.Specialism}" == "$lr{type}")
      .select one class related by menu_entry->O_OBJ[R2000]
      .invoke cn = get_class_name(class)
      .invoke fn = get_func_name(menu_entry)
  private void ${fn.body}(IStructuredSelection selection) {
	      .select any function from instances of S_SYNC where (selected.Name == "${fn.body}")
	      .if (not_empty function)
            .if ( "${function.Descrip:Translate}" == "native" )
              .print "${function.Name} written as native code"
${function.Action_Semantics}           
            .else
	          .invoke result = function_body(function)
	${result.body}
	        .end if
	      .else
	        .print "ERROR: No function found for context menu entry: $Cr{menu_entry.Label}"
	      .end if
  }
    .end if
  .end for
  
    static public boolean can${action_name}()
    {
		PersistenceManager pm = PersistenceManager.getDefaultInstance();
 		PersistableModelComponent component = null;
        boolean result = false;
        final IStructuredSelection structuredSelection = Selection.getInstance().getStructuredSelection();
        for (Iterator iterator = structuredSelection.iterator();
            iterator.hasNext();
            )
        {
            Object context = iterator.next();
	          component = pm.findElementComponent((NonRootModelElement) context, false);
  .assign else_str = ""
  .for each menu_entry in menu_entries
    .if ("$lr{menu_entry.Specialism}" == "$lr{type}")
      .select one class related by menu_entry->O_OBJ[R2000]
      .invoke cn = get_class_name(class)
            ${else_str}if (context instanceof ${cn.body})
            {	
                	  .select any op related by class->O_TFR[R115] where (selected.Name == "canDelete")
		              .if (not_empty op)
						result = ((${cn.body})context).Candelete();
				      .else
						result = true;
					  .end if
					}
      .assign else_str = "else "
    .end if
  .end for
            else
            {
                result = false;
                break;
            }
        }
        return result;            
    }


} // end ${action_name}
.end function
.//
.//
.//
