.//=======================================================================
.//
.// File:      org.xtuml.bp.core/arc/generate_rto_util.arc
.//
.// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
.//
.//=======================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=======================================================================
.//
.//
.invoke arc_env = GET_ENV_VAR( "PTC_MC_ARC_DIR" )
.assign mc_archetypes = arc_env.result
.if ( mc_archetypes == "" )
  .print "\nERROR: Environment variable PTC_MC_ARC_DIR not set."
  .exit 100
.end if
.//
.include "${mc_archetypes}/arch_utils.inc"
.//
package org.xtuml.bp.core.util;
//========================================================================
//
// File: org.xtuml.bp.core/src/org/xtuml/bp/core/util/RTOUtil.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
import java.util.ArrayList;
import java.util.List;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.*;

public class RTOUtil {

	public static List<NonRootModelElement> getRTOs(NonRootModelElement element) {
		List<NonRootModelElement> rtos = new ArrayList<NonRootModelElement>();
.select many objects from instances of O_OBJ
.for each object in objects
  .invoke objName = get_class_name(object)
  .assign className = objName.body
		if(element instanceof ${className}) {
  .select many rgos related by object->R_OIR[R201]->R_RGO[R203]
  .// only generate for simple associations and linked associations
  .for each rgo in rgos
    .select one form related by rgo->R_FORM[R205];
    .if(not_empty form)
      .select one part related by form->R_SIMP[R208]->R_PART[R207]
      .select one rtoObject related by part->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
      .invoke rtoClassName = get_class_name(rtoObject)
      .select one association related by form->R_SIMP[R208]->R_REL[R206]
      .if(object == rtoObject)
			${rtoClassName.body} rto_R${association.Numb} = ${rtoClassName.body}.getOne${rtoObject.Key_Lett}OnR${association.Numb}$cr{part.Txt_Phrs}((${className}) element);
      .else
			${rtoClassName.body} rto_R${association.Numb} = ${rtoClassName.body}.getOne${rtoObject.Key_Lett}OnR${association.Numb}((${className}) element);
      .end if
      		if(rto_R${association.Numb} != null) {
				rtos.add(rto_R${association.Numb});
			}
    .end if 
    .select one link related by rgo->R_ASSR[R205]
    .if(not_empty link)
      .select one aone related by link->R_ASSOC[R211]->R_AONE[R209]
      .select one aoth related by link->R_ASSOC[R211]->R_AOTH[R210]
      .select one aoneObject related by aone->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
      .select one aothObject related by aoth->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
      .invoke rtoAoneClassName = get_class_name(aoneObject)
      .invoke rtoAothClassName = get_class_name(aothObject)
      .select one association related by link->R_ASSOC[R211]->R_REL[R206]
      .if(aoneObject == aothObject)
			${rtoAoneClassName.body} aone_R${association.Numb} = ${rtoAoneClassName.body}.getOne${aoneObject.Key_Lett}OnR${association.Numb}$cr{aone.Txt_Phrs}((${className}) element);
			${rtoAothClassName.body} aoth_R${association.Numb} = ${rtoAothClassName.body}.getOne${aothObject.Key_Lett}OnR${association.Numb}$cr{aoth.Txt_Phrs}((${className}) element);
      .else
			${rtoAoneClassName.body} aone_R${association.Numb} = ${rtoAoneClassName.body}.getOne${aoneObject.Key_Lett}OnR${association.Numb}((${className}) element);
			${rtoAothClassName.body} aoth_R${association.Numb} = ${rtoAothClassName.body}.getOne${aothObject.Key_Lett}OnR${association.Numb}((${className}) element);
      .end if
			if(aone_R${association.Numb} != null) {
				rtos.add(aone_R${association.Numb});
			}
			if(aoth_R${association.Numb} != null) {
				rtos.add(aoth_R${association.Numb});
			}      
    .end if
  .end for
  		}
.end for
		return rtos;
	}

}
.emit to file "src/org/xtuml/bp/core/util/RTOUtil.java"
