.//====================================================================
.//
.// File:      page.inc
.//
.//=======================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//====================================================================
.//
.//
.function skip_class_generation
.param string class_name
.assign attr_skip = false
	.if(class_name == "GenericPackageAssignEventOnSM_TXNWizardPage1" )
	   .assign attr_skip = true
	.elif (class_name  == "BinaryFormalizeOnR_RELWizard" )
	   .assign attr_skip = true
	.elif (class_name  == "BinaryFormalizeOnR_RELWizardPage1" )
	   .assign attr_skip = true
	.elif (class_name  == "BinaryFormalizeOnR_RELWizardPage2" )
	   .assign attr_skip = true
	.end if
.end function 
//
.function is_linked_association_wizard_page
.param string class_name
.assign attr_islinked = false
	.if(class_name == "LinkedFormalizeOnR_RELWizardPage1" )
	   .assign attr_islinked = true
	.elif (class_name  == "LinkedFormalizeOnR_ASSRWizardPage1" )
	   .assign attr_islinked = true
	.elif (class_name  == "LinkedFormalizeOnR_RELWizard" )
	   .assign attr_islinked = true
	.elif (class_name  == "LinkedFormalizeOnR_ASSRWizard" )
	   .assign attr_islinked = true
	.end if
.end function
.//
.function get_page_class_name
  .param inst_ref wfl
  .param inst_ref step
  .//
  .invoke ui_page = get_ui_page_name(step)
  .invoke gpn = get_page_name(wfl)
  .assign attr_name = "${gpn.body}${ui_page.name}"
.end function
.//
.function create_page
  .param inst_ref wfl
  .param inst_ref step
  .//
  .select many steps related by wfl->W_STEP[R2005]
  .select any function from instances of S_SYNC where (selected.Sync_Id == wfl.Sync_Id)
  .select one action related by function->ACT_FNB[R695]->ACT_ACT[R698]
  .invoke gwcn = get_wizard_class_name(wfl)
  .assign wizard_class_name = gwcn.body
  .invoke gpcn = get_page_class_name(wfl, step)
  .assign page_class_name = gpcn.name
  .assign attr_name = page_class_name
package org.xtuml.bp.core.ui;
//====================================================================
//
// File:    ${page_class_name}.java
//
// WARNING: Do not edit this generated file
// Generated by ${info.arch_file_name}
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class ${page_class_name} extends PtWizardPage implements Listener
{
  public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";
	
  IWorkbench workbench;
  IStructuredSelection selection;
	
  // widgets on this page (public for unit tests)
  .invoke isLinkedPage = is_linked_association_wizard_page(page_class_name)
  .select many fields related by step->W_FLD[R2009]
  .for each field in fields
    .if (field.Type == "Text")
  public Text $cr{field.Instance_Handle}Text;
  public Label $cr{field.Instance_Handle}Label;
    .elif (field.Type == "Combo")
  public Combo $cr{field.Instance_Handle}Combo;
  public Label $cr{field.Instance_Handle}Label;
  	  .if (isLinkedPage.islinked)
  public String $cr{field.Instance_Handle}TextPhrase = "";
  public Text $cr{field.Instance_Handle}Prefix;		
  public Label $cr{field.Instance_Handle}PrefixLabel;
  public Label $cr{field.Instance_Handle}Phrase;
  	  .end if
    .elif (field.Type == "List")
  public List $cr{field.Instance_Handle}List;
    .end if
    .// Still need to consider radio buttons for enums
    .// (and enum handling in general).
  .end for

  // cache for user choices
  .for each field in fields
    .if (field.Type == "Text")
  String $cr{field.Instance_Handle} = null;
    .elif (field.Type == "Combo")
      .select one class related by field->O_OBJ[R2011]
  $cr{class.Name}_c $cr{field.Instance_Handle} = null;
  $cr{class.Name}_c [] $cr{field.Instance_Handle}Instances;
    .elif (field.Type == "List")
      .select one class related by field->O_OBJ[R2011]
  $cr{class.Name}_c [] $cr{field.Instance_Handle};
  $cr{class.Name}_c [] $cr{field.Instance_Handle}Instances;
    .end if
    .// Still need to consider radio buttons for enums
    .// (and enum handling in general).
  .end for

  /**
   * Constructors for ${page_class_name}.
   */
  public ${page_class_name}() {
    super("");
    init();
  }
  
  public ${page_class_name}(String name) {
    super(name);
    init();
  }
  
  .select one outer_block related by action->ACT_BLK[R601] where (selected.Block_Id == action.Block_Id)
  .select many context_items related by wfl->W_CTI[R2003]
  .select any cme from instances of CME where ((selected.Specialism == wfl.Specialism) and (selected.Label == wfl.Label) and (selected.Key_Lett == wfl.Key_Lett))
  private void init() {
    setTitle("${cme.Label}");
    setDescription("${cme.WizardDescription}");
  }
  
  public void onPageEntry() {
    Ooaofooa modelRoot = Selection.getModelRoot((StructuredSelection)
    	((${wizard_class_name})getWizard()).getSelection());
  .select many context_fields related by step->W_WOF[R2005]->W_STEP[R2005]->W_FLD[R2009]
  .assign context_fields = context_fields - fields
  .if (not_empty context_fields)

    // cache for previous user selections
    .for each context_field in context_fields
      .if (context_field.Type == "Text")
    String v_${context_field.Instance_Handle} = ((${wizard_class_name})getWizard()).v_${context_field.Instance_Handle};
      .elif (context_field.Type == "Combo")
        .select any class from instances of O_OBJ where (selected.Key_Lett == context_field.Key_Lett)
    $cr{class.Name}_c v_${context_field.Instance_Handle} = ((${wizard_class_name})getWizard()).v_${context_field.Instance_Handle};
      .elif (context_field.Type == "List")
        .select any class from instances of O_OBJ where (selected.Key_Lett == context_field.Key_Lett)
    $cr{class.Name}_c [] v_${context_field.Instance_Handle} = ((${wizard_class_name})getWizard()).v_${context_field.Instance_Handle};
      .end if
      .// Still need to consider radio buttons for enums
      .// (and enum handling in general).
    .end for
  .end if

    // cache for context
  .for each context_item in context_items
    .select any class from instances of O_OBJ where (selected.Key_Lett == context_item.Key_Lett)
    $cr{class.Name}_c v_${context_item.Name} = ((${wizard_class_name})getWizard()).v_${context_item.Name};
  .end for
  .for each field in fields
    .select any class from instances of O_OBJ where (selected.Key_Lett == field.Key_Lett)
    .if (field.Type == "Text")
      .assign field.buffer = "  //$cr{field.Instance_Handle}Text.setText(((${wizard_class_name})getWizard()).v_${field.Instance_Handle});"
    .end if
    .if ((field.Type == "Combo") OR (field.Type == "List"))
      .select any statement from instances of ACT_SMT where ("${selected.Statement_Id}" == "${field.Statement_Id}")
      .select one sel_rel related by statement->ACT_SEL[R603]
      .select one var related by sel_rel->V_VAR[R638]
      .assign load_ui = ""
      .if (sel_rel.is_implicit == 1)
        .assign load_ui = "$cr{class.Name}_c         v_${var.Name}  = null ;\n"
      .end if
      .assign load_ui = load_ui + "int ${var.Name}InstCount;\n"
      .assign load_ui = load_ui + "int ${var.Name}ResultCount = 0;\n"
      .assign load_ui = load_ui + "for (${var.Name}InstCount = 0; ${var.Name}InstCount < v_${var.Name}Instances.length; ${var.Name}InstCount++) {\n"
      .assign load_ui = load_ui + "  $cr{class.Name}_c selected = v_${var.Name}Instances[${var.Name}InstCount] ;\n"
      .select one sel_rel_where related by sel_rel->ACT_SRW[R664]
      .select one where_clause related by sel_rel_where->V_VAL[R611]
      .assign load_ui = load_ui + "  if (${where_clause.buffer})  {    ${field.Instance_Handle}ResultCount++;  }\n"
      .assign load_ui = load_ui + "}\n"
      .assign load_ui = load_ui + "this.$cr{field.Instance_Handle}Instances = new $cr{class.Name}_c[${field.Instance_Handle}ResultCount];\n"
      .assign load_ui = load_ui + "${field.Instance_Handle}ResultCount = 0;\n"
      .assign load_ui = load_ui + "for (${var.Name}InstCount = 0; ${var.Name}InstCount < v_${var.Name}Instances.length; ${var.Name}InstCount++)\n"
      .assign load_ui = load_ui + "{\n"
      .assign load_ui = load_ui + "  $cr{class.Name}_c selected = v_${var.Name}Instances[${var.Name}InstCount] ;\n"
      .assign load_ui = load_ui + "  if (${where_clause.buffer})  {\n"
      .assign load_ui = load_ui + "    this.$cr{field.Instance_Handle}Instances[${field.Instance_Handle}ResultCount] = selected;\n"
      .assign load_ui = load_ui + "    ${field.Instance_Handle}ResultCount++;\n"
      .assign load_ui = load_ui + "  }\n"
      .assign load_ui = load_ui + "}\n"
      .assign load_ui = load_ui + "  $cr{field.Instance_Handle}Combo.removeAll();\n"
      .assign load_ui = load_ui + "  for (${field.Instance_Handle}InstCount = 0; ${field.Instance_Handle}InstCount < ${field.Instance_Handle}ResultCount; ${field.Instance_Handle}InstCount++)\n"
      .invoke ident = get_ui_identifier(class, "this.$cr{field.Instance_Handle}Instances[${field.Instance_Handle}InstCount]")
      .if (((page_class_name == "SpecializedPackageIgnoreInStateOnSM_EVTWizardPage1") or (page_class_name == "SpecializedPackageCantHappenInStateOnSM_EVTWizardPage1")) or ((page_class_name == "GenericPackageIgnoreInStateOnSM_EVTWizardPage1") or (page_class_name == "GenericPackageCantHappenInStateOnSM_EVTWizardPage1")))
      	.assign ident.body = "((StateMachineState_c) this.StateInstances[stateInstCount]).Getnamewithclass()"
      .end if  	
      .assign load_ui = load_ui + "    $cr{field.Instance_Handle}Combo.add(${ident.body});"
      .if ( (cardinality steps) == 1 )
        .// only select the default if there is only one step
        .assign load_ui = load_ui + "  if ( ${field.Instance_Handle}ResultCount > 0 ) { \n"
        .assign load_ui = load_ui + "      $cr{field.Instance_Handle}Combo.select(0);\n"
        .assign load_ui = load_ui + "      updateSelected$cr{field.Instance_Handle}();\n  }\n"
      .else
        .// only select the default if there is only one step
        .assign load_ui = load_ui + "  if ( ${field.Instance_Handle}ResultCount == 1 ) { \n"
        .assign load_ui = load_ui + "      $cr{field.Instance_Handle}Combo.select(0);\n"
        .assign load_ui = load_ui + "      updateSelected$cr{field.Instance_Handle}();\n  }\n"
      .end if
      .assign field.buffer = statement.buffer + load_ui
    .end if
    .// Still need to consider radio buttons for enums
    .// (and enum handling in general).
  .end for
  .invoke result = wfl_blck_xlate(outer_block)
${result.body}
		.if ((page_class_name == "LinkedFormalizeOnR_RELWizardPage1") or (page_class_name == "LinkedFormalizeOnR_ASSRWizardPage1"))
  	  	ClassAsAssociatedOneSide_c v_one_side = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209(v_a_rel);
		ClassAsAssociatedOtherSide_c v_oth_side = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210(v_a_rel);
		if ( !v_one_side.getTxt_phrs().equals(""))
			One_idTextPhrase = " for the '" + v_one_side.getTxt_phrs() + "' side";
		if ( !v_oth_side.getTxt_phrs().equals(""))
			Oth_idTextPhrase = " for the '" + v_oth_side.getTxt_phrs() + "' side";  
		.end if
  .invoke clear_workspace()
  }
  
  public void createControl(Composite parent) {
    // create the composite to hold the widgets   
    GridData gd = null;
    Composite composite = new Composite(parent, SWT.NULL);

    // create the desired layout for this wizard page
    GridLayout gl = new GridLayout();
    int ncol = 5;
    gl.numColumns = ncol;
    composite.setLayout(gl);

    .for each field in fields
    	.if (isLinkedPage.islinked)
  	$cr{field.Instance_Handle}PrefixLabel = new Label (composite, SWT.NONE);
  	$cr{field.Instance_Handle}PrefixLabel.setText("Prefix");		
  	$cr{field.Instance_Handle}Prefix = new Text(composite, SWT.BORDER);
  	$cr{field.Instance_Handle}Prefix.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
  	$cr{field.Instance_Handle}Prefix.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent arg0) {
				((${wizard_class_name}) getWizard()).v_${field.Instance_Handle}Prefix = ${page_class_name}.this.$cr{field.Instance_Handle}Prefix.getText();
			}
		});
    	.end if
.if (field.Type == "Text")
    $cr{field.Instance_Handle}Label = new Label (composite, SWT.NONE);
    $cr{field.Instance_Handle}Label.setText("$cr{field.Instance_Handle}");
    $cr{field.Instance_Handle}Text = new Text(composite, SWT.BORDER);
    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;
    $cr{field.Instance_Handle}Text.setLayoutData(gd);
    .elif (field.Type == "Combo")
    $cr{field.Instance_Handle}Label = new Label (composite, SWT.NONE);
	.if (isLinkedPage.islinked)
	    $cr{field.Instance_Handle}Label.setText("goes with identifier");						
    .else
    	$cr{field.Instance_Handle}Label.setText("$cr{field.Instance_Handle}");						
    .end if
    $cr{field.Instance_Handle}Combo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
    $cr{field.Instance_Handle}Combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    .elif (field.Type == "List")
  List $cr{field.Instance_Handle};
    .end if
		.if (isLinkedPage.islinked)
    		$cr{field.Instance_Handle}Phrase = new Label (composite, SWT.NONE);
    		$cr{field.Instance_Handle}Phrase.setText("");
    	.end if
    .end for

    // set the composite as the control for this page
    setControl(composite);		
    onPageEntry();           // Initialize the ui widget contents
    .for each field in fields
      .select one cflx related by field->W_CFL[R2014]
      .if ( not_empty cflx )
			.if (isLinkedPage.islinked)
    $cr{field.Instance_Handle}Phrase.setText("of class \"" + ${cflx.Label} + "\"" + $cr{field.Instance_Handle}TextPhrase );
			.else     
    $cr{field.Instance_Handle}Label.setText("of class \"" + ${cflx.Label} + "\"" + $cr{field.Instance_Handle}TextPhrase );
    		.end if
      .end if
    .end for 
    addListeners();
  }
  
  private void addListeners()
  {
    .for each field in fields
      .if (field.type == "Text")
    $cr{field.Instance_Handle}Text.addListener(SWT.KeyUp, this);
      .elif (field.type == "Combo")
    $cr{field.Instance_Handle}Combo.addListener(SWT.Selection, this);
      .elif (field.type == "List")
    $cr{field.Instance_Handle}List.addListener(SWT.Selection, this);
	  .end if
	.end for
  }

    .for each field in fields
  // public for unit tests
  public void updateSelected$cr{field.Instance_Handle}()
  {
      .if (field.type == "Text")
      this.$cr{field.Instance_Handle} = $cr{field.Instance_Handle}Text.getText();
      ((${wizard_class_name})getWizard()).v_${field.Instance_Handle} = this.$cr{field.Instance_Handle};
      .elif (field.type == "Combo")
      this.$cr{field.Instance_Handle} = $cr{field.Instance_Handle}Instances[$cr{field.Instance_Handle}Combo.getSelectionIndex()];
      ((${wizard_class_name})getWizard()).v_${field.Instance_Handle} = this.$cr{field.Instance_Handle};
      .elif (field.type == "List")
      $cr{field.Instance_Handle} = $cr{field.Instance_Handle}Instances[$cr{field.Instance_Handle}List.getSelectionIndex()];
	  .end if
  }
    .end for

  /**
   * @see Listener#handleEvent(Event)
   */
  public void handleEvent(Event event) {
    .for each field in fields
      .if (field.type == "Text")
    if (event.widget == $cr{field.Instance_Handle}Text) {
        updateSelected$cr{field.Instance_Handle}();
	}
      .elif (field.type == "Combo")
    if (event.widget == $cr{field.Instance_Handle}Combo) {
        updateSelected$cr{field.Instance_Handle}();
	}
      .elif (field.type == "List")
    if (event.widget == $cr{field.Instance_Handle}List) {
        updateSelected$cr{field.Instance_Handle}();
	}
	  .end if
    .end for
    getWizard().getContainer().updateButtons();
  }

  public boolean isPageComplete()
  {
    boolean isPageComplete = true;
  .for each field in fields
    if ($cr{field.Instance_Handle} == null) isPageComplete = false;
  .end for
    return isPageComplete;
  }

  public IWizardPage getNextPage()
  {    		
    .for each field in fields
      ((${wizard_class_name})getWizard()).v_${field.Instance_Handle} = $cr{field.Instance_Handle};
    .end for
    PtWizardPage page =  (PtWizardPage)getWizard().getNextPage(this);
    page.onPageEntry();
    return page;
  }

  /**
   * @see IWizardPage#canFlipToNextPage()
   */
  public boolean canFlipToNextPage()
  {
    if ((PtWizardPage)getWizard().getNextPage(this) == null) return false;
    .for each field in fields
    if ($cr{field.Instance_Handle} == null) return false;
    .end for
    return true;
  }

}
.end function
