.//=====================================================================
.//
.// File:      $RCSfile: create_outline_sorter.inc,v $
.// Version:   $Revision: 1.12 $
.// Modified:  $Date: 2013/01/10 23:19:14 $
.//
.// (c) Copyright 2003-2014 Mentor Graphics Corporation All rights reserved.
.//
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// This file is responsible for creating the sorter that optionally
.// orders the elements of the Model Outline View.
.//
.function create_outline_sorter
  .param string path
  .//
  .assign sorter_name = "ModelOutlineSorter"
  .assign attr_result = sorter_name
package org.xtuml.bp.ui.canvas;
//======================================================================
//
// File: ${path}/${sorter_name}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.12 $$
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//======================================================================
//
import java.text.Collator;

import org.eclipse.jface.viewers.ViewerSorter;

  .select many tree_nodes from instances of T_TNS
  .for each node in tree_nodes
    .select any class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke result = get_class_name(class)
import org.xtuml.bp.core.${result.body};
  .end for

/**
 * This class sorts the elements in the outline tree into
 * case insensitive, alpha descending order. The sort
 * algorithm is located in the supertype. The category
 * method is overridden here to ensure that elements of
 * the same type are sorted together.
 */
public class ${sorter_name} extends ViewerSorter {
  /**
   * 
   */
  public ${sorter_name}() {
    super();
  }
  /**
   * @param collator
   */
  public ${sorter_name}(Collator collator) {
    super(collator);
  }
  /**
   * Provides a different category value for each
   * type of item shown in the tree.
   */
  .assign count = 1
  public int category(Object element) {
  .for each node in tree_nodes
    .select any class from instances of O_OBJ where (selected.Key_Lett == node.Key_Lett)
    .invoke result = get_class_name(class)
    if (element instanceof ${result.body}) {
      return ${count};
    }
    .assign count = count + 1
  .end for
    // unknown element
    return 0;
  }
}
.end function
