-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	"8f801c9a-cf2d-4ef4-b11a-51b8697e3ca8",
	'Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("3b44eb2a-cf8b-46a2-b829-8a89f10c7a8a",
	112,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.ui.canvas::ooaofgraphics::Functions');
INSERT INTO DIM_DIA
	VALUES ("3b44eb2a-cf8b-46a2-b829-8a89f10c7a8a",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("e6d75eb8-1515-4500-af0e-a6f5613f71ce",
	"00000000-0000-0000-0000-000000000000",
	'max',
	'Returns the larger of the two values passed.',
	'if (param.a > param.b)
  return param.a;
else
  return param.b;
end if;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("59bf1f3c-6ea5-4934-bcbb-03f8f4543a74",
	"e6d75eb8-1515-4500-af0e-a6f5613f71ce",
	'a',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("84b38039-fabf-443a-9a1a-3646cd40e755",
	"e6d75eb8-1515-4500-af0e-a6f5613f71ce",
	'b',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"59bf1f3c-6ea5-4934-bcbb-03f8f4543a74",
	'');
INSERT INTO PE_PE
	VALUES ("e6d75eb8-1515-4500-af0e-a6f5613f71ce",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85c51c6f-0495-423e-98b7-0a71d2faafa6",
	"00000000-0000-0000-0000-000000000000",
	'min',
	'Returns the smaller of the two values passed.',
	'if (param.a < param.b)
  return param.a;
else
  return param.b;
end if;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6c8e6f20-9a50-400c-8ad8-4d8d3eff862c",
	"85c51c6f-0495-423e-98b7-0a71d2faafa6",
	'a',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fe54e7ab-5b56-4cb3-b202-6ca7ea3e3e1c",
	"85c51c6f-0495-423e-98b7-0a71d2faafa6",
	'b',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6c8e6f20-9a50-400c-8ad8-4d8d3eff862c",
	'');
INSERT INTO PE_PE
	VALUES ("85c51c6f-0495-423e-98b7-0a71d2faafa6",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	"00000000-0000-0000-0000-000000000000",
	'roundToGridSnapPointWithinLimits',
	'',
	'// calculate the nearest snap value to the value given
snapIncr = ::getGridSnapIncrement(isConnector:param.isConnector);
snap = ::round(value:(param.ordinate / snapIncr)) * snapIncr;

// if the snap value is less than the given minimum
if (snap < param.min)  
	// add one snap increment to the value
	snap = snap + snapIncr;
	
// else, if the snap value is greater than the given maximum
elif (snap > param.max)
	// subtract one snap increment from the value
	snap = snap - snapIncr;
end if;

return snap;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e7e35935-1533-4468-9025-1904d9a4248c",
	"c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	'ordinate',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"8f62d726-a72b-4167-a592-f92d18d574a2",
	'');
INSERT INTO S_SPARM
	VALUES ("8f62d726-a72b-4167-a592-f92d18d574a2",
	"c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	'min',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"0068bf8d-55c9-4881-875b-9526bb412031",
	'');
INSERT INTO S_SPARM
	VALUES ("0068bf8d-55c9-4881-875b-9526bb412031",
	"c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	'max',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b0960108-f411-42a3-885a-882090ba5949",
	'');
INSERT INTO S_SPARM
	VALUES ("b0960108-f411-42a3-885a-882090ba5949",
	"c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	'isConnector',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c7b1d888-da8c-41ce-aa8e-d8004b84cf89",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("60c50177-e1fc-4f30-8981-71070307f52f",
	"00000000-0000-0000-0000-000000000000",
	'round',
	'Translate: native',
	'return Math.round(p_Value);',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("24eed6a9-28d1-4914-8297-3e63ba2136e1",
	"60c50177-e1fc-4f30-8981-71070307f52f",
	'value',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("60c50177-e1fc-4f30-8981-71070307f52f",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("05f67195-0ef8-4b27-80f9-c49e364f1955",
	"00000000-0000-0000-0000-000000000000",
	'getGridSnapIncrement',
	'',
	'if(param.isConnector)
  return 6;
else
  return 12;
end if;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("fee7b4a7-601a-4d5c-a5e5-807e5bf514ab",
	"05f67195-0ef8-4b27-80f9-c49e364f1955",
	'isConnector',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("05f67195-0ef8-4b27-80f9-c49e364f1955",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fb2594a9-e025-4bcb-8acb-cf2934a42bb2",
	"00000000-0000-0000-0000-000000000000",
	'roundToGridSnapPoint',
	'',
	'maxInt = OS::MAX_INT();
return ::roundToGridSnapPointWithinLimits(ordinate:param.ordinate, 
	min:-maxInt, max:maxInt, isConnector:param.isConnector);',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b08a89dd-3729-4e38-bae5-121bbba3096c",
	"fb2594a9-e025-4bcb-8acb-cf2934a42bb2",
	'ordinate',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"08844ee9-8c95-441e-8d3d-1fb251ec3c30",
	'');
INSERT INTO S_SPARM
	VALUES ("08844ee9-8c95-441e-8d3d-1fb251ec3c30",
	"fb2594a9-e025-4bcb-8acb-cf2934a42bb2",
	'isConnector',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fb2594a9-e025-4bcb-8acb-cf2934a42bb2",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	"00000000-0000-0000-0000-000000000000",
	'getDistance',
	'',
	'/*
Returns the distance between the given positions (x1, y1) and (x2, y2).
*/

a = param.x2 - param.x1;
b = param.y2 - param.y1;
return OS::getSquareRoot(value:(a * a + b * b));',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b3a34c90-c043-43d5-a4e4-fc572b87307a",
	"22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	'x1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("85004480-277a-4115-89c0-74257e3c26eb",
	"22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	'y1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"3b127fed-f830-4e6e-a8d0-d126884bcfdd",
	'');
INSERT INTO S_SPARM
	VALUES ("3b127fed-f830-4e6e-a8d0-d126884bcfdd",
	"22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"b3a34c90-c043-43d5-a4e4-fc572b87307a",
	'');
INSERT INTO S_SPARM
	VALUES ("040712f4-ce90-4d41-872f-5c835b22b8b3",
	"22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"85004480-277a-4115-89c0-74257e3c26eb",
	'');
INSERT INTO PE_PE
	VALUES ("22da94bc-f04b-48dd-9c8d-8d2199ec4b67",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fad10f81-13af-4f98-9aa3-aefec28e0b38",
	"00000000-0000-0000-0000-000000000000",
	'getIconDistanceFromEdge',
	'',
	'return 4;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("fad10f81-13af-4f98-9aa3-aefec28e0b38",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("270e097d-e2da-4802-a161-22ba55f59cea",
	"00000000-0000-0000-0000-000000000000",
	'getIconSize',
	'',
	'return 16;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("270e097d-e2da-4802-a161-22ba55f59cea",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d5c82af9-0085-46a6-9776-5b1e5a6a0692",
	"00000000-0000-0000-0000-000000000000",
	'getIconSpacing',
	'',
	'return 2;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d5c82af9-0085-46a6-9776-5b1e5a6a0692",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("efd387cc-d10d-423b-8404-142c52f6ad6a",
	"00000000-0000-0000-0000-000000000000",
	'drawDiamond',
	'',
	'/**
*  Draw a diamond symbol
*
*/
p = GR::startPoly(numVert: 4);
x = param.x;
y = param.y;
w = param.w;
h = param.h;
GR::polyAddPoint(poly:p, x: x+w/2, y:y );
GR::polyAddPoint(poly:p, x: x+w,   y:y+h/2 );
GR::polyAddPoint(poly:p, x: x+w/2, y:y+h );
GR::polyAddPoint(poly:p, x: x,     y:y+h/2 );
GR::polyDraw(context: param.context, poly:p);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b5ecec14-e594-47d6-a080-9edc20825a00",
	"efd387cc-d10d-423b-8404-142c52f6ad6a",
	'context',
	"231cb314-a496-47fb-aee2-1317be81deb5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("231cb314-a496-47fb-aee2-1317be81deb5",
	"00000000-0000-0000-0000-000000000000",
	'GCDelegate',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("022c1d6d-69d4-4e22-8283-d8ed2ce727b5",
	"efd387cc-d10d-423b-8404-142c52f6ad6a",
	'x',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a5306544-28c1-493d-8b88-2fecb763266e",
	'');
INSERT INTO S_SPARM
	VALUES ("614868f5-5db4-4b4b-a95d-7f6185af739d",
	"efd387cc-d10d-423b-8404-142c52f6ad6a",
	'y',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"022c1d6d-69d4-4e22-8283-d8ed2ce727b5",
	'');
INSERT INTO S_SPARM
	VALUES ("a5306544-28c1-493d-8b88-2fecb763266e",
	"efd387cc-d10d-423b-8404-142c52f6ad6a",
	'w',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"3c8ab358-362a-4f6d-99e1-5ca26e67a4b7",
	'');
INSERT INTO S_SPARM
	VALUES ("3c8ab358-362a-4f6d-99e1-5ca26e67a4b7",
	"efd387cc-d10d-423b-8404-142c52f6ad6a",
	'h',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b5ecec14-e594-47d6-a080-9edc20825a00",
	'');
INSERT INTO PE_PE
	VALUES ("efd387cc-d10d-423b-8404-142c52f6ad6a",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	"00000000-0000-0000-0000-000000000000",
	'drawConcavePentagon',
	'',
	'/**
 *
 *  Draw a Concave Pentagon symbol
 *
 */
p = GR::startPoly(numVert: 5);
x = param.x;
y = param.y;
w = param.w;
h = param.h;
GR::polyAddPoint(poly:p, x: x, y:y );
GR::polyAddPoint(poly:p, x: x+w,   y:y );
GR::polyAddPoint(poly:p, x: x+w,   y:y+h );
GR::polyAddPoint(poly:p, x: x,     y:y+h );
GR::polyAddPoint(poly:p, x: x+w/5, y:y+h/2 );
GR::polyDraw(context: param.context, poly:p);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e6872af2-59fa-4fb4-9afc-d379f3594ef3",
	"aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	'context',
	"231cb314-a496-47fb-aee2-1317be81deb5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("67f77b4f-5d3f-41bd-bef6-164457656cf7",
	"aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	'x',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1f5add27-9cf5-4578-9237-5fa2d186320c",
	'');
INSERT INTO S_SPARM
	VALUES ("774d48f9-ac75-4a63-a9ae-50cb3147b97c",
	"aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	'y',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"67f77b4f-5d3f-41bd-bef6-164457656cf7",
	'');
INSERT INTO S_SPARM
	VALUES ("1f5add27-9cf5-4578-9237-5fa2d186320c",
	"aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	'w',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"fd4d5983-a543-42c2-b638-85ddd8e70166",
	'');
INSERT INTO S_SPARM
	VALUES ("fd4d5983-a543-42c2-b638-85ddd8e70166",
	"aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	'h',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e6872af2-59fa-4fb4-9afc-d379f3594ef3",
	'');
INSERT INTO PE_PE
	VALUES ("aaa10e70-b761-4804-8b74-35b8bb8f4f93",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("07218182-1e3e-4e50-a444-d502b100e30a",
	"00000000-0000-0000-0000-000000000000",
	'drawConvexPentagon',
	'',
	'/**
 *
 *  Draw a convex pentagon symbol
 *
 */
x = param.x;
y = param.y;
w = param.w;
h = param.h;
p = GR::startPoly(numVert: 5);
GR::polyAddPoint(poly:p, x: x, y:y );
GR::polyAddPoint(poly:p, x: x+(4*w)/5,   y:y );
GR::polyAddPoint(poly:p, x: x+w,   y:y+h/2 );
GR::polyAddPoint(poly:p, x: x+(4*w)/5,     y:y+h );
GR::polyAddPoint(poly:p, x: x, y:y+h );
GR::polyDraw(context: param.context, poly:p);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("baa36666-0f66-4146-8ff3-4b835c9939a5",
	"07218182-1e3e-4e50-a444-d502b100e30a",
	'context',
	"231cb314-a496-47fb-aee2-1317be81deb5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9f956d38-cfa5-4a30-9c22-9df268ea30a8",
	"07218182-1e3e-4e50-a444-d502b100e30a",
	'x',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"8a6a34c1-3f34-4e06-bf59-5c5818f80d69",
	'');
INSERT INTO S_SPARM
	VALUES ("8cc01dee-cc39-476f-a9b4-04776d383138",
	"07218182-1e3e-4e50-a444-d502b100e30a",
	'y',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"9f956d38-cfa5-4a30-9c22-9df268ea30a8",
	'');
INSERT INTO S_SPARM
	VALUES ("8a6a34c1-3f34-4e06-bf59-5c5818f80d69",
	"07218182-1e3e-4e50-a444-d502b100e30a",
	'w',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"36691e82-497c-4674-9ddf-31653804b5b2",
	'');
INSERT INTO S_SPARM
	VALUES ("36691e82-497c-4674-9ddf-31653804b5b2",
	"07218182-1e3e-4e50-a444-d502b100e30a",
	'h',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"baa36666-0f66-4146-8ff3-4b835c9939a5",
	'');
INSERT INTO PE_PE
	VALUES ("07218182-1e3e-4e50-a444-d502b100e30a",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a5451ef2-0052-467e-af6d-9b9d98970df1",
	"00000000-0000-0000-0000-000000000000",
	'drawHourglass',
	'',
	'/**
 *
 *  Draw a hourglass symbol
 *
 */
x = param.x;
y = param.y;
w = param.w;
h = param.h;
p1 = GR::startPoly(numVert: 5);
GR::polyAddPoint(poly:p1, x: x,     y:y );
GR::polyAddPoint(poly:p1, x: x+w,   y:y );
GR::polyAddPoint(poly:p1, x: x,     y:y+h );
GR::polyAddPoint(poly:p1, x: x+w,   y:y+h );
GR::polyAddPoint(poly:p1, x: x,     y:y );
GR::polyDraw(context: param.context, poly:p1);',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3b9cd9ac-87a4-40ed-9b3e-e27aa9031c53",
	"a5451ef2-0052-467e-af6d-9b9d98970df1",
	'context',
	"231cb314-a496-47fb-aee2-1317be81deb5",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f6d01aba-f90b-485a-ae83-9f909e3c6fdc",
	"a5451ef2-0052-467e-af6d-9b9d98970df1",
	'x',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"9ecffb2c-7f6e-426f-b38d-785d99ee88d8",
	'');
INSERT INTO S_SPARM
	VALUES ("8b7ffe5d-aecc-4630-98cb-fbbaff5f56c1",
	"a5451ef2-0052-467e-af6d-9b9d98970df1",
	'y',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"f6d01aba-f90b-485a-ae83-9f909e3c6fdc",
	'');
INSERT INTO S_SPARM
	VALUES ("9ecffb2c-7f6e-426f-b38d-785d99ee88d8",
	"a5451ef2-0052-467e-af6d-9b9d98970df1",
	'w',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"5fa91be4-3f69-407d-abc7-7210b5d114d8",
	'');
INSERT INTO S_SPARM
	VALUES ("5fa91be4-3f69-407d-abc7-7210b5d114d8",
	"a5451ef2-0052-467e-af6d-9b9d98970df1",
	'h',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"3b9cd9ac-87a4-40ed-9b3e-e27aa9031c53",
	'');
INSERT INTO PE_PE
	VALUES ("a5451ef2-0052-467e-af6d-9b9d98970df1",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	"00000000-0000-0000-0000-000000000000",
	'getIntersectionOfSegmentWithEllipse',
	'',
	'/*
Returns the intersection of the given segment or line (x, y)-(x2, y2) 
(as detm''d by param.considerLine) and the ellipse defined by the given 
rectangle, or the zero if there is none.  Since most often there will
be two intersections, one that is on the given segment will be returned over 
one which is not, and secondarily, the one that is closer to (x, y)
will be given preference.

*/

// we''ll consider the ellipse to be centered at the origin, so that its
// equation simplifies to (x^2 / a^2) + (y^2 / b^2) = 1, where a is half
// the ellipse''s width, and b is half the ellipse''s height

// detm the a and b in the equation for the ellipse
ellipseA = param.ellipseW / 2;
ellipseB = param.ellipseH / 2;

// since we are (above) implicitly tranlsating the ellipse''s center to the 
// origin, we must translate the given line points by the same amount 
centerX = param.ellipseX + param.ellipseW / 2;
centerY = param.ellipseY + param.ellipseH / 2;
x = param.x - centerX;
y = param.y - centerY;
x2 = param.x2 - centerX;
y2 = param.y2 - centerY;

// if the given line is vertical, which we have to treat as a special case
// since y = mx + b can''t be used to express it
result1X = 0.0;
result1Y = 0.0;
result2X = 0.0;
result2Y = 0.0;
if (x == x2)
	// treat the line as x = x0, in which case the intersection y 
	// equals (+/-)b * square_root(1 - (x0^2 / a^2));
	
	// if there is no intersection
	determinant = 1 - (x * x) / (ellipseA * ellipseA);
	if (determinant < 0)
		// return that fact
		return 0;
	end if;

	// complete the above-specified calculation
	result1X = x;
	result1Y = ellipseB * OS::getSquareRoot(value:determinant);
	result2X = x;
	result2Y = -result1Y;

// otherwise
else
	// express the line using y = mx + B, in which case we wind up with a 
	// simple quadratic equation for x with:
	// quadA = 1 / a^2 + m^2 / b^2
	// quadB = 2 * B * m / b^2
	// quadC = B^2 / b^2 - 1 
	slope = ::getSlope(x:x, y:y, x2:x2, y2:y2);
	yIntercept = ::getYIntercept(x:x, y:y, x2:x2, y2:y2);
	slopeSquared = slope * slope;
	ellipseBSquared = ellipseB * ellipseB;
	quadA = 1 / (ellipseA * ellipseA) + slopeSquared / ellipseBSquared;
	quadB = 2 * yIntercept * slope / ellipseBSquared;
	quadC = (yIntercept * yIntercept) / ellipseBSquared - 1;
	
	// if there is no intersection
	determinant = quadB * quadB - 4 * quadA * quadC;
	if (determinant < 0)
		// return that fact
		return 0;
	end if;
	
	// complete the above-specified calculation
	determinantSquareRoot = OS::getSquareRoot(value:determinant);
	result1X = (-quadB + determinantSquareRoot) / (2 * quadA);
	result1Y = slope * result1X + yIntercept;
	result2X = (-quadB - determinantSquareRoot) / (2 * quadA);
	result2Y = slope * result2X + yIntercept;
end if;

// detm which of the two intersection points found above to return as the 
// result, giving preference to one that''s on the given segment, 
// and secondarily, to the one that''s closer to the given first point of that
// segement
result1OnSegment = param.considerLine or ::getBoxDefinedBySegmentContains(
		x1:x, y1:y, x2:x2, y2:y2, x:result1X, y:result1Y);
result2OnSegment = param.considerLine or ::getBoxDefinedBySegmentContains(
		x1:x, y1:y, x2:x2, y2:y2, x:result2X, y:result2Y);
result1Distance = ::getDistance(x1:x, y1:y, x2:result1X, y2:result1Y);
result2Distance = ::getDistance(x1:x, y1:y, x2:result2X, y2:result2Y);
useResult2 = false;
useResult2 = ((not result1OnSegment) and result2OnSegment)
	or (not (result1OnSegment and (not result2OnSegment)) and
		result2Distance < result1Distance);
x = 0;
y = 0;
if (not useResult2)
	x = result1X;
	y = result1Y;
else 
	x = result2X;
	y = result2Y;
end if;

// translate the result back so it applies to the given ellipse
// and line positions
x = x + centerX;
y = y + centerY;
if(param.axis == Axis::X)
  return x;
else
  return y;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d231dc32-718f-4f83-b423-56dcb75dc6e4",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'ellipseH',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"184ae800-9dc6-496d-ba81-3e97c4a72573",
	'');
INSERT INTO S_SPARM
	VALUES ("205d3e40-2c4a-4c9e-942f-80ad155bec32",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'x',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"be2ef912-2d3b-42f6-b8be-c4bcc3b11b82",
	'');
INSERT INTO S_SPARM
	VALUES ("c3d251f8-979e-4716-8074-92a220137101",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"60b6fd8f-7375-401d-b292-0599a5f36f9e",
	'');
INSERT INTO S_SPARM
	VALUES ("e58690ea-6f69-420c-aa4e-1dc50bc21b13",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"205d3e40-2c4a-4c9e-942f-80ad155bec32",
	'');
INSERT INTO S_SPARM
	VALUES ("60b6fd8f-7375-401d-b292-0599a5f36f9e",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'y',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"e58690ea-6f69-420c-aa4e-1dc50bc21b13",
	'');
INSERT INTO S_SPARM
	VALUES ("be2ef912-2d3b-42f6-b8be-c4bcc3b11b82",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'ellipseY',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"0acbb381-a214-49e6-b6aa-f08c7d166549",
	'');
INSERT INTO S_SPARM
	VALUES ("0acbb381-a214-49e6-b6aa-f08c7d166549",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'ellipseX',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"e589d5dc-a430-4813-883f-1fc5c2af438f",
	'');
INSERT INTO S_SPARM
	VALUES ("e589d5dc-a430-4813-883f-1fc5c2af438f",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'ellipseW',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"d231dc32-718f-4f83-b423-56dcb75dc6e4",
	'');
INSERT INTO S_SPARM
	VALUES ("184ae800-9dc6-496d-ba81-3e97c4a72573",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'considerLine',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f778600e-e0d7-4708-b04f-1f9654587e52",
	'');
INSERT INTO S_SPARM
	VALUES ("f778600e-e0d7-4708-b04f-1f9654587e52",
	"341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	'axis',
	"cf5d2877-53f0-411b-8843-124449b0f6ea",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cf5d2877-53f0-411b-8843-124449b0f6ea",
	"00000000-0000-0000-0000-000000000000",
	'Axis',
	'Specifies the X or Y axis.',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO PE_PE
	VALUES ("341a7b91-fd81-4d1a-8d8e-2bba8c182089",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f723e19-a7bd-4c3c-849f-118088c66273",
	"00000000-0000-0000-0000-000000000000",
	'getSlope',
	'',
	'/*
Returns the slope of the given line (x1, y1)-(x2, y2), or a very high 
number if the line is vertical.
*/

// if the line is vertical
if (param.x == param.x2) 
	// return a very high number
	return OS::MAX_INT();
end if;

// return the slope of the line
return (param.y2 - param.y) / (param.x2 - param.x);',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3f2ecdc9-458f-4e9f-84ac-3aef98960029",
	"2f723e19-a7bd-4c3c-849f-118088c66273",
	'x',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("379b8936-1275-4766-b2f5-d5a96c114204",
	"2f723e19-a7bd-4c3c-849f-118088c66273",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"3f2ecdc9-458f-4e9f-84ac-3aef98960029",
	'');
INSERT INTO S_SPARM
	VALUES ("bf82034d-68f0-41f3-85fb-b3d773647c4e",
	"2f723e19-a7bd-4c3c-849f-118088c66273",
	'y',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"379b8936-1275-4766-b2f5-d5a96c114204",
	'');
INSERT INTO S_SPARM
	VALUES ("24dba22a-5b7a-403b-b745-b38a3f9114c6",
	"2f723e19-a7bd-4c3c-849f-118088c66273",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"bf82034d-68f0-41f3-85fb-b3d773647c4e",
	'');
INSERT INTO PE_PE
	VALUES ("2f723e19-a7bd-4c3c-849f-118088c66273",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2a2e6996-bfbb-44fa-b23e-4a1073702712",
	"00000000-0000-0000-0000-000000000000",
	'getYIntercept',
	'',
	'/*
Returns the y-intercept of the given line (x1, y1)-(x2, y2).  If the line
is vertical, the result will be a very extreme value, instead of undefined.
*/

// rewrite y = mx + b as b = y - mx and plug in one of the given points 
// on the line to get the intercept
slope = ::getSlope(x:param.x, y:param.y, x2:param.x2, y2:param.y2);
return param.y - slope * param.x;',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("710e428e-f0b4-4ba1-a5a7-0cd7f6c895f9",
	"2a2e6996-bfbb-44fa-b23e-4a1073702712",
	'x',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b12f856e-42ec-4934-b580-51283910842f",
	"2a2e6996-bfbb-44fa-b23e-4a1073702712",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"710e428e-f0b4-4ba1-a5a7-0cd7f6c895f9",
	'');
INSERT INTO S_SPARM
	VALUES ("9ef497af-47a4-4d05-a49b-0ba3e68656a3",
	"2a2e6996-bfbb-44fa-b23e-4a1073702712",
	'y',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"b12f856e-42ec-4934-b580-51283910842f",
	'');
INSERT INTO S_SPARM
	VALUES ("a53e0b5e-24ed-40aa-af19-0d2c09d78193",
	"2a2e6996-bfbb-44fa-b23e-4a1073702712",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"9ef497af-47a4-4d05-a49b-0ba3e68656a3",
	'');
INSERT INTO PE_PE
	VALUES ("2a2e6996-bfbb-44fa-b23e-4a1073702712",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0a5f66ea-01b9-4f28-b503-c51dc1912284",
	"00000000-0000-0000-0000-000000000000",
	'getBoxDefinedBySegmentContains',
	'',
	'/*
Returns whether the box defined by considering the given segment 
(x1, y1)-(x2, y2) as its diagonal contains the given location.
*/

// alias the parameters for better readability of what''s below
x1 = param.x1;
y1 = param.y1;
x2 = param.x2;
y2 = param.y2;
x = param.x;
y = param.y;

// detm the box defined by the given segment
minX = ::min(a:x1, b:x2);
maxX = ::max(a:x1, b:x2);
minY = ::min(a:y1, b:y2);
maxY = ::max(a:y1, b:y2);

// return whether the given position lies within the box detm''d above
return ((x >= minX and x <= maxX) and (y >= minY and y <= maxY));
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8a167b06-2d79-4ed1-9a3f-02a289be5465",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'x',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("216eaf74-204f-4f87-806b-e9a73ede05b1",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"a6761baa-400f-4d85-992a-990fcae662c1",
	'');
INSERT INTO S_SPARM
	VALUES ("5a4e9649-ede5-4144-afef-f23d21f5d329",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'y',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"9160384f-28d7-48af-b00b-2f9a72cb4ccf",
	'');
INSERT INTO S_SPARM
	VALUES ("9160384f-28d7-48af-b00b-2f9a72cb4ccf",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"d76d4fc1-d169-45c6-887c-fd1d4de15093",
	'');
INSERT INTO S_SPARM
	VALUES ("a6761baa-400f-4d85-992a-990fcae662c1",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'y1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"5a4e9649-ede5-4144-afef-f23d21f5d329",
	'');
INSERT INTO S_SPARM
	VALUES ("d76d4fc1-d169-45c6-887c-fd1d4de15093",
	"0a5f66ea-01b9-4f28-b503-c51dc1912284",
	'x1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"8a167b06-2d79-4ed1-9a3f-02a289be5465",
	'');
INSERT INTO PE_PE
	VALUES ("0a5f66ea-01b9-4f28-b503-c51dc1912284",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9d598233-0d79-4730-b1f3-97a49b69e706",
	"00000000-0000-0000-0000-000000000000",
	'getIntersectionOfSegmentWithSquare',
	'',
	'minX = ::min(a:param.x1, b:param.x2);
maxX = ::max(a:param.x1, b:param.x2);
minY = ::min(a:param.y1, b:param.y2);
maxY = ::max(a:param.y1, b:param.y2);
//
// Look for an intersection with all four sides of the shape.
//
// Top

leftX = param.squareX;
rightX = param.squareX + param.squareW;
topY = param.squareY;
bottomY = param.squareY + param.squareH;
intersectX = GR::getXIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
	x3:leftX, y3:topY, x4:rightX, y4:topY);
intersectY = GR::getYIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
	x3:leftX, y3:topY, x4:rightX, y4:topY);
if ((intersectX >= minX and intersectX <= maxX) and
    (intersectY >= minY and intersectY <= maxY))
  if ((intersectX >= leftX 
  	and intersectX <= rightX) 
  	and (intersectY == topY))
    if (param.axis == Axis::X)
      return intersectX;
    else
      return intersectY;
    end if;
  end if;
end if;

topIntersectX = intersectX; 
topIntersectY = intersectY;

// Bottom
intersectX = GR::getXIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
	x3:leftX, y3:bottomY, x4:rightX, y4:bottomY);
intersectY = GR::getYIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
	x3:leftX, y3:bottomY, x4:rightX, y4:bottomY);
if ((intersectX >= minX and intersectX <= maxX) and
    (intersectY >= minY and intersectY <= maxY))
  if ((intersectX >= leftX and intersectX <= rightX) and
    (intersectY == bottomY))
    if (param.axis == Axis::X)
      return intersectX;
    else
      return intersectY;
    end if;
  end if;
end if;

bottomIntersectX = intersectX;
bottomIntersectY = intersectY;

// Left
intersectX = GR::getXIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
                                                  x3:leftX, y3:topY, x4:leftX, y4:bottomY);
intersectY = GR::getYIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
                                                  x3:leftX, y3:topY, x4:leftX, y4:bottomY);
if ((intersectX >= minX and intersectX <= maxX) and
    (intersectY >= minY and intersectY <= maxY))
  if ((intersectX == leftX) and
    (intersectY >= topY and intersectY <= bottomY))
    if (param.axis == Axis::X)
      return intersectX;
    else
      return intersectY;
    end if;
  end if;
end if;

leftIntersectX = intersectX;
leftIntersectY = intersectY;

// Right
intersectX = GR::getXIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
                                                  x3:rightX, y3:topY, x4:rightX, y4:bottomY);
intersectY = GR::getYIntersect(x1:param.x1, y1:param.y1, x2:param.x2, y2:param.y2,
                                                  x3:rightX, y3:topY, x4:rightX, y4:bottomY);
if ((intersectX >= minX and intersectX <= maxX) and
    (intersectY >= minY and intersectY <= maxY))
  if ((intersectX == rightX) and
    (intersectY >= topY and intersectY <= bottomY))
    if (param.axis == Axis::X)
      return intersectX;
    else
      return intersectY;
    end if;
  end if;
end if;

rightIntersectX = intersectX;
rightIntersectY = intersectY;

point1IntersectX = topIntersectX;
point1IntersectY = topIntersectY;
point2IntersectX = topIntersectX;
point2IntersectY = topIntersectY;

distanceToPoint1 = ::getDistance(x1:topIntersectX, x2:param.x1, y1:topIntersectY, y2:param.y1);
tempDistance = ::getDistance(x1:bottomIntersectX, x2:param.x1, y1:bottomIntersectY, y2:param.y1);
if(tempDistance < distanceToPoint1)
  distanceToPoint1 = tempDistance;
  point1IntersectX = bottomIntersectX;
  point1IntersectY = bottomIntersectY;
end if;
tempDistance = ::getDistance(x1:leftIntersectX, x2:param.x1, y1:leftIntersectY, y2:param.y1);
if(tempDistance < distanceToPoint1)
  distanceToPoint1 = tempDistance;
  point1IntersectX = leftIntersectX;
  point1IntersectY = leftIntersectY;  
end if;
tempDistance = ::getDistance(x1:rightIntersectX, x2:param.x1, y1:rightIntersectY, y2:param.y1);
if(tempDistance < distanceToPoint1)
  distanceToPoint1 = tempDistance;
  point1IntersectX = rightIntersectX;
  point1IntersectY = rightIntersectY;
end if;

distanceToPoint2 = ::getDistance(x1:topIntersectX, x2:param.x2, y1:topIntersectY, y2:param.y2);
tempDistance = ::getDistance(x1:bottomIntersectX, x2:param.x2, y1:bottomIntersectY, y2:param.y2);
if(tempDistance < distanceToPoint2)
  distanceToPoint2 = tempDistance;
  point2IntersectX = bottomIntersectX;
  point2IntersectY = bottomIntersectY;
end if;
tempDistance = ::getDistance(x1:leftIntersectX, x2:param.x2, y1:leftIntersectY, y2:param.y2);
if(tempDistance < distanceToPoint2)
  distanceToPoint2 = tempDistance;
  point2IntersectX = leftIntersectX;
  point2IntersectY = leftIntersectY;
end if;
tempDistance = ::getDistance(x1:rightIntersectX, x2:param.x2, y1:rightIntersectY, y2:param.y2);
if(tempDistance < distanceToPoint2)
  distanceToPoint2 = tempDistance;
  point2IntersectX = rightIntersectX;
  point2IntersectY = rightIntersectY;
end if;

lineIntersectX = 0;
lineIntersectY = 0;

if(distanceToPoint1 < distanceToPoint2)
  lineIntersectX = point1IntersectX;
  lineIntersectY = point1IntersectY;
else
  lineIntersectX = point2IntersectX;
  lineIntersectY = point2IntersectY;
end if;

if(param.axis == Axis::X) and (param.considerLine)
  return lineIntersectX;
elif(param.axis == Axis::Y) and (param.considerLine)
  return lineIntersectY;
end if;

return 0;',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3a1f3bb6-cffb-434e-a48a-1efed13a04ca",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'squareX',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"d731ff82-5ec9-481f-89ec-de70d130e879",
	'');
INSERT INTO S_SPARM
	VALUES ("2e94499b-e083-4a5e-9048-3163d5d97c67",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'axis',
	"cf5d2877-53f0-411b-8843-124449b0f6ea",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("84842b78-5f3d-4d75-8c4a-8009782be669",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'y2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"c77c2507-b892-4e2a-a623-6fc66bad6749",
	'');
INSERT INTO S_SPARM
	VALUES ("9b1a3d72-2136-4ee5-b5aa-1b7f6b527334",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'x2',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"23c5388c-5dca-4d0a-8372-54444c582a1d",
	'');
INSERT INTO S_SPARM
	VALUES ("c77c2507-b892-4e2a-a623-6fc66bad6749",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'y1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"9b1a3d72-2136-4ee5-b5aa-1b7f6b527334",
	'');
INSERT INTO S_SPARM
	VALUES ("23c5388c-5dca-4d0a-8372-54444c582a1d",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'x1',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"4ab442ac-11c9-4a93-85b6-0984a98ed895",
	'');
INSERT INTO S_SPARM
	VALUES ("2b8e7bcc-9c0f-484c-831e-12b6453761eb",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'squareH',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"90e66160-a10e-4c97-b4b6-7035b635570d",
	'');
INSERT INTO S_SPARM
	VALUES ("d731ff82-5ec9-481f-89ec-de70d130e879",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'squareW',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"2b8e7bcc-9c0f-484c-831e-12b6453761eb",
	'');
INSERT INTO S_SPARM
	VALUES ("4ab442ac-11c9-4a93-85b6-0984a98ed895",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'squareY',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"3a1f3bb6-cffb-434e-a48a-1efed13a04ca",
	'');
INSERT INTO S_SPARM
	VALUES ("90e66160-a10e-4c97-b4b6-7035b635570d",
	"9d598233-0d79-4730-b1f3-97a49b69e706",
	'considerLine',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"2e94499b-e083-4a5e-9048-3163d5d97c67",
	'');
INSERT INTO PE_PE
	VALUES ("9d598233-0d79-4730-b1f3-97a49b69e706",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3142aa17-acf5-40e2-8390-ba9691a7f40a",
	"00000000-0000-0000-0000-000000000000",
	'truncateTextBlock',
	'Translate: native',
	'//
// Take a string with embedded newlines and chop it down based on the maximum
// number of lines the user wants to allow.  Return the result.
//
String[] lines = p_Text.split("\n");
String trimmed_text = "";
if (p_Maxlines < lines.length) {
	for (int i = 0; i < p_Maxlines; ++i) {
		trimmed_text += lines[i] + "\n";
	}
} else {
	trimmed_text = p_Text;
}
return( trimmed_text );',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1906d67b-83b3-4e4d-b9af-097c4d7bead5",
	"3142aa17-acf5-40e2-8390-ba9691a7f40a",
	'text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"45487ee1-4d66-4c81-812a-d0283451ae93",
	'');
INSERT INTO S_SPARM
	VALUES ("45487ee1-4d66-4c81-812a-d0283451ae93",
	"3142aa17-acf5-40e2-8390-ba9691a7f40a",
	'maxLines',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3142aa17-acf5-40e2-8390-ba9691a7f40a",
	1,
	"f10395e2-6099-42e4-9635-26164f0ea089",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("f10395e2-6099-42e4-9635-26164f0ea089",
	1,
	"3c3f6891-c1a9-462c-b607-bc5572f42b69",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("3c3f6891-c1a9-462c-b607-bc5572f42b69",
	"8f801c9a-cf2d-4ef4-b11a-51b8697e3ca8",
	"8f801c9a-cf2d-4ef4-b11a-51b8697e3ca8",
	'ooaofgraphics',
	'========================================================================

File:          $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2004-2014 Mentor Graphics Corporation All rights reserved.

========================================================================
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License.  You may obtain a copy
of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
License for the specific language governing permissions and limitations under
the License.
========================================================================

This is the graphics domain for the Tiger project.

The processing in this model describes the activities
required for model diagram display and editing.

Import:org.xtuml.bp.core.*
-------------------------------------------------------------------------------------------------------------
',
	0,
	'../ooaofgraphics.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("8f801c9a-cf2d-4ef4-b11a-51b8697e3ca8",
	'org.xtuml.bp.ui.canvas',
	1,
	'../../org.xtuml.bp.ui.canvas.xtuml');
